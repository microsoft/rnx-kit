{"searchDocs":[{"title":"Architecture Overview","type":0,"sectionRef":"#","url":"/rnx-kit/docs/architecture/overview","content":"Architecture Overview If you're here, it means you want to learn more about the tools themselves. You want to understand why. What's going on inside of a particular tool? What decisions led to that design? Don't see the topic you're looking for? Do you have specific questions that aren't answered here? Take a look at the Community area. You'll find talks, podcasts, recorded streaming sessions, and other materials that may help you out. You'll also find links to the developer community where you can ask questions and get help.","keywords":"","version":"Next"},{"title":"Contributing","type":0,"sectionRef":"#","url":"/rnx-kit/docs/contributing","content":"","keywords":"","version":"Next"},{"title":"Contributor License Agreement​","type":1,"pageTitle":"Contributing","url":"/rnx-kit/docs/contributing#contributor-license-agreement","content":" Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.  When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.  ","version":"Next","tagName":"h2"},{"title":"Requirements​","type":1,"pageTitle":"Contributing","url":"/rnx-kit/docs/contributing#requirements","content":" Node LTS (see releases for specific versions)Yarn Classic  ","version":"Next","tagName":"h2"},{"title":"Optional​","type":1,"pageTitle":"Contributing","url":"/rnx-kit/docs/contributing#optional","content":" Android: Android Studio Android SDK Platform 34Android SDK Build-Tools 33.0.1To install the required SDKs, go into Preferences ❭ Appearance &amp; Behavior ❭ System Settings ❭ Android SDK. iOS/macOS: XcodeCocoaPods Windows: Ensure that Developer Mode is turned on in Windows Settings appInstall development dependencies as described in the React Native for Windows documentation  ","version":"Next","tagName":"h3"},{"title":"Build​","type":1,"pageTitle":"Contributing","url":"/rnx-kit/docs/contributing#build","content":" We use Yarn to install npm dependencies. From the repo root, run:  yarn   Once it's done, you can choose to build all packages or just the packages you're interested in.  If you want to build all packages, run the following command at the root:  yarn build   Otherwise, you can specify which package to build, e.g. @rnx-kit/cli:  yarn build-scope @rnx-kit/cli   Alternatively, you can navigate to the package folder and run:  cd packages/cli yarn build --dependencies   Both the repository level build-scope and the package localbuild --dependencies ensure all dependencies are built before the target package.  Below is a table of commonly used commands and what they do depending on your current working directory.  Command\tRepository Level\tPackage Levelyarn build\tBuilds all packages in the repository\tBuilds the current package only yarn build --dependencies\t--\tBuilds the current package and its dependencies yarn build-scope\tBuilds the specified package and its dependencies\t-- yarn format\tFormats all packages in the repository\tFormats the current package only yarn lint\tLints all packages in the repository\tLints the current package only yarn test\tTests all packages in the repository\tTests the current package only  ","version":"Next","tagName":"h2"},{"title":"Style Guide​","type":1,"pageTitle":"Contributing","url":"/rnx-kit/docs/contributing#style-guide","content":" Most files are formatted with Prettier. We also use ESLint to lint all JavaScript code.  You can trigger formatting by running yarn format, and linting withyarn lint.  ","version":"Next","tagName":"h2"},{"title":"Adding a New Package​","type":1,"pageTitle":"Contributing","url":"/rnx-kit/docs/contributing#adding-a-new-package","content":" To ensure that there is consistency and shared practices across the monorepo, we have introduced a small script to easily allow for new packages generation.  Simply run  yarn new-package &lt;package-name&gt;   To generate a sample project for you to use; this is based onpackages/template. You can pass the extra flag --experimental to send the package in the incubator folder — files will be tweaked as necessary.  ","version":"Next","tagName":"h2"},{"title":"Change Logs​","type":1,"pageTitle":"Contributing","url":"/rnx-kit/docs/contributing#change-logs","content":" Each package in this monorepo contains a change log. The log is built from change descriptions submitted with each PR.  yarn change   This launches Changesets, which collects and records information about your change.  Follow the prompts and describe the changes you are making to each package. This information is written in files under /.changeset. Our CI loop uses these files to bump package versions and update package change logs.  [!NOTE] You only need one change log entry per feature/fix. You don't need to create new entries if you're addressing PR feedback.  ","version":"Next","tagName":"h2"},{"title":"Releases​","type":1,"pageTitle":"Contributing","url":"/rnx-kit/docs/contributing#releases","content":" Our release process is fully automated by Changesets.  When a PR is merged, our CI loop uses Changesets to version-bump each changed package and publish it to npm.  ","version":"Next","tagName":"h2"},{"title":"General Maintenance​","type":1,"pageTitle":"Contributing","url":"/rnx-kit/docs/contributing#general-maintenance","content":" We use Renovate to keep dependencies up to date. They are currently scheduled to run every Monday morning. You can also manually trigger updates via the Dependency Dashboard.  ","version":"Next","tagName":"h2"},{"title":"Direct Dependencies​","type":1,"pageTitle":"Contributing","url":"/rnx-kit/docs/contributing#direct-dependencies","content":" Patch bumps: As long as the CI is green, these should be good to merge without having to touch package.json. The only thing to watch out for is whether duplicates are introduced in yarn.lock: Sometimes, running yarn dedupe is enough to get rid of duplicates.Other times, we have to look at the dependency chain and dedupe by bumping one of the dependees.As a last resort, and only if one of the dependees are using an unnecessarily strict version range, we can add a resolutions entry inpackage.json. Minor bumps: Semantically, minor bumps should only include additions and not break anything. Check the change log to be sure. Otherwise, see the notes on patch bumps.Major bumps: In general, we only do major bumps manually. This is to ensure that we aren't unnecessarily adding more dependencies on the consumer side or make things more complicated to maintain. An example of us holding back is chalk; we are stuck on 4.x until @react-native-community/climigrates to ESM.  ","version":"Next","tagName":"h3"},{"title":"Development Dependencies​","type":1,"pageTitle":"Contributing","url":"/rnx-kit/docs/contributing#development-dependencies","content":" Consumers never see these so we can be less conservative, especially when it comes to major bumps. Otherwise, everything mentioned above still applies.  ","version":"Next","tagName":"h3"},{"title":"Android Dependencies​","type":1,"pageTitle":"Contributing","url":"/rnx-kit/docs/contributing#android-dependencies","content":" Always check the change log for potentially breaking changes as they typically do not follow semantic versioning. In particular, be on the lookout for changes to:  Minimum target versionAndroid SDK versionKotlin version  If the bump contains potentially breaking changes, consider whether we need to gate them behind a version check. For example, we only useandroidx.activity:activity-ktx:1.17.2 when on Kotlin 1.8 or higher (see build.gradle). ","version":"Next","tagName":"h3"},{"title":"Community","type":0,"sectionRef":"#","url":"/rnx-kit/docs/community","content":"","keywords":"","version":"Next"},{"title":"Interact with us!​","type":1,"pageTitle":"Community","url":"/rnx-kit/docs/community#interact-with-us","content":"  The primary way to interact with us is via rnx-kitIssues,Discussions, andProject Board.    If you want to keep up with everything React Native at Microsoft, you can follow our Twitter account@ReactNativeMSFT.    You can also subscribe to the official React Native at Microsoft devblog to be in the loop with all the latest news.   ","version":"Next","tagName":"h3"},{"title":"Keep up with React Native​","type":1,"pageTitle":"Community","url":"/rnx-kit/docs/community#keep-up-with-react-native","content":"  React Native Community    React Native Blog   ","version":"Next","tagName":"h3"},{"title":"Talks​","type":1,"pageTitle":"Community","url":"/rnx-kit/docs/community#talks","content":" ","version":"Next","tagName":"h2"},{"title":"Videos​","type":1,"pageTitle":"Community","url":"/rnx-kit/docs/community#videos","content":"           ","version":"Next","tagName":"h3"},{"title":"Podcasts​","type":1,"pageTitle":"Community","url":"/rnx-kit/docs/community#podcasts","content":"  ","version":"Next","tagName":"h3"},{"title":"Dependency Management","type":0,"sectionRef":"#","url":"/rnx-kit/docs/architecture/dependency-management","content":"","keywords":"","version":"Next"},{"title":"Terminology​","type":1,"pageTitle":"Dependency Management","url":"/rnx-kit/docs/architecture/dependency-management#terminology","content":" experience — As opposed to apps that get shipped in e.g. App Store or Play Store, experiences may be a single screen (or multiple) integrated into an app. They are normally not shipped as standalone apps.monorepo — A single repository in which many projects live. These can range from single-purpose libraries to experiences or full-fledged apps. For instance, https://github.com/microsoft/rnx-kit is a monorepo containing many useful tools, including dep-check.  ","version":"Next","tagName":"h2"},{"title":"Motivation​","type":1,"pageTitle":"Dependency Management","url":"/rnx-kit/docs/architecture/dependency-management#motivation","content":" The design of dep-check is driven mainly by the following questions:  ","version":"Next","tagName":"h2"},{"title":"1. Which packages should I use?​","type":1,"pageTitle":"Dependency Management","url":"/rnx-kit/docs/architecture/dependency-management#1-which-packages-should-i-use","content":" There is currently no centralized place where developers can go to and get a list of recommended modules, and which versions they should be using when targeting a specific version of React Native. How do you know whether a module is still maintained? Are the maintainers still around to review PRs? Is the module being used by others?  Take AsyncStorage as an example. This is a module that used to ship with React Native. It then got moved out to the React Native Community organization as@react-native-community/async-storage as part of the Lean Core effort. It later got ejected from React Native Community, and was renamed@react-native-async-storage/async-storage. If you don't know the full story of what happened here, there is little chance you know that AsyncStorage from core, @react-native-community/async-storage, and@react-native-async-storage/async-storage are all the same module. Or that@react-native-community/netinfo was a fork of react-native-netinfo that later became the &quot;official&quot; one.  ","version":"Next","tagName":"h3"},{"title":"2. How do I align all of my code on the same set of packages and versions?​","type":1,"pageTitle":"Dependency Management","url":"/rnx-kit/docs/architecture/dependency-management#2-how-do-i-align-all-of-my-code-on-the-same-set-of-packages-and-versions","content":" Ideally, all apps are always on the latest version of react-native and are using a common set of well maintained community modules. Unfortunately, the reality is that some apps are on a two year old version of react-native and some modules that are no longer maintained, while others are on a somewhat recent version of react-native but on an older version of WebView than what others use. When you're responsible for an experience that goes into many apps, you may be forced to provide support for both scenarios (and others), and that's where most feel the pain. How can you make sure that your experiences' dependencies play well with each other or even other experiences? The pain is magnified in a monorepo with many developers as breakages can come from a single package being out of sync with the others. Breakages caused by such packages are hard to debug and pinpoint the cause. In a monorepo, it is very important to ensure that all packages are on the same versions.  ","version":"Next","tagName":"h3"},{"title":"3. How do I align all apps on the same set of packages and versions?​","type":1,"pageTitle":"Dependency Management","url":"/rnx-kit/docs/architecture/dependency-management#3-how-do-i-align-all-apps-on-the-same-set-of-packages-and-versions","content":" When integrating multiple experiences into an existing app, it can sometimes be difficult to determine the dependencies that need to be installed. For example, given two experiences with dependencies as below:  { &quot;name&quot;: &quot;experience-A&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;peerDependencies&quot;: { &quot;react-native&quot;: &quot;^0.63 || ^0.64&quot;, &quot;react-native-netinfo&quot;: &quot;^5.7.1 || ^6.0.0&quot; } }   { &quot;name&quot;: &quot;experience-B&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;peerDependencies&quot;: { &quot;react-native&quot;: &quot;^0.63&quot;, &quot;react-native-netinfo&quot;: &quot;^5.7.1 || ^6.0.0&quot; } }   In this example, it's not so hard to see that the integrating app should be using react-native 0.63 and react-native-netinfo 6.0.0. However, imagine that there are multiple experiences and many more dependencies. It's not hard to see that it can quickly become very messy to go through all of them and make sure that the app's package.json satisfies all of them, and without causing any conflicts. And you'll have to do this every time one or more packages get updated. Not all experiences will be declaring their dependencies correctly, e.g. putting react-native-netinfo under dependencies and causing multiple versions of react-native-netinfo to be bundled. When it is time to update React Native to the latest version, can you do that and still be confident that all your modules will still work?  @rnx-kit/dep-check works by reading a configuration, and suggests changes that need to be made. It can optionally also write said changes to thepackage.json. The configuration must be manually written by the package owner. It declares which React Native versions the package supports, and which capabilities it requires. For instance, lets say we have a library,awesome-library, which supports React Native versions 0.63 and 0.64, and needs something that provides network information. We would declare the following in our package.json:  package.json { &quot;name&quot;: &quot;awesome-library&quot;, &quot;version&quot;: &quot;1.0.0&quot;, ... &quot;rnx-kit&quot;: { &quot;reactNativeVersion&quot;: &quot;^0.63 || ^0.64&quot;, &quot;capabilities&quot;: [ &quot;core-android&quot;, &quot;core-ios&quot;, &quot;netinfo&quot; ] } }   If we run @rnx-kit/dep-check now, it will suggest that we changepeerDependencies and devDependencies to the following:  package.json { &quot;name&quot;: &quot;awesome-library&quot;, &quot;version&quot;: &quot;1.0.0&quot;, ... &quot;peerDependencies&quot;: { &quot;@react-native-community/netinfo&quot;: &quot;^5.7.1 || ^6.0.0&quot;, &quot;react-native&quot;: &quot;^0.63.2 || ^0.64.1&quot; }, &quot;devDependencies&quot;: { &quot;@react-native-community/netinfo&quot;: &quot;^5.7.1&quot;, &quot;react-native&quot;: &quot;^0.63.2&quot; }, &quot;rnx-kit&quot;: { &quot;reactNativeVersion&quot;: &quot;^0.63 || ^0.64&quot;, &quot;capabilities&quot;: [ &quot;core-android&quot;, &quot;core-ios&quot;, &quot;netinfo&quot; ] } }   Now our package.json correctly declares that it supports React Native 0.63 and 0.64 to consumers. It also added @react-native-community/netinfo, a package that provides network information. At the same time, it also sets the versions we'll need during development.  For apps that use @rnx-kit/dep-check, the process is similar but you'll also need to declare that the package is an app by adding &quot;kitType&quot;: &quot;app&quot;:  package.json { &quot;name&quot;: &quot;awesome-app&quot;, &quot;version&quot;: &quot;1.0.0&quot;, ... &quot;dependencies&quot;: { &quot;@react-native-community/netinfo&quot;: &quot;^6.0.0&quot;, &quot;awesome-library&quot;: &quot;1.0.0&quot;, &quot;react-native&quot;: &quot;^0.64.1&quot; }, &quot;rnx-kit&quot;: { &quot;reactNativeVersion&quot;: &quot;^0.64&quot;, &quot;kitType&quot;: &quot;app&quot;, &quot;capabilities&quot;: [ &quot;core-android&quot;, &quot;core-ios&quot; ] } }   Now, we see that @rnx-kit/dep-check added @react-native-community/netinfoeven though it wasn't declared in capabilities. This is because when a package is an app, it needs to fulfill the requirements of its dependencies. In this example, because awesome-library needs the netinfo capability, it gets added to awesome-app.  ","version":"Next","tagName":"h3"},{"title":"Design​","type":1,"pageTitle":"Dependency Management","url":"/rnx-kit/docs/architecture/dependency-management#design","content":" dep-check attempts to solve these issues by aligning users on a centralized repository of dependencies. Initially, the repository will be seeded with popular packages, but the goal for it is to become crowd-sourced so that we all can benefit from the latest fixes and features without all having to be up-to-date on everything that goes within the React Native community.  ","version":"Next","tagName":"h2"},{"title":"Capabilities​","type":1,"pageTitle":"Dependency Management","url":"/rnx-kit/docs/architecture/dependency-management#capabilities","content":" Modules usually provide one or more features. For instance,@react-native-async-storage/async-storage provides a simple key-value storage,react-native-webview provides a web view component, and so on. Knowing which modules are providing the desired features can be tricky. With dep-check, we propose the use of generic names, or capabilities as we call them, that map directly to a package:  Capability\tDescription\tPackagenetinfo\tDevice network information\t@react-native-community/netinfo storage\tKey-value storage\t@react-native-async-storage/async-storage webview\tWebView component\treact-native-webview  dep-check also defines a set of core capabilities. These are capabilities that provide platform support, and are currently defined in the below table:  Capability\tPlatform\tPackagecore-android\tAndroid\treact-native core-ios\tiOS\treact-native core-macos\tmacOS\treact-native-macos core-visionos\tvisionOS\t@callstack/react-native-visionos core-windows\tWindows\treact-native-windows  With generic names, we are more resilient against module renames since we can recommend the old name in one version, and the new name in the next. We could even provide a fork with security fixes or backwards compatibility shims for long term support. We will see how this can be achieved with profiles in the next section.  ","version":"Next","tagName":"h3"},{"title":"Profiles​","type":1,"pageTitle":"Dependency Management","url":"/rnx-kit/docs/architecture/dependency-management#profiles","content":" We cannot force everyone to be on the latest version of react-native. Sometimes it's not desirable, e.g. due to bugs, or feasible due to constraints or lack of expertise. What we can do, however, is to try lessen the pain of supporting multiple versions of react-native and community modules. To that end, dep-check introduces the concept of profiles. A profile is a single set of all capability to package@version mappings, usually tied to a single version of react-native. For instance, the following table is a partial profile forreact-native 0.63 (full listing here):  Capability\tPackagecore-android\treact-native@^0.63.2 core-ios\treact-native@^0.63.2 core-macos\treact-native-macos@^0.63.0 core-windows\treact-native-windows@^0.63.0 netinfo\t@react-native-community/netinfo@^5.7.1 react\treact@16.13.1 storage\t@react-native-community/async-storage@^1.12.1 webview\treact-native-webview@^11.4.2  Here's the partial profile for react-native 0.64 (full listing here):  Capability\tPackagecore-android\treact-native@^0.64.2 core-ios\treact-native@^0.64.2 core-macos\treact-native-macos@^0.64.0 core-windows\treact-native-windows@^0.64.0 netinfo\t@react-native-community/netinfo@^6.0.0 react\treact@17.0.1 storage\t@react-native-async-storage/async-storage@^1.15.3 webview\treact-native-webview@^11.4.2  A package declares what capabilities it requires, which versions ofreact-native it supports, and dep-check will populate the package'spackage.json with the modules and versions that it should use. For instance, if a package that supports react-native 0.63 requires core-ios, netinfo, and react, dep-check will add react-native@^0.63.2,@react-native-community/netinfo@^5.7.1, and react@16.13.1.  When the package is migrated from one profile version to the next, the author should be prompted to bump a few packages. For instance, besides bumpingreact-native, they also should bump react to 17.0.1, and@react-native-community/netinfo to ^6.0.0. We also note that@react-native-community/async-storage was renamed to@react-native-async-storage/async-storage. While users are on older profiles, they should be warned of upcoming, potentially breaking changes so they can be prepared.  Besides package renames, we can also recommend alternative modules that provide the same capability, or forks that include security fixes or shims for backwards compatibility where long term support is a concern.  ","version":"Next","tagName":"h3"},{"title":"Putting it all together​","type":1,"pageTitle":"Dependency Management","url":"/rnx-kit/docs/architecture/dependency-management#putting-it-all-together","content":" Now that we know the basic concepts, let's take a look at how it works. We'll start with configuring the examples from earlier. experience-A depends onreact-native and react-native-netinfo. According to our list of capabilities, they correspond to core-android/core-ios and netinfo:   { &quot;name&quot;: &quot;experience-A&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;peerDependencies&quot;: { &quot;react-native&quot;: &quot;^0.63 || ^0.64&quot;, &quot;react-native-netinfo&quot;: &quot;^5.7.1 || ^6.0.0&quot; }, + &quot;rnx-kit&quot;: { + &quot;reactNativeVersion&quot;: &quot;^0.63 || ^0.64&quot;, + &quot;capabilities&quot;: [&quot;core-android&quot;, &quot;core-ios&quot;, &quot;netinfo&quot;] + } }   Likewise for experience-B:   { &quot;name&quot;: &quot;experience-B&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;peerDependencies&quot;: { &quot;react-native&quot;: &quot;^0.63&quot;, &quot;react-native-netinfo&quot;: &quot;^5.7.1 || ^6.0.0&quot; }, + &quot;rnx-kit&quot;: { + &quot;reactNativeVersion&quot;: &quot;^0.63&quot;, + &quot;capabilities&quot;: [&quot;core-android&quot;, &quot;core-ios&quot;, &quot;netinfo&quot;] + } }   If we run dep-check now, it will complain because experience-B only needs to support react-native-netinfo@^5.7.1:   { &quot;name&quot;: &quot;experience-B&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;peerDependencies&quot;: { &quot;react-native&quot;: &quot;^0.63&quot;, - &quot;react-native-netinfo&quot;: &quot;^5.7.1 || ^6.0.0&quot; + &quot;react-native-netinfo&quot;: &quot;^5.7.1&quot; }, &quot;rnx-kit&quot;: { &quot;reactNativeVersion&quot;: &quot;^0.63&quot;, &quot;capabilities&quot;: [&quot;core-android&quot;, &quot;core-ios&quot;, &quot;netinfo&quot;] } }   We try to avoid breaking changes (major version bumps) within a single profile version. That's why dep-check will recommend 5.x only for react-native 0.63.  If we add webview to capabilities now, dep-check will ask you to addreact-native-webview:   { &quot;name&quot;: &quot;experience-B&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;peerDependencies&quot;: { &quot;react-native&quot;: &quot;^0.63&quot;, &quot;react-native-netinfo&quot;: &quot;^5.7.1&quot;, + &quot;react-native-webview&quot;: &quot;^11.4.2&quot; }, &quot;rnx-kit&quot;: { &quot;reactNativeVersion&quot;: &quot;^0.63&quot;, &quot;capabilities&quot;: [&quot;core-android&quot;, &quot;core-ios&quot;, &quot;netinfo&quot;, &quot;webview&quot;] } }   The user need not know what package to use, only the desired feature.  Let's move on to configuring our app:   { &quot;name&quot;: &quot;app&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;dependencies&quot;: { &quot;experience-A&quot;: &quot;^1.0.0&quot;, &quot;experience-B&quot;: &quot;^1.0.0&quot;, &quot;react-native&quot;: &quot;^0.63.2&quot; }, + &quot;rnx-kit&quot;: { + &quot;reactNativeVersion&quot;: &quot;^0.63&quot;, + &quot;kitType&quot;: &quot;app&quot;, + &quot;capabilities&quot;: [&quot;core-android&quot;, &quot;core-ios&quot;] + } }   The first thing you should note here is that we need to declare that this is an app by setting &quot;kitType&quot;: &quot;app&quot;. This will tell dep-check to also scan dependencies. By default, this is set to library.  Running dep-check now, the first thing it does is to scan through all your dependencies and gather all required capabilities. dep-check will then resolve all capabilities, and finally make sure the dependencies section inpackage.json contains all the needed packages and at the correct versions. In our example, our list of capabilities will contain [&quot;netinfo&quot;, &quot;webview&quot;].dep-check sees that there are missing dependencies in your package.json and will output an error message telling you to add them:   { &quot;name&quot;: &quot;app&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;dependencies&quot;: { &quot;experience-A&quot;: &quot;^1.0.0&quot;, &quot;experience-B&quot;: &quot;^1.0.0&quot;, &quot;react-native&quot;: &quot;^0.63.2&quot;, + &quot;react-native-netinfo&quot;: &quot;^5.7.1&quot;, + &quot;react-native-webview&quot;: &quot;^11.4.2&quot; }, &quot;rnx-kit&quot;: { &quot;reactNativeVersion&quot;: &quot;^0.63&quot;, &quot;capabilities&quot;: [&quot;core-android&quot;, &quot;core-ios&quot;] } }   Re-running the command with --write will let dep-check add them for you.  dep-check makes sure that your declared dependencies always matches your list of capabilities. It will make sure that your dependencies are declare in the right sections, i.e. under dependencies if you're an app, and underpeerDependencies if you're a library. It will also report partial ones, meaning it will catch scenarios such as when you declare support for 0.63 and 0.64, but are missing react-native-netinfo@^6.0.0.  ","version":"Next","tagName":"h3"},{"title":"Zero-config​","type":1,"pageTitle":"Dependency Management","url":"/rnx-kit/docs/architecture/dependency-management#zero-config","content":" dep-check is currently opt-in. Packages need to have a configuration thatdep-check can run against. However, there is still a need to align packages across repositories without having to configure all packages. dep-check should still be useful without a configuration.  --init — When configuring a package, it can be cumbersome to know what packages map to what capabilities. --init is a best-effort command that scans all your dependencies and adds a configuration with all the capabilities it thinks are required. You'll likely have to clean up the list, but at least you won't have to start from scratch.--vigilant — Without configuring any packages, you can still benefit fromdep-check with --vigilant. This mode will scan all dependencies and make sure that their dependencies align with the specified profiles. For instance,--vigilant 0.63,0.64 will compare dependencies against all known modules in profile version 0.63 and 0.64.  note In align-deps, we've changed the configuration schema to make it more generic and not tied to a specific dependency (i.e. react-native). The --vigilantflag had to be replaced as well. The equivalent of --vigilant 0.63,0.64 in the new schema is --requirements 'react-native@0.63 || 0.64'. You can read more about the changes in this RFC:dep-check v2  ","version":"Next","tagName":"h3"},{"title":"Extensions​","type":1,"pageTitle":"Dependency Management","url":"/rnx-kit/docs/architecture/dependency-management#extensions","content":" The list of capabilities may be limited for some usage scenarios. dep-checktherefore also allows users to specify additional profiles via configuration,customProfiles, or the equivalent flag, --custom-profiles. The value can be a path to a .js, .json, or module name, e.g.my-custom-capability-resolver, and must default export an object containing profiles keyed by its version number. Example:  module.exports = { &quot;0.63&quot;: { &quot;my-capability&quot;: { name: &quot;my-module&quot;, version: &quot;1.0.0&quot;, }, }, &quot;0.64&quot;: { &quot;my-capability&quot;: { name: &quot;my-module&quot;, version: &quot;1.1.0&quot;, }, }, };   The profiles are appended to the default ones and may override capabilities. This format is explicitly chosen to be compatible with --vigilant.  note In align-deps, we've deprecated customProfiles in favour of presets. A preset is just a collection of profiles like in the example above. This new property allows you to specify multiple presets and/or replace the built-inreact-native preset. The command line flag, --custom-profiles, was replaced with --presets. You can read more about the changes in this RFC:dep-check v2  ","version":"Next","tagName":"h3"},{"title":"Alternatives​","type":1,"pageTitle":"Dependency Management","url":"/rnx-kit/docs/architecture/dependency-management#alternatives","content":" peerDependencies — What's the difference between dep-check and just using the peerDependencies field in package.json? JS package managers are inconsistent when it comes to installing peer dependencies. npm has beenback andforthon this. Yarn only emits warnings when they are unsatisfied. The only sure way to get them installed is ensure that the dependencies are added appropriately. However, people tend to ignore warnings in our experience.There is no central control over what gets added to peerDependencies. One package could add react-native-webview@^11.4.2, while another hasreact-native-webview@^10.10.2. Or worse, they could be adding them underdependencies instead, potentially causing two copies to be bundled with your app.Similarly, package managers don't care whether you're using@react-native-community/netinfo or react-native-netinfo. syncpack — syncpack is a tool to manage dependencies within a monorepo. It has some overlap with dep-checkbut doesn't cover everything we need. In particular: It doesn't have a central repository of dependencies, so it cannot align multiple repositories on the same packages and versions for the same set of capabilities.From a cursory glance, it doesn't allow packages to support multiple versions of react-native.It supports version groups, which may be useful for some usage scenarios, but are potentially dangerous within react-native repos. ","version":"Next","tagName":"h2"},{"title":"Dependencies","type":0,"sectionRef":"#","url":"/rnx-kit/docs/dependencies","content":"","keywords":"","version":"Next"},{"title":"Capabilities and Profiles​","type":1,"pageTitle":"Dependencies","url":"/rnx-kit/docs/dependencies#capabilities-and-profiles","content":" The magic is in the data that comes with the dependency manager -- capabilities and profiles. Together, they describe a curated and tested list of packages that work with each major release of React Native; you can find the full list of capabilities (name &amp; corresponding package) that are supported by defaultin this table.  A capability is something your app needs to function. It has a well-known name, and it maps to a specific package and version:  const capability = { react: { name: &quot;react&quot;, version: &quot;17.0.2&quot;, }, };   Capabilities can depend on each other, creating a tree:  const capabilities = { react: { name: &quot;react&quot;, version: &quot;17.0.2&quot;, }, &quot;react-dom&quot;: { name: &quot;react-dom&quot;, version: &quot;17.0.2&quot;, capabilities: [&quot;react&quot;], }, };   A profile is a collection of capabilities, known to work well with a specific release of React Native:  const reactNative: Package = { name: &quot;react-native&quot;, version: &quot;^0.68.0&quot;, capabilities: [&quot;react&quot;], }; const profile_0_68: Profile = { react: { name: &quot;react&quot;, version: &quot;17.0.2&quot;, }, core: reactNative, &quot;core-android&quot;: reactNative, &quot;core-ios&quot;: reactNative, // ... etc ... };   Each React Native release &gt;= 0.61 has its ownbase profile, and you can tailor your local configuration by following thiscustomization guide.  ","version":"Next","tagName":"h2"},{"title":"Meta Capabilities​","type":1,"pageTitle":"Dependencies","url":"/rnx-kit/docs/dependencies#meta-capabilities","content":" Meta capabilities let you group capabilities together:  { &quot;core/all&quot;: { name: &quot;#meta&quot;, capabilities: [ &quot;core-android&quot;, &quot;core-ios&quot;, &quot;core-macos&quot;, &quot;core-visionos&quot;, &quot;core-windows&quot;, ], }, }   Meta capabilities aren't versioned, and always have #meta in the name property.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Dependencies","url":"/rnx-kit/docs/dependencies#configuration","content":" A package tells the dependency manager about itself using configuration. It answers questions such as: Is the package an app or a library? Which version(s) of React Native is the package targeting? What capabilities does the package require?  { &quot;rnx-kit&quot;: { &quot;kitType&quot;: &quot;app&quot;, &quot;alignDeps&quot;: { &quot;requirements&quot;: [&quot;react-native@0.68&quot;], &quot;capabilities&quot;: [ &quot;core-android&quot;, &quot;core-ios&quot;, &quot;core-macos&quot;, &quot;core-visionos&quot;, &quot;core-windows&quot;, &quot;react&quot;, &quot;test-app&quot; ] } } }   The dependency manager uses this configuration when validating or updating the package's dependency list.  ","version":"Next","tagName":"h2"},{"title":"Validating Dependencies​","type":1,"pageTitle":"Dependencies","url":"/rnx-kit/docs/dependencies#validating-dependencies","content":" The dependency manager scans a package's dependencies, reporting anything that is incompatible or missing. It normally only validates configured packages, though it can be used to validate unconfigured packages.  Configured package validation starts with the target React Native version(s). The dependency manager gets the corresponding profile(s) and cross-references them with the package's capabilities. Now it knows which dependencies (and versions) the package should have. It checks dependencies,devDependencies, and peerDependencies, looking for incompatible or missing packages. If anything is wrong, it reports detailed information to the console.  Validating an unconfigured package isn't as precise, though it is very useful as a transitional tool when on-boarding large monorepos. You tell the dependency manager which React Native version(s) to target. It looks at the package's dependencies, and reverse-maps them to known capabilities. From there, it can validate using the inferred capability list, reporting any incompatible or missing dependencies.  Use the dependency manager guide to learn how to on-board existing repos incrementally, and run validation on configured and unconfigured packages.  ","version":"Next","tagName":"h2"},{"title":"Updating Dependencies​","type":1,"pageTitle":"Dependencies","url":"/rnx-kit/docs/dependencies#updating-dependencies","content":" The dependency manager can automatically update a package's dependencies, resolving compatibility problems and adding missing dependencies.  This is a very powerful tool for developers, especially when used in monorepos with many packages.  The dependency manager guide shows you how to keep your packages up-to-date as dependencies change or capabilities are added/removed. It also shows you how to automate a React Native upgrade, changing every package and its dependencies, to known/good versions that work well together. ","version":"Next","tagName":"h2"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/rnx-kit/docs/guides/getting-started","content":"Getting Started Welcome! A good place to start with any React Native project is the dependency manager. It keeps your React Native dependencies up-to-date and healthy using automation which ties into your developer workflows. This guide gets you off and running with the dependency manager. To begin, choose a package that uses React Native and open a terminal window. tip If you want to learn more about this project before jumping in, head to theintroduction page. Start by adding the dependency manager to your package. Yarnpnpmnpm yarn add @rnx-kit/align-deps --dev Next, generate the dependency manager configuration for your package. If your package produces a bundle, it's an app. Otherwise, it's a library. Yarnpnpmnpm yarn rnx-align-deps --init app yarn rnx-align-deps --init library Fix any React Native package versions that might have compatibility issues. Yarnpnpmnpm yarn rnx-align-deps --write Review the changes. They should be limited to package.json and your Yarn / npm / pnpm lock file. Test Your Package If any dependency versions changed, test your package to be sure everything is still in working order. Congratulations! You can now automatically maintain your package as the React Native ecosystem grows and changes. Take a look at thedependency management guide to learn how.","keywords":"","version":"Next"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/rnx-kit/docs/introduction","content":"","keywords":"","version":"Next"},{"title":"Tools? I Like Tools!​","type":1,"pageTitle":"Introduction","url":"/rnx-kit/docs/introduction#tools-i-like-tools","content":" Then you're in the right place! There are lots of tools here to help you.  Have you struggled to find the right combination of React Native dependencies that work well together and are compatible with each other? And that match the React Native release you're using? There'sa tool for that! It's all automated, too.  Can't use Metro because it doesn't understand symlinks? Yarn, npm, and pmpm all use symlinks these days. There'sa tool for that! A few lines of configuration, and you're ready to go.  Do you use Metro and miss the type-safe bundling and bundle-serving in Haul and Webpack? There's a tool for that!  This just scratches the surface, and more are being built all the time.  ","version":"Next","tagName":"h2"},{"title":"Using the Tools​","type":1,"pageTitle":"Introduction","url":"/rnx-kit/docs/introduction#using-the-tools","content":" Adding tools to a project or monorepo isn't a linear journey, and it won't be the same for everyone. Each situation is different, and has its own unique challenges and requirements.  You can use the command-line interface, which is a turn-key solution focused on common engineering tasks. You can also pick individual tools, integrating them into your repo wherever they are needed.  ","version":"Next","tagName":"h2"},{"title":"Command-Line Interface​","type":1,"pageTitle":"Introduction","url":"/rnx-kit/docs/introduction#command-line-interface","content":" Thecommand-line interfacebrings many of the tools together to perform common tasks, like bundling and dependency management. The CLI helps developers get things done from their terminal, and fits nicely into CI loops and package script blocks.  The CLI is controlled by command-line parameters andpackage configuration. Command-line parameters always override default values. Package configuration is optional but recommended. Configuration is how a package tells the CLI about itself. For example, a package can describe the options and paths to use during bundling.  Example configuration in package.json { &quot;rnx-kit&quot;: { &quot;kitType&quot;: &quot;app&quot;, &quot;alignDeps&quot;: { &quot;requirements&quot;: [&quot;react-native@0.68&quot;], &quot;capabilities&quot;: [ &quot;core-android&quot;, &quot;core-ios&quot;, &quot;core-macos&quot;, &quot;core-windows&quot;, &quot;react&quot; ] }, &quot;bundle&quot;: true } }   With a configuration in place, you only need command-line parameters to override specific behaviors.  Example commands // Only bundle windows, and use a test entry point $ yarn react-native rnx-bundle --platform windows --entry-path ./src/index-test.ts // Run a bundle server on an unusual port $ yarn react-native rnx-start --port 23000 // Run the dependency manager, scanning all packages and targeting React Native 0.68 $ yarn react-native rnx-align-deps --requirements react-native@0.68   ","version":"Next","tagName":"h3"},{"title":"Choosing Individual Tools​","type":1,"pageTitle":"Introduction","url":"/rnx-kit/docs/introduction#choosing-individual-tools","content":" The tools are designed to be used individually. You can choosespecific tools, and use them however and wherever they are needed. Mix and match with other tools and the CLI.  Each tool has its own TypeScript API. There is plenty of documentation, including How-To guides and examples to get you going.  Tools are released on their own schedule, as features are added and fixes are made. Tools have their own test suite to keep quality high. And when you take a new drop, you can review the change history that is generated from each PR.  ","version":"Next","tagName":"h3"},{"title":"Web​","type":1,"pageTitle":"Introduction","url":"/rnx-kit/docs/introduction#web","content":" Many of these tools work with web projects, too! Some examples include the dependency manager and the plugins for Babel and ESLint. ","version":"Next","tagName":"h2"},{"title":"Dependency Management","type":0,"sectionRef":"#","url":"/rnx-kit/docs/guides/dependency-management","content":"","keywords":"","version":"Next"},{"title":"Onboarding​","type":1,"pageTitle":"Dependency Management","url":"/rnx-kit/docs/guides/dependency-management#onboarding","content":" The first order of business is onboarding your React Native packages to the dependency manager. Do this for every React Native package you have. It can be done all at once, or gradually over multiple PRs.  First, add the dependency manager to your package.  Yarnpnpmnpm yarn add @rnx-kit/align-deps --dev   Add new script commands for convenience. We'll use these later.  package.json { &quot;scripts&quot;: { &quot;check-dependencies&quot;: &quot;rnx-align-deps&quot;, &quot;fix-dependencies&quot;: &quot;rnx-align-deps --write&quot; } }   Next, generate the dependency manager configuration for your package. If your package produces a bundle, it's an app. Otherwise, it's a library.  Yarnpnpmnpm yarn rnx-align-deps --init app yarn rnx-align-deps --init library   Fix any React Native package versions that might have compatibility issues.  Yarnpnpmnpm yarn fix-dependencies   Review and test your changes before committing. This is important, even for seemingly harmless updates.  ","version":"Next","tagName":"h2"},{"title":"Automating Everything​","type":1,"pageTitle":"Dependency Management","url":"/rnx-kit/docs/guides/dependency-management#automating-everything","content":" Once onboarding is done, you're ready to set up automation.  Automation validates your React Native dependencies during builds and PRs. It also keeps the dependency manager up-to-date, including the built-in list of known/good React Native package versions and releases. This list can change frequently, based on the volatility of the React Native ecosystem.  ","version":"Next","tagName":"h2"},{"title":"Builds​","type":1,"pageTitle":"Dependency Management","url":"/rnx-kit/docs/guides/dependency-management#builds","content":" To validate dependencies during a build, you'll integrate thecheck-dependencies command into your build workflow.  In each of your React Native packages, add it to the build command:  package.json { &quot;scripts&quot;: { &quot;build&quot;: &quot;... existing-stuff ... &amp;&amp; yarn fix-dependencies&quot; } }   Replace yarn with npm run or pnpm, depending on your package manager.  When the validation process finds a compatibility problem, it fails with a detailed message, showing you what went wrong before you commit to the repo.  Using a Task Runner? If you're using a task runner like Lage or Gulp, you can go for a more sophisticated integration. The advantage being that fix-dependencies could run as its own task with isolated logging and error handling. And, you can run it in parallel with other tasks.  ","version":"Next","tagName":"h3"},{"title":"Pull Requests​","type":1,"pageTitle":"Dependency Management","url":"/rnx-kit/docs/guides/dependency-management#pull-requests","content":" To validate dependencies during PRs, you'll use the dependency manager to check every package in your repo.  Add the dependency manager to your repo's root package.json.  Yarnpnpmnpm yarn add @rnx-kit/align-deps --dev -W   Next, add this command to your PR loop. It runs the dependency manager from the root of the repo, scanning all packages. This include packages which haven't onboarded yet. For those, --requirements react-native@[version] controls the target React Native release to use when checking compatibility.  Yarnpnpmnpm yarn rnx-align-deps --requirements react-native@0.66   When a compatibility problem is found, the command fails with a non-zero exit code, which causes the PR loop to fail. This protects the repo from risky changes.  In the PR logs, you'll see a detailed report, in diff format, explaining what went wrong.  error Found 3 violation(s) in 'packages/app/package.json': react-native &quot;^0.66.0&quot; -&gt; &quot;^0.66.0-0&quot; (dependencies) react-native-macos &quot;^0.66.0&quot; -&gt; &quot;^0.66.0-0&quot; (dependencies) react-native-windows &quot;^0.66.0&quot; -&gt; &quot;^0.66.0-0&quot; (dependencies) - Current + Expected { &quot;name&quot;: &quot;@rnts/button&quot;, &quot;version&quot;: &quot;0.0.1&quot;, &quot;private&quot;: true, &quot;license&quot;: &quot;MIT&quot;, &quot;main&quot;: &quot;src/index.ts&quot;, &quot;typings&quot;: &quot;lib/index.d.ts&quot;, &quot;scripts&quot;: { &quot;clean&quot;: &quot;rimraf ./lib&quot;, &quot;build&quot;: &quot;yarn run clean &amp;&amp; yarn run tsc &amp;&amp; yarn run api-extract&quot;, &quot;api-extract&quot;: &quot;api-extractor run --local --verbose&quot; }, &quot;devDependencies&quot;: { &quot;@microsoft/api-extractor&quot;: &quot;^7.19.4&quot;, &quot;@office-iss/react-native-win32&quot;: &quot;^0.66.0&quot;, &quot;@rnx-kit/align-deps&quot;: &quot;^2.0.0&quot;, &quot;@types/react-native&quot;: &quot;^0.66.0&quot;, - &quot;rimraf&quot;: &quot;^3.0.2&quot;, &quot;react&quot;: &quot;17.0.2&quot;, - &quot;react-native&quot;: &quot;^0.66.0&quot;, - &quot;react-native-macos&quot;: &quot;^0.66.0&quot;, - &quot;react-native-windows&quot;: &quot;^0.66.0&quot;, + &quot;react-native&quot;: &quot;^0.66.0-0&quot;, + &quot;react-native-macos&quot;: &quot;^0.66.0-0&quot;, + &quot;react-native-windows&quot;: &quot;^0.66.0-0&quot;, + &quot;rimraf&quot;: &quot;^3.0.2&quot;, &quot;typescript&quot;: &quot;^4.5.5&quot; }, &quot;rnx-kit&quot;: { &quot;kitType&quot;: &quot;library&quot;, &quot;alignDeps&quot;: { &quot;requirements&quot;: { &quot;development&quot;: [&quot;react-native@0.66&quot;], &quot;production&quot;: [&quot;react-native@0.66&quot;] }, &quot;capabilities&quot;: [ &quot;core-android&quot;, &quot;core-ios&quot;, &quot;core-macos&quot;, &quot;core-windows&quot;, &quot;react&quot; ] } + }, + &quot;peerDependencies&quot;: { + &quot;react&quot;: &quot;17.0.2&quot;, + &quot;react-native&quot;: &quot;^0.66.0-0&quot;, + &quot;react-native-macos&quot;: &quot;^0.66.0-0&quot;, + &quot;react-native-windows&quot;: &quot;^0.66.0-0&quot; } } error 'packages/button/package.json': Changes are needed to satisfy all requirements. Re-run with `--write` to apply them. info Visit https://aka.ms/align-deps information about align-deps. error Command failed with exit code 1. info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.   Fixing problems is automated, too! From your development terminal, run the same command with a --write parameter.  Yarnpnpmnpm yarn rnx-align-deps --requirements react-native@0.66 --write   Review and test the fixes before pushing them to your PR.  ","version":"Next","tagName":"h3"},{"title":"Dependency Manager Updates​","type":1,"pageTitle":"Dependency Management","url":"/rnx-kit/docs/guides/dependency-management#dependency-manager-updates","content":" The dependency manager comes with abuilt-in listof known/good React Native package versions and releases. Keeping the dependency manager up-to-date gives you the latest compatibility data.  If you are in GitHub, use Dependabot to keep your packages up-to-date, including the dependency manager. If you host your repo elsewhere, you can use tools like Snyk instead.  When a dependency manager update happens, the associated PR loop may fail with incompatible package errors. This is OK. It means the built-in list of React Native package versions has changed, and you need to update your packages in response.  Run this command from the root of your repo. It uses the dependency manager to make the fixes automatically.  Yarnpnpmnpm yarn rnx-align-deps --write   Review and test the fixes before pushing them to the PR with the dependency manager update.  ","version":"Next","tagName":"h3"},{"title":"Upgrading React Native​","type":1,"pageTitle":"Dependency Management","url":"/rnx-kit/docs/guides/dependency-management#upgrading-react-native","content":" When you're ready to upgrade to a new release of React Native (or downgrade to an old release), you can use the dependency manager to help you out.  First, update your PR loop definition. Find thernx-align-deps --requirements react-native@[version] command and change the target React Native version.  Then, run these commands from the root of your repo to change your React Native version and adjust all React Native dependencies to be compatible. Replace[version] with your target React Native version in major.minor format, such as &quot;0.66&quot; or &quot;0.68&quot;.  Yarnpnpmnpm yarn rnx-align-deps --set-version [version]   Yarnpnpmnpm yarn rnx-align-deps --requirements react-native@[version] --write   Review and test your packages thoroughly before merging these changes.  ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Dependency Management","url":"/rnx-kit/docs/guides/dependency-management#customization","content":" Did you know that you can add your own packages to the dependency manager'sbuilt-in list?  If your repo uses React Native packages that aren't known to the dependency manager, add them to the list! Or if you want to align other dependencies automatically, add them to the list too!  First, write the list of packages you want to manage. Each one is expressed as acapability. You can use a .jsmodule, a .json file, or a module name.  dependency-profile.json { &quot;0.66&quot;: { &quot;@types/node&quot;: { &quot;name&quot;: &quot;@types/node&quot;, &quot;version&quot;: &quot;^16.0.0&quot;, &quot;devOnly&quot;: true }, &quot;chalk&quot;: { &quot;name&quot;: &quot;chalk&quot;, &quot;version&quot;: &quot;^4.1.0&quot; }, &quot;native-base&quot;: { &quot;name&quot;: &quot;native-base&quot;, &quot;version&quot;: &quot;^3.3.11&quot;, &quot;capabilities&quot;: [&quot;react&quot;] } } }   note Look at native-base in the example above. It's wrapped in a 0.66 version tag. That means it only applies to React Native 0.66.  Next, configure each of your onboarded React Native packages to use the list.  package.json { &quot;rnx-kit&quot;: { &quot;alignDeps&quot;: { + &quot;presets&quot;: [ + &quot;microsoft/react-native&quot;, + &quot;path/to/dependency-profile.json&quot; + ], &quot;requirements&quot;: { &quot;development&quot;: [&quot;react-native@0.66&quot;], &quot;production&quot;: [&quot;react-native@0.66&quot;] }, &quot;capabilities&quot;: [ &quot;core-android&quot;, &quot;core-ios&quot;, &quot;core-macos&quot;, &quot;core-windows&quot;, &quot;react&quot; ] } } }   Now it's time to use the list. Run the dependency manager to update all of your packages.  Yarnpnpmnpm yarn rnx-align-deps --requirements react-native@0.66 --presets microsoft/react-native,path/to/dependency-profile.json --write   Review and test the changes before continuing.  The last step is updating the automation. Each command needs an extra--presets [paths] parameter.  Pull Requests: Change thernx-align-deps --requirements react-native@[version] commandDependency Manager Updates: Change the rnx-align-deps --write commandUpgrading React Native: Change thernx-align-deps --requirements react-native@[version] --write command  ","version":"Next","tagName":"h2"},{"title":"Finish Line​","type":1,"pageTitle":"Dependency Management","url":"/rnx-kit/docs/guides/dependency-management#finish-line","content":" Congratulations! Your React Native apps and libraries are now up-to-date and compatible with each other! And they should stay that way thanks to the automation you've put in place!  Was this helpful? Help spread the word onTwitter.  And, if you customized your list of dependencies, please considercontributing your work so that everyone can use it (including you). You cancreate an issue with your customizationsor even submit a pull request. ","version":"Next","tagName":"h2"},{"title":"babel-plugin-import-path-remapper","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/babel-plugin-import-path-remapper","content":"","keywords":"","version":"Next"},{"title":"Usage​","type":1,"pageTitle":"babel-plugin-import-path-remapper","url":"/rnx-kit/docs/tools/babel-plugin-import-path-remapper#usage","content":" Add @rnx-kit/babel-plugin-import-path-remapper to your babel.config.js under plugins. For example, to remap all paths under the @rnx-kit scope:  // babel.config.js module.exports = { presets: [&quot;module:metro-react-native-babel-preset&quot;], overrides: [ { test: /\\.tsx?$/, plugins: [ // @babel/plugin-transform-typescript doesn't support `const enum`s. // See https://babeljs.io/docs/en/babel-plugin-transform-typescript#caveats // for more details. &quot;const-enum&quot;, [ &quot;@rnx-kit/babel-plugin-import-path-remapper&quot;, { test: (source) =&gt; source.startsWith(&quot;@rnx-kit/&quot;) }, ], ], }, ], };   Or, if you're using @rnx-kit/metro-config:  // babel.config.js const { makeBabelConfig } = require(&quot;@rnx-kit/metro-config&quot;); module.exports = makeBabelConfig([ [ &quot;@rnx-kit/babel-plugin-import-path-remapper&quot;, { test: (source) =&gt; source.startsWith(&quot;@rnx-kit/&quot;) }, ], ]);   ","version":"Next","tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"babel-plugin-import-path-remapper","url":"/rnx-kit/docs/tools/babel-plugin-import-path-remapper#options","content":" Option\tType\tDescriptiontest\t(source: string) =&gt; boolean\t[Required] A function returning whether the passed source should be redirected to another module. remap\t(moduleName: string, path: string) =&gt; string\t[Optional] A function returning the module that should be used instead, e.g. contoso/index.js -&gt; contoso/index.ts. ","version":"Next","tagName":"h3"},{"title":"babel-preset-metro-react-native","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/babel-preset-metro-react-native","content":"","keywords":"","version":"Next"},{"title":"Usage​","type":1,"pageTitle":"babel-preset-metro-react-native","url":"/rnx-kit/docs/tools/babel-preset-metro-react-native#usage","content":" Add @rnx-kit/babel-preset-metro-react-native to your babel.config.js:  module.exports = { presets: [&quot;@rnx-kit/babel-preset-metro-react-native&quot;], };   If you want to add additional plugins, you can pass an options object:  module.exports = { presets: [ [ &quot;@rnx-kit/babel-preset-metro-react-native&quot;, { additionalPlugins: [&quot;const-enum&quot;], }, ], ], };   ","version":"Next","tagName":"h2"},{"title":"Notes on Bundle Size​","type":1,"pageTitle":"babel-preset-metro-react-native","url":"/rnx-kit/docs/tools/babel-preset-metro-react-native#notes-on-bundle-size","content":" If you're looking to reduce the bundle size, here are a couple of things you can try.  ","version":"Next","tagName":"h2"},{"title":"Enable compiler assumptions​","type":1,"pageTitle":"babel-preset-metro-react-native","url":"/rnx-kit/docs/tools/babel-preset-metro-react-native#enable-compiler-assumptions","content":" Since 7.13.0, Babel can make certain assumptions about your code to reduce the amount of generated code. You can read more about it inCompiler assumptions.  ","version":"Next","tagName":"h3"},{"title":"Enable loose mode when transforming classes​","type":1,"pageTitle":"babel-preset-metro-react-native","url":"/rnx-kit/docs/tools/babel-preset-metro-react-native#enable-loose-mode-when-transforming-classes","content":" If you make heavy use of classes, but can't use compiler assumptions, you can enable looseClassTransform to remove helper functions:  module.exports = { presets: [ [ &quot;@rnx-kit/babel-preset-metro-react-native&quot;, { looseClassTransform: true, }, ], ], };   This is equivalent to passing{ loose: true }to @babel/plugin-transform-classes.  ","version":"Next","tagName":"h3"},{"title":"Enable experimental import/export support​","type":1,"pageTitle":"babel-preset-metro-react-native","url":"/rnx-kit/docs/tools/babel-preset-metro-react-native#enable-experimental-importexport-support","content":" In your metro.config.js, enable experimentalImportSupport:  module.exports = { transformer: { getTransformOptions: async () =&gt; ({ transform: { experimentalImportSupport: true, inlineRequires: true, }, }), }, };   And disable import/export transformation in your babel.config.js:  module.exports = { presets: [ [ &quot;@rnx-kit/babel-preset-metro-react-native&quot;, { disableImportExportTransform: true }, ], ], };   Doing this will help the minifier strip out some unused code, but make sure that your app still works after enabling it.  ","version":"Next","tagName":"h3"},{"title":"babel-plugin-lodash​","type":1,"pageTitle":"babel-preset-metro-react-native","url":"/rnx-kit/docs/tools/babel-preset-metro-react-native#babel-plugin-lodash","content":" If you're using Lodash, you can get some reduction withbabel-plugin-lodash. Add it to your babel.config.js like below:  module.exports = { presets: [&quot;@rnx-kit/babel-preset-metro-react-native&quot;], plugins: [&quot;lodash&quot;], };  ","version":"Next","tagName":"h3"},{"title":"Bundling","type":0,"sectionRef":"#","url":"/rnx-kit/docs/guides/bundling","content":"","keywords":"","version":"Next"},{"title":"Setting up the Tools​","type":1,"pageTitle":"Bundling","url":"/rnx-kit/docs/guides/bundling#setting-up-the-tools","content":" Install the tools you'll need for bundling.  Yarnpnpmnpm yarn add @rnx-kit/cli @rnx-kit/babel-preset-metro-react-native @rnx-kit/metro-config @rnx-kit/metro-resolver-symlinks --dev   Add @rnx-kit/babel-preset-metro-react-native as a preset in your Babel configuration:  babel.config.js module.exports = { presets: [&quot;@rnx-kit/babel-preset-metro-react-native&quot;], };   Configure Metro using @rnx-kit/metro-config. Add support for symlinks, too, since all major package managers make use of them.  metro.config.js const { makeMetroConfig } = require(&quot;@rnx-kit/metro-config&quot;); const MetroSymlinksResolver = require(&quot;@rnx-kit/metro-resolver-symlinks&quot;); module.exports = makeMetroConfig({ resolver: { resolveRequest: MetroSymlinksResolver(), }, // Add your existing Metro configuration here! It will be merged in. });   If your app was already using Metro, it may have mappings in its config which compensate for Metro's lack of symlink support. They probably look something like this:  const fooLocal = path.resolve(__dirname, &quot;node_modules&quot;, &quot;foo&quot;); const barHoisted = path.resolve(__dirname, &quot;..&quot;, &quot;..&quot;, &quot;node_modules&quot;, &quot;foo&quot;); module.exports = { resolver: { extraNodeModules: { foo: fooLocal, bar: barHoisted, }, }, watchFolders: [fooLocal, barHoisted], };   Good news! You can get rid of all these mappings now! 🎉  ","version":"Next","tagName":"h2"},{"title":"Creating Bundler Commands​","type":1,"pageTitle":"Bundling","url":"/rnx-kit/docs/guides/bundling#creating-bundler-commands","content":" The bundler is integrated with the React Native CLI:  react-native rnx-bundle ... react-native rnx-start ...   It's time to put together an rnx-bundle command for your app. Start withreact-native rnx-bundle, and add the parameters listed in this table:  Parameter\tExplanation--entry-file\tThe source file at the root of your app. It usually has a call to AppRegistry.registerComponent. --platform\tPick your target platform: android, ios, macos, or windows. --bundle-output\tChoose a file name and path for the bundle file. --sourcemap-output\tChoose a file name and path for the source map. Usually named &lt;bundle-file&gt;.map. --assets-dest\tChoose a directory for storing assets like strings, images, audio, and video.  Add --dev false if you want to make an optimized, production bundle.  Put it all together into a single command. Here's an example which creates an iOS developer bundle:  react-native rnx-bundle \\ --entry-file index.js \\ --platform ios \\ --bundle-output dist/main.ios.jsbundle \\ --sourcemap-output dist/main.ios.jsbundle.map \\ --assets-dest dist   If you're curious about the rest of the command-line parameters, you can find the complete list in theCLI bundle documentation.  Now is a good time to try out your rnx-bundle command.  Are you seeing TypeScript warnings or errors, or messages about duplicate or cyclic dependencies? That's ok! The tools in this guide enhance Metro to add type safety and protection from dependency problems. They're helping you root out potential bugs in your app. Ignore them for now. A bit later, you'll learn what they mean, why they're important, and how you can fix them.  The next step is putting together an rnx-start command for your app. Parameters aren't typically needed for this command. You should take a look at the CLI server documentation to see the full list of command-line parameters, and decide if you need any of them.  Here's an example command which starts a Metro bundle server:  react-native rnx-start   Try out your rnx-start server command!  You might see warnings or errors, as you did when you ran the rnx-bundlecommand. Ignore them for now. You'll work through them a bit later.  Assign both rnx-bundle and rnx-start commands to scripts in your app. A good practice is to have one bundle script per platform, an &quot;umbrella&quot; bundle script which runs them all, and one server command.  package.json { &quot;scripts&quot;: { &quot;bundle&quot;: &quot;yarn bundle:ios &amp;&amp; yarn bundle:android&quot;, &quot;bundle:ios&quot;: &quot;react-native rnx-bundle --platform ios ...&quot;, &quot;bundle:android&quot;: &quot;react-native rnx-bundle --platform android ...&quot;, &quot;start&quot;: &quot;react-native rnx-start&quot; } }   ","version":"Next","tagName":"h2"},{"title":"Using App Configuration​","type":1,"pageTitle":"Bundling","url":"/rnx-kit/docs/guides/bundling#using-app-configuration","content":" Now you're getting to the good stuff! 🍰  Your app knows how to bundle itself. It knows which platforms it supports. It knows what to name the bundle file, and where to store assets, so that the native host app can find them at runtime. And it knows how these things vary across each platform.  All of this knowledge is encoded in the command-lines you've written for your app.  App configuration is a declarative, structured way to express these decisions as defaults for how your app is bundled. All the knowledge is captured in one easy-to-read format, without duplication.  Take a look at this example iOS bundling command:  react-native rnx-bundle \\ --entry-file index.js \\ --platform ios \\ --bundle-output dist/main.ios.jsbundle \\ --sourcemap-output dist/main.ios.jsbundle.map \\ --assets-dest dist   Here's what it looks like as app defaults in configuration:  { &quot;rnx-kit&quot;: { &quot;bundle&quot;: { &quot;entryFile&quot;: &quot;index.js&quot;, &quot;targets&quot;: [&quot;android&quot;, &quot;ios&quot;], &quot;platforms&quot;: { &quot;android&quot;: { &quot;bundleOutput&quot;: &quot;dist/main.android.bundle&quot;, &quot;sourcemapOutput&quot;: &quot;dist/main.android.bundle.map&quot;, &quot;assetsDest&quot;: &quot;dist/res&quot; }, &quot;ios&quot;: { &quot;bundleOutput&quot;: &quot;dist/main.ios.jsbundle&quot;, &quot;sourcemapOutput&quot;: &quot;dist/main.ios.jsbundle.map&quot;, &quot;assetsDest&quot;: &quot;dist&quot; } } } } }   And here's what the command reduces to, once the defaults are in place:  react-native rnx-bundle  You can override default using command-line parameters, either in your terminal or in package scripts:  react-native rnx-bundle --entry-file test.js   Now it's time to convert your rnx-bundle commands into app defaults. Use the example above as a guide. Refer to theBundleConfig schemafor a complete list of configuration properties.  Do the same thing for your rnx-start command, but only if you added command-line parameters. Use theServerConfig schema as a reference. If you don't needing any ServerConfig, the server will use bundler defaults so you end up serving the same way you bundle.  ","version":"Next","tagName":"h2"},{"title":"Beyond the Command-Line​","type":1,"pageTitle":"Bundling","url":"/rnx-kit/docs/guides/bundling#beyond-the-command-line","content":" Remember that bit at the start of this guide about enhancing Metro? You've arrived. :car:  This section of the guide will introduce you to a number of features and explain why they are important. Most of them are on by default. You can explicitly control each one through app configuration.  ","version":"Next","tagName":"h2"},{"title":"Type Safety with TypeScript​","type":1,"pageTitle":"Bundling","url":"/rnx-kit/docs/guides/bundling#type-safety-with-typescript","content":" TypeScript validation with Metro. 😎  When you bundle or serve your app, TypeScript will validate your code and tell you about any type safety issues. You'll see the familiar, colorful TS messages you're used to, right in the Metro output:    TypeScript validation is on by default. You can configure it by passing options with the @rnx-kit/metro-plugin-typescript entry inplugins configuration property.   { &quot;rnx-kit&quot;: { &quot;bundle&quot;: { &quot;plugins&quot;: [ &quot;@rnx-kit/metro-plugin-cyclic-dependencies-detector&quot;, &quot;@rnx-kit/metro-plugin-duplicates-checker&quot;, + [&quot;@rnx-kit/metro-plugin-typescript&quot;, { &quot;throwOnError&quot;: true }] ] } } }   ","version":"Next","tagName":"h3"},{"title":"Tree Shaking​","type":1,"pageTitle":"Bundling","url":"/rnx-kit/docs/guides/bundling#tree-shaking","content":" Tree shaking makes your app bundle smaller by eliminating unused code. Sometimes, a LOT smaller. 📉  Tree shaking is off by default. You can control it with thetreeShake configuration property.  { &quot;rnx-kit&quot;: { &quot;bundle&quot;: { &quot;treeShake&quot;: true } } }   ","version":"Next","tagName":"h3"},{"title":"Duplicate Dependencies​","type":1,"pageTitle":"Bundling","url":"/rnx-kit/docs/guides/bundling#duplicate-dependencies","content":" Did you know that your app bundle can have multiple copies of a single package in it? Yes, this is a thing that happens. Sometimes, the duplicates are even the same version of the package! 📦 📦 📦  Clearly, this is bad because the bundle is larger than it needs to be. More importantly, though, duplicates can lead to runtime problems, especially when the duplicated package has global state.    Duplicate detection is on by default. You can configure it by passing options with the @rnx-kit/metro-plugin-duplicates-checker entry inplugins configuration property.   { &quot;rnx-kit&quot;: { &quot;bundle&quot;: { &quot;plugins&quot;: [ &quot;@rnx-kit/metro-plugin-cyclic-dependencies-detector&quot;, + [&quot;@rnx-kit/metro-plugin-duplicates-checker&quot;, { &quot;throwOnError&quot;: true }], &quot;@rnx-kit/metro-plugin-typescript&quot; ] } } }   ","version":"Next","tagName":"h3"},{"title":"Cyclic Dependencies​","type":1,"pageTitle":"Bundling","url":"/rnx-kit/docs/guides/bundling#cyclic-dependencies","content":" If your dependency graph has a cycle (loop), then you are at risk for app hangs. 🔄  A cycle in your dependency graph will look somthing like this: logger requiresfile-appender which requires fs-utils which then requires logger.    Cycles can be bad news. Detecting them is on by default. You can configure it by passing options with the@rnx-kit/metro-plugin-cyclic-dependencies-detector entry inplugins configuration property.   { &quot;rnx-kit&quot;: { &quot;bundle&quot;: { &quot;plugins&quot;: [ + [ + &quot;@rnx-kit/metro-plugin-cyclic-dependencies-detector&quot;, + { &quot;throwOnError&quot;: true } + ], &quot;@rnx-kit/metro-plugin-duplicates-checker&quot;, &quot;@rnx-kit/metro-plugin-typescript&quot; ] } } }   ","version":"Next","tagName":"h3"},{"title":"Running the Bundler​","type":1,"pageTitle":"Bundling","url":"/rnx-kit/docs/guides/bundling#running-the-bundler","content":" It's now time to get bundling and serving working for your app. This part of the guide will help you work through issues related to type safety, duplicate dependencies, and cyclic dependencies.  Run the bundler:  Yarnpnpmnpm yarn bundle   Start the bundle server, and request a bundle from it using your native host app:  Yarnpnpmnpm yarn start   Did both commands succeed? If so, great! Skip to thenext section.  Are you seeing TypeScript errors?  Type safety matters. It lets you reason about your app without running it to find flaws, see patterns, and do automated transformations.  You should fix these now, or plan on fixing them soon. To defer until later, configure the bundler so it reports the errors without failing. SetthrowOnError to false:   { &quot;rnx-kit&quot;: { &quot;bundle&quot;: { &quot;plugins&quot;: [ &quot;@rnx-kit/metro-plugin-cyclic-dependencies-detector&quot;, &quot;@rnx-kit/metro-plugin-duplicates-checker&quot;, + [&quot;@rnx-kit/metro-plugin-typescript&quot;, { &quot;throwOnError&quot;: false }] ] } } }   It's also a good idea to open a new issue for tracking the type errors, and to remind you to re-enable throwOnError. In the meantime, keeping the errors visible in the Metro output helps everyone be aware of danger-areas in the app.  Are you running into duplicate package errors?  You may be wondering how this even happens. Metro sees each copy of a duplicate package as unique because it has a unique filesystem path. How does thathappen? pnpm isolation does this by design when versions differ or peerDependencies vary in parent packages. yarn hoisting also does this by design, allowing for a hoisted version and different local versions.  So what can you do? The goal is to &quot;collapse&quot; the duplicate packages down to a single version. That means getting yarn/pnpm to look at all the places a duplicate package is named, and decide that one single version can be used to satisfy all constraints. That will lead to only one copy showing up on the filesystem.  Below are some helpful tricks you can try:  (Easy) Make sure your packages all depend on the same version of the duplicate package.(Easy) If you are using yarn, run the yarn-deduplicate package to collapse away duplicate entries in your yarn.lock file. These aren't cleaned up automatically as yarn runs.(Hard) In your lock file, find the set of external packages that are pulling in the duplicate package. See if you can upgrade or downgrade them so they all bring in the same version of the duplicate package. This may not be possible.(Hard) If you are using pnpm, trace the duplicates through the maze of parent dependencies. If any of them have common peerDependencies, like react orreact-native, make sure the semver constraints match. &quot;^17.0.0&quot; and &quot;^17.0.2&quot; will cause pnpm to fork the dependency tree to isolate (encapsulate) this difference.(Easy but Dangerous). Force yarn/pnpm to use a specific version of the duplicate package whenever they see it, regardless of what is in package.json. yarn has a resolutions property which does this. pnpm has a readPackagehook which you can use to do this. Both are dangerous because you can break the packages that depend on the package version you are changing.  If you can't get rid of the duplicate package, and your app seems to be working, you can choose to live with it. Add the duplicate package name to theignoredModules option, e.g. to ignore duplicates of react-is:   { &quot;rnx-kit&quot;: { &quot;bundle&quot;: { &quot;plugins&quot;: [ &quot;@rnx-kit/metro-plugin-cyclic-dependencies-detector&quot;, + [ + &quot;@rnx-kit/metro-plugin-duplicates-checker&quot;, + { &quot;ignoredModules&quot;: [&quot;react-is&quot;] } + ], &quot;@rnx-kit/metro-plugin-typescript&quot; ] } } }   Are you seeing cyclic dependency errors?  A cycle in your dependency graph will look somthing like this: logger requiresfile-appender which requires fs-utils which then requires logger. Thelogger package depends on itself.  Cycles are bad because they can lead to an infinite loop at runtime.  Here are some approaches you can use to fix a cycle:  If any of the packages live in your repo, refactor them to break the cycle.If they're all external packages, you can submit a PR, though it may take time to be accepted and published. If you're impatient, you can use patch-packagewhile you wait for the PR to land.Try looking for a different package, or group of packages, that does roughly what you want.  If none of this is appealing, you can take a closer look at the code involved to understand if and how an infinite loop might occur. If you can avoid triggering it, then document that in your code, and live with the cycle. Set throwOnErrorto false:   { &quot;rnx-kit&quot;: { &quot;bundle&quot;: { &quot;plugins&quot;: [ + [ + &quot;@rnx-kit/metro-plugin-cyclic-dependencies-detector&quot;, + { &quot;throwOnError&quot;: false } + ], &quot;@rnx-kit/metro-plugin-duplicates-checker&quot;, &quot;@rnx-kit/metro-plugin-typescript&quot; ] } } }   ","version":"Next","tagName":"h2"},{"title":"Integrating with Gradle (Android)​","type":1,"pageTitle":"Bundling","url":"/rnx-kit/docs/guides/bundling#integrating-with-gradle-android","content":" We highly recommend that you disable the &quot;createBundle&lt;targetName&gt;JsAndAssets&quot; tasks from Gradle and instead runreact-native rnx-bundle separately. That way, you avoid re-bundling when no changes has been made to the JavaScript code.  This is currently the official way to disable them. Add the following block somewhere in your app's build.gradle:  android/app/build.gradle // We don't want the React plugin to bundle. tasks.whenTaskAdded { task -&gt; // The task name can be found in `react-native-gradle-plugin`: // https://github.com/facebook/react-native/blob/0.71-stable/packages/react-native-gradle-plugin/src/main/kotlin/com/facebook/react/TaskConfiguration.kt#L54 if (task.name.startsWith(&quot;createBundle&quot;) &amp;&amp; task.name.endsWith(&quot;JsAndAssets&quot;)) { task.enabled = false } }   You can also have a look at how it's done inreact-native-test-app.  ","version":"Next","tagName":"h2"},{"title":"Integrating with Xcode (iOS and macOS)​","type":1,"pageTitle":"Bundling","url":"/rnx-kit/docs/guides/bundling#integrating-with-xcode-ios-and-macos","content":" We highly recommend that you remove the &quot;Bundle React Native code and images&quot; phase from Xcode and instead run react-native rnx-bundle separately. That way, you avoid re-bundling when no changes has been made to the JavaScript code.  Click on your app's project in Xcode, and navigate to the &quot;Build Phases&quot; tab. Find the &quot;Bundle React Native code and images&quot; phase, and click on the trash can icon on the far right to remove it.    ","version":"Next","tagName":"h2"},{"title":"Integrating with PRs and Builds​","type":1,"pageTitle":"Bundling","url":"/rnx-kit/docs/guides/bundling#integrating-with-prs-and-builds","content":" You've done the hard part, and you're close to the finish line! The last step is to add automation which guards your app against bundling errors in future PRs.🛡  If you use Lerna, you can run one command from the root of your repo to bundle all packages:  Yarnpnpmnpm yarn lerna run bundle   If you're using a task runner like Nx, Lage or Gulp, you can go for a more sophisticated integration. The advantage being that bundle runs as its own task with isolated logging and error handling. And, you can run it in parallel with other tasks.  You should now have a command you can run from the root of the repo which bundles every app package. Add it to the root package.json file:  package.json { &quot;scripts&quot;: { &quot;bundle&quot;: &quot;lerna run bundle&quot; } }   And then call that top-level command from your PR and Build CI loop definitions:  GitHub Actions Example jobs: build: steps: - name: Bundle all packages run: yarn bundle   Easy, right? Now your PRs and Builds will protect the source tree from code that breaks bundling!  ","version":"Next","tagName":"h2"},{"title":"Wrapping Up​","type":1,"pageTitle":"Bundling","url":"/rnx-kit/docs/guides/bundling#wrapping-up","content":" You've done it! You are bundling and serving your React Native apps with Metro, using enhancements to make the process fast and safe! And your customers will thank you when there are fewer errors (type safety) and smaller bundles (tree shaking)!  Was this helpful? Help spread the word onTwitter.  See room for improvement? Please make your voice heard! 💬Contribute your ideas ina new issue,a discussion topic, or through a pull request. ","version":"Next","tagName":"h2"},{"title":"bundle-diff","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/bundle-diff","content":"","keywords":"","version":"Next"},{"title":"Usage​","type":1,"pageTitle":"bundle-diff","url":"/rnx-kit/docs/tools/bundle-diff#usage","content":" rnx-bundle-diff &lt;a.jsbundle.map&gt; &lt;b.jsbundle.map&gt;   Example output:   +106 added /~/node_modules/@babel/runtime/helpers/arrayWithHoles.js +96 added /~/node_modules/lodash-es/_realNames.js +49 added /~/node_modules/@babel/runtime/regenerator/index.js +1 changed /~/node_modules/react/index.js -127 removed /~/node_modules/querystring-es3/index.js -286 removed /~/node_modules/react-native/Libraries/Components/Picker/PickerAndroid.ios.js -592 removed /~/node_modules/react-native/Libraries/Components/Sound/SoundManager.js unknown added /~/packages/awesome-app/lib/index.js   Note that the numbers are in bytes, and based on the unminified code. They are meant to give an idea of how big the file is, but could differ wildly depending on a number of factors, including Babel plugins, Wepback config, TypeScript compilation options, indentation etc.  ","version":"Next","tagName":"h2"},{"title":"Troubleshooting​","type":1,"pageTitle":"bundle-diff","url":"/rnx-kit/docs/tools/bundle-diff#troubleshooting","content":" ","version":"Next","tagName":"h2"},{"title":"I have a lot of unknown content sizes in my diff​","type":1,"pageTitle":"bundle-diff","url":"/rnx-kit/docs/tools/bundle-diff#i-have-a-lot-of-unknown-content-sizes-in-my-diff","content":" If you're using TypeScript, you need to tell tsc to also include source content in the source map:  // tsconfig.json { &quot;compilerOptions&quot;: { &quot;inlineSources&quot;: true } }   ","version":"Next","tagName":"h3"},{"title":"I have a lot of relative paths in my source map​","type":1,"pageTitle":"bundle-diff","url":"/rnx-kit/docs/tools/bundle-diff#i-have-a-lot-of-relative-paths-in-my-source-map","content":" If your project is using TypeScript and Webpack, you may experience that your source maps don't properly map back to the source file. Try usingsource-map-loader to clean up the paths:  // webpack.config.js module.exports = { module: { rules: [ { test: /\\.(js|(js)?bundle)($|\\?)/i, enforce: &quot;pre&quot;, use: [&quot;source-map-loader&quot;], }, ], }, };  ","version":"Next","tagName":"h3"},{"title":"console","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/console","content":"","keywords":"","version":"Next"},{"title":"Install​","type":1,"pageTitle":"console","url":"/rnx-kit/docs/tools/console#install","content":" yarn add @rnx-kit/console --dev   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"console","url":"/rnx-kit/docs/tools/console#usage","content":" import { error, info, warn } from &quot;@rnx-kit/console&quot;; error(&quot;This is an error message&quot;); info(&quot;This is an informational message&quot;); warn(&quot;This is a warning&quot;);  ","version":"Next","tagName":"h2"},{"title":"config","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/config","content":"","keywords":"","version":"Next"},{"title":"Schema​","type":1,"pageTitle":"config","url":"/rnx-kit/docs/tools/config#schema","content":" Package configuration is under the top-level rnx-kit entry in package.json. It is of type KitConfig.  ","version":"Next","tagName":"h2"},{"title":"KitConfig​","type":1,"pageTitle":"config","url":"/rnx-kit/docs/tools/config#kitconfig","content":" Configuration information for an rnx-kit package. This is retrieved from 'rnx-kit' in package.json.  Name\tType\tDescriptionkitType\t&quot;app&quot; | &quot;library&quot; | undefined\tLibrary or App package. Used by the dependency manager when projecting capabilities into dependencies, devDependencies, and peerDependencies. Library package dependencies are private, in dev and peer. App package dependencies are public. reactNativeVersion\tstring | undefined\tReact Native version (or range) which this package supports. reactNativeDevVersion\tstring | undefined\tReact Native version to use during development of this package. If not specified, the minimum reactNativeVersion is used. bundle\tBundleConfig | BundleConfig[] | undefined\tSpecifies how the package is bundled. server\tServerConfig | undefined\tSpecifies how the package's bundle server is configured. capabilities\tCapability[] | undefined\tList of capabilities that this package needs. A capability is a well-known name (string). customProfiles\tstring | undefined\tPath to a file containing custom profiles.  ","version":"Next","tagName":"h3"},{"title":"BundleConfig inherits BundleParameters​","type":1,"pageTitle":"config","url":"/rnx-kit/docs/tools/config#bundleconfig-inherits-bundleparameters","content":" Defines how a package is bundled. Includes shared bundling parameters with platform-specific overrides.  Name\tType\tDescriptionid\tstring | undefined\tUnique identifier for this bundle definition. Only used as a reference within the build system. targets\tAllPlatforms[] | undefined\tThe platform(s) for which this package may be bundled. platforms\tRecord&lt;AllPlatforms, BundleDefinition&gt; | undefined\tPlatform-specific overrides for bundling parameters. Any parameter not listed in an override gets its value from the shared bundle definition, or falls back to defaults.  ","version":"Next","tagName":"h3"},{"title":"AllPlatforms​","type":1,"pageTitle":"config","url":"/rnx-kit/docs/tools/config#allplatforms","content":" Union of: &quot;ios&quot;, &quot;android&quot;, &quot;windows&quot;, &quot;win32&quot;, &quot;macos&quot;  ","version":"Next","tagName":"h3"},{"title":"BundleParameters​","type":1,"pageTitle":"config","url":"/rnx-kit/docs/tools/config#bundleparameters","content":" Parameters controlling how a bundle is constructed.  Name\tType\tDescriptionentryFile\tstring | undefined\tPath to the .js file which is the entry-point for building the bundle. Either absolute, or relative to the package. bundleOutput\tstring | undefined\tPath to the output bundle file. Either absolute or relative to the package. bundleEncoding\tstring | undefined\tEncoding scheme to use when writing the bundle file. Currently limited to UTF-8, UTF-16 (little endian), and 7-bit ASCII. sourcemapOutput\tstring | undefined\tPath to use when creating the bundle source map file. Either absolute, or relative to the package. sourcemapSourcesRoot\tstring | undefined\tPath to the package's source files. Used to make source-map paths relative and therefore portable. sourcemapUseAbsolutePath\tboolean | undefined\tControls whether or not SourceMapURL is reported as a full path or just a file name. assetsDest\tstring | undefined\tPath where all bundle assets (strings, images, fonts, sounds, ...) are written. Either absolute, or relative to the package. indexedBundleFormat\tboolean | undefined\tForce the &quot;Indexed RAM&quot; bundle file format, even when targeting Android. Only applies to the rnx-ram-bundle command. plugins\t(string | [string, any])[]\tList of plugins to apply. If unset, it falls back to [&quot;@rnx-kit/metro-plugin-cyclic-dependencies-detector&quot;, &quot;@rnx-kit/metro-plugin-duplicates-checker&quot;, &quot;@rnx-kit/metro-plugin-typescript&quot;]. treeShake\tboolean | undefined\tChoose whether to enable tree shaking.  ","version":"Next","tagName":"h3"},{"title":"CyclicDetectorOptions​","type":1,"pageTitle":"config","url":"/rnx-kit/docs/tools/config#cyclicdetectoroptions","content":" Name\tType\tDefault\tDescriptionincludeNodeModules\tboolean | undefined\tfalse\tWhen scanning for circular dependencies, include all external packages from node_modules. linesOfContext\tnumber | undefined\t1\tWhen a cycle is detected, this controls the size of the module backtrace that is printed with the error message. throwOnError\tboolean | undefined\ttrue\tWhether or not to throw an exception when a cycle is detected.  ","version":"Next","tagName":"h3"},{"title":"DuplicateDetectorOptions​","type":1,"pageTitle":"config","url":"/rnx-kit/docs/tools/config#duplicatedetectoroptions","content":" Name\tType\tDefault\tDescriptionignoredModules\tstring[] | undefined List of modules to ignore when scanning for duplicate dependencies. bannedModules\tstring[] | undefined List of modules that always cause a failure, regardless of whether or not they are duplicated. throwOnError\tboolean | undefined\ttrue\tWhether or not to throw an exception when a duplicate or banned module is detected.  ","version":"Next","tagName":"h3"},{"title":"TypeScriptValidationOptions​","type":1,"pageTitle":"config","url":"/rnx-kit/docs/tools/config#typescriptvalidationoptions","content":" Name\tType\tDefault\tDescriptionthrowOnError\tboolean | undefined\ttrue\tControls whether an error is thrown when type-validation fails.  ","version":"Next","tagName":"h3"},{"title":"ServerConfig​","type":1,"pageTitle":"config","url":"/rnx-kit/docs/tools/config#serverconfig","content":" Name\tType\tDescriptionprojectRoot\tstring | undefined\tPath to the root of your react-native application. The bundle server uses this root path to resolve all web requests. The root path should contain your Babel config, otherwise Metro won't be able to find it. Either absolute, or relative to the package. assetPlugins\tstring[] | undefined\tAdditional asset plugins to be used by the Metro Babel transformer. Comma-separated list containing plugin modules and/or absolute paths to plugin packages. sourceExts\tstring[] | undefined\tAdditional source-file extensions to include when generating bundles. Comma-separated list, excluding the leading dot. plugins\t(string | [string, any])[]\tList of plugins to apply. If unset, it falls back to [&quot;@rnx-kit/metro-plugin-cyclic-dependencies-detector&quot;, &quot;@rnx-kit/metro-plugin-duplicates-checker&quot;, &quot;@rnx-kit/metro-plugin-typescript&quot;].  ","version":"Next","tagName":"h3"},{"title":"API​","type":1,"pageTitle":"config","url":"/rnx-kit/docs/tools/config#api","content":" ","version":"Next","tagName":"h2"},{"title":"getKitConfig({module, cwd})​","type":1,"pageTitle":"config","url":"/rnx-kit/docs/tools/config#getkitconfigmodule-cwd","content":" Query for a package's rnx-kit configuration.  Parameter\tType\tDescriptionmodule\tstring | undefined\tRead package configuration from the named module. When given, this takes precedence over cwd. cwd\tstring | undefined\tRead package configuration from the given directory. Ignored when module is given. [Return]\tKitConfig | null\tPackage configuration, or null if nothing was found.  ","version":"Next","tagName":"h3"},{"title":"getBundleConfig(config, id)​","type":1,"pageTitle":"config","url":"/rnx-kit/docs/tools/config#getbundleconfigconfig-id","content":" Get a bundle configuration from the rnx-kit configuration.  If an id is given, search for the matching bundle definition. Otherwise, use the first bundle definition.  Parameter\tType\tDescriptionconfig\tKitConfig\tThe package's rnx-kit configuration id\tstring | undefined\tOptional identity of the target bundle configuration [Return]\tBundleDefinition\tBundle configuration, or undefined if nothing was found  ","version":"Next","tagName":"h3"},{"title":"getPlatformBundleConfig(bundle, platform)​","type":1,"pageTitle":"config","url":"/rnx-kit/docs/tools/config#getplatformbundleconfigbundle-platform","content":" Resolves the platform selector for a bundle configuration.  Parameter\tType\tDescriptionbundle\tBundleConfig\tBundle config to resolve (includes the optional platform selectors) platform\tAllPlatforms\tTarget platform [Return]\tBundleDefinition\tBundle config containing platform-specific overrides  ","version":"Next","tagName":"h3"},{"title":"getKitCapabilities(config)​","type":1,"pageTitle":"config","url":"/rnx-kit/docs/tools/config#getkitcapabilitiesconfig","content":" Get capability information from the package configuration.  Parameter\tType\tDescriptionconfig\tKitConfig\tPackage configuration. [Return]\tKitCapabilities\tCapability information.  KitCapabilities​  Name\tType\tDefault\tDescriptionkitType\t&quot;app&quot; | &quot;library&quot; | undefined\t&quot;library&quot;\tLibrary or App package. Used by the dependency manager when projecting capabilities into dependencies, devDependencies, and peerDependencies. Library package dependencies are private, in dev and peer. App package dependencies are public. reactNativeVersion\tstring React Native version (or range) which this package supports. reactNativeDevVersion\tstring Min version in reactNativeVersion\tReact Native version to use during development of this package. If not specified, the minimum reactNativeVersion is used. capabilities\tCapability[]\t[]\tList of capabilities that this package needs. A capability is a well-known name (string). customProfiles\tstring | undefined Path to a file containing custom profiles. ","version":"Next","tagName":"h3"},{"title":"esbuild-plugin-import-path-remapper","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/esbuild-plugin-import-path-remapper","content":"","keywords":"","version":"Next"},{"title":"Usage​","type":1,"pageTitle":"esbuild-plugin-import-path-remapper","url":"/rnx-kit/docs/tools/esbuild-plugin-import-path-remapper#usage","content":" Add @rnx-kit/esbuild-plugin-import-path-remapper to your build script plugins. The package name filter argument to the plugin is an esbuild compatible regular expression to match the packages to transform.  For example, to remap all paths under the @rnx-kit scope:  // esbuild.js const ImportPathRemapperPlugin = require(&quot;@rnx-kit/esbuild-plugin-import-path-remapper&quot;); require(&quot;esbuild&quot;) .build({ entryPoints: [&quot;app.tsx&quot;], bundle: true, outfile: &quot;out.js&quot;, plugins: [ImportPathRemapperPlugin(&quot;@rnx-kit&quot;)], }) .catch(() =&gt; process.exit(1));  ","version":"Next","tagName":"h2"},{"title":"cli","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/cli","content":"","keywords":"","version":"Next"},{"title":"rnx-cli bundle​","type":1,"pageTitle":"cli","url":"/rnx-kit/docs/tools/cli#rnx-cli-bundle","content":" Bundle a package using Metro. The bundling process uses optionalconfiguration parameters and command-line overrides.  [!NOTE] This command is meant to be a drop-in replacement for react-native bundle. If rnx-bundle ever becomes widely accepted, we will work on upstreaming it to @react-native-community/cli, along with supporting libraries for package configuration and Metro plugins.  ","version":"Next","tagName":"h2"},{"title":"Example Usages​","type":1,"pageTitle":"cli","url":"/rnx-kit/docs/tools/cli#example-usages","content":" yarn rnx-cli bundle   yarn rnx-cli bundle \\ --entry-file src/index.ts \\ --bundle-output main.jsbundle \\ --platform ios \\ --dev false \\ --minify true   ","version":"Next","tagName":"h3"},{"title":"Example Configuration (Optional)​","type":1,"pageTitle":"cli","url":"/rnx-kit/docs/tools/cli#example-configuration-optional","content":" { &quot;rnx-kit&quot;: { &quot;bundle&quot;: { &quot;entryFile&quot;: &quot;entry.js&quot;, &quot;assetsDest&quot;: &quot;dist&quot;, &quot;plugins&quot;: [ &quot;@rnx-kit/metro-plugin-cyclic-dependencies-detector&quot;, [ &quot;@rnx-kit/metro-plugin-duplicates-checker&quot;, { &quot;ignoredModules&quot;: [&quot;react-is&quot;] } ], &quot;@rnx-kit/metro-plugin-typescript&quot; ], &quot;targets&quot;: [&quot;android&quot;, &quot;ios&quot;, &quot;macos&quot;, &quot;windows&quot;], &quot;platforms&quot;: { &quot;android&quot;: { &quot;assetsDest&quot;: &quot;dist/res&quot; }, &quot;macos&quot;: { &quot;plugins&quot;: [ &quot;@rnx-kit/metro-plugin-cyclic-dependencies-detector&quot;, [ &quot;@rnx-kit/metro-plugin-duplicates-checker&quot;, { &quot;ignoredModules&quot;: [&quot;react-is&quot;] } ] ] } } } } }   ","version":"Next","tagName":"h3"},{"title":"Bundle Defaults​","type":1,"pageTitle":"cli","url":"/rnx-kit/docs/tools/cli#bundle-defaults","content":" When certain parameters aren't specified in configuration or on the command-line, they are explicitly set to default values.  Parameter\tDefault ValueentryFile\t&quot;index.js&quot; bundleOutput\t&quot;index.&lt;platform&gt;.bundle&quot; (Windows, Android) or &quot;index.&lt;platform&gt;.jsbundle&quot; (iOS, macOS) hermes\tfalse treeShake\tfalse plugins\t[&quot;@rnx-kit/metro-plugin-cyclic-dependencies-detector&quot;, &quot;@rnx-kit/metro-plugin-duplicates-checker&quot;, &quot;@rnx-kit/metro-plugin-typescript&quot;]  Other parameters have implicit defaults, buried deep in Metro or its dependencies.  ","version":"Next","tagName":"h3"},{"title":"Command-Line Overrides​","type":1,"pageTitle":"cli","url":"/rnx-kit/docs/tools/cli#command-line-overrides","content":" Option\tDescription--id &lt;id&gt;\tTarget bundle definition; only needed when the rnx-kit configuration has multiple bundle definitions --entry-file &lt;path&gt;\tPath to the root JavaScript or TypeScript file, either absolute or relative to the package --platform &lt;ios|android|windows|win32|macos&gt;\tTarget platform; when unspecified, all platforms in the rnx-kit configuration are bundled --dev [boolean]\tIf false, warnings are disabled and the bundle is minified --minify [boolean]\tControls whether or not the bundle is minified (useful for test builds) --bundle-output &lt;string&gt;\tPath to the output bundle file, either absolute or relative to the package --bundle-encoding &lt;utf8|utf16le|ascii&gt;\tCharacter encoding to use when writing the bundle file --max-workers &lt;number&gt;\tSpecifies the maximum number of parallel worker threads to use for transforming files; defaults to the number of cores available on your machine --sourcemap-output &lt;string&gt;\tPath where the bundle source map is written, either absolute or relative to the package --sourcemap-sources-root &lt;string&gt;\tPath to use when relativizing file entries in the bundle source map --sourcemap-use-absolute-path\tReport SourceMapURL using its full path --assets-dest &lt;path&gt;\tPath where bundle assets like images are written, either absolute or relative to the package; if unspecified, assets are ignored --unstable-transform-profile &lt;string&gt;\t[Experimental] Transform JS for a specific JS engine; currently supported: hermes, hermes-canary, default --reset-cache\tReset the Metro cache --config &lt;string&gt;\tPath to the Metro configuration file --tree-shake [boolean]\tEnable tree shaking to remove unused code and reduce the bundle size  ","version":"Next","tagName":"h3"},{"title":"rnx-cli start​","type":1,"pageTitle":"cli","url":"/rnx-kit/docs/tools/cli#rnx-cli-start","content":" Start a bundle server for a package using Metro. The bundle server uses optional configuration parameters and command-line overrides.  [!NOTE] This command is meant to be a drop-in replacement for react-native start. Ifrnx-start ever becomes widely accepted, we will work on upstreaming it to@react-native-community/cli, along with supporting libraries for package configuration and Metro plugins.  ","version":"Next","tagName":"h2"},{"title":"Example Commands​","type":1,"pageTitle":"cli","url":"/rnx-kit/docs/tools/cli#example-commands","content":" yarn rnx-cli start   yarn rnx-cli start --host 127.0.0.1 --port 8812   ","version":"Next","tagName":"h3"},{"title":"Example Configuration​","type":1,"pageTitle":"cli","url":"/rnx-kit/docs/tools/cli#example-configuration","content":" { &quot;rnx-kit&quot;: { &quot;server&quot;: { &quot;projectRoot&quot;: &quot;src&quot;, &quot;plugins&quot;: [ &quot;@rnx-kit/metro-plugin-cyclic-dependencies-detector&quot;, [ &quot;@rnx-kit/metro-plugin-duplicates-checker&quot;, { &quot;ignoredModules&quot;: [&quot;react-is&quot;], &quot;throwOnError&quot;: false } ], &quot;@rnx-kit/metro-plugin-typescript&quot; ] } } }   ","version":"Next","tagName":"h3"},{"title":"Server Defaults​","type":1,"pageTitle":"cli","url":"/rnx-kit/docs/tools/cli#server-defaults","content":" If the server configuration is not defined, it is implicitly created at runtime from the bundle configuration (or its defaults).  ","version":"Next","tagName":"h3"},{"title":"Command-Line Overrides​","type":1,"pageTitle":"cli","url":"/rnx-kit/docs/tools/cli#command-line-overrides-1","content":" Option\tDescription--port &lt;number&gt;\tHost port to use when listening for incoming server requests --host &lt;string&gt;\tHost name or address to bind when listening for incoming server requests; when not specified, requests from all addresses are accepted --project-root &lt;path&gt;\tPath to the root of your react-native project; the bundle server uses this path to resolve all web requests --watch-folders &lt;paths&gt;\tAdditional folders which will be added to the watched files list, comma-separated; by default, Metro watches all project files --asset-plugins &lt;list&gt;\tAdditional asset plugins to be used by Metro's Babel transformer; comma-separated list containing plugin module names or absolute paths to plugin packages --source-exts &lt;list&gt;\tAdditional source file extensions to include when generating bundles; comma-separated list, excluding the leading dot --max-workers &lt;number&gt;\tSpecifies the maximum number of parallel worker threads to use for transforming files; defaults to the number of cores available on your machine --reset-cache\tReset the Metro cache --custom-log-reporter-path &lt;string&gt;\tPath to a JavaScript file which exports a Metro 'TerminalReporter' function; replaces the default reporter that writes all messages to the Metro console --https\tUse a secure (https) web server; when not specified, an insecure (http) web server is used --key &lt;path&gt;\tPath to a custom SSL private key file to use for secure (https) communication --cert &lt;path&gt;\tPath to a custom SSL certificate file to use for secure (https) communication --config &lt;string&gt;\tPath to the Metro configuration file --no-interactive\tDisables interactive mode --id &lt;string&gt;\tSpecify which bundle configuration to use if server configuration is missing  ","version":"Next","tagName":"h3"},{"title":"rnx-cli build​","type":1,"pageTitle":"cli","url":"/rnx-kit/docs/tools/cli#rnx-cli-build","content":" Builds the native bits in your project.  yarn rnx-cli build [options]   Option\tDescription-p, --platform &lt;string&gt;\tTarget platform --workspace &lt;string&gt;\tPath, relative to project root, of the Xcode workspace to build (macOS only) --scheme &lt;string&gt;\tName of scheme to build (Apple platforms only) --configuration &lt;string&gt;\tBuild configuration for building the app; 'Debug' or 'Release' --destination &lt;string&gt;\tDestination of the built app; 'device', 'emulator', or 'simulator'  ","version":"Next","tagName":"h2"},{"title":"Example Commands​","type":1,"pageTitle":"cli","url":"/rnx-kit/docs/tools/cli#example-commands-1","content":" yarn rnx-cli build -p ios   ","version":"Next","tagName":"h3"},{"title":"rnx-cli run​","type":1,"pageTitle":"cli","url":"/rnx-kit/docs/tools/cli#rnx-cli-run","content":" Launches the native app (building it first if necessary).  yarn rnx-cli run [options]   Option\tDescription-p, --platform &lt;string&gt;\tTarget platform --workspace &lt;string&gt;\tPath, relative to project root, of the Xcode workspace to build (macOS only) --scheme &lt;string&gt;\tName of scheme to build (Apple platforms only) --configuration &lt;string&gt;\tBuild configuration for building the app; 'Debug' or 'Release' --destination &lt;string&gt;\tDestination of the built app; 'device', 'emulator', or 'simulator' -d, --device &lt;string&gt;\tThe name of the device to launch the app in  ","version":"Next","tagName":"h2"},{"title":"Example Commands​","type":1,"pageTitle":"cli","url":"/rnx-kit/docs/tools/cli#example-commands-2","content":" yarn rnx-cli run -p ios   ","version":"Next","tagName":"h3"},{"title":"rnx-cli align-deps​","type":1,"pageTitle":"cli","url":"/rnx-kit/docs/tools/cli#rnx-cli-align-deps","content":" Manage dependencies within a repository and across many repositories.  yarn rnx-cli align-deps [options] [/path/to/package.json]   Refer to @rnx-kit/align-deps for details.  ","version":"Next","tagName":"h2"},{"title":"rnx-cli clean​","type":1,"pageTitle":"cli","url":"/rnx-kit/docs/tools/cli#rnx-cli-clean","content":" Cleans your project by removing React Native related caches and modules.  yarn rnx-cli clean [options]   Option\tDescription--include &lt;android,cocoapods,metro,npm,watchman,yarn&gt;\tComma-separated flag of caches to clear e.g., npm,yarn --project-root &lt;path&gt;\tRoot path to your React Native project --verify-cache\tWhether to verify the integrity of the cache  ","version":"Next","tagName":"h2"},{"title":"rnx-cli write-third-party-notices​","type":1,"pageTitle":"cli","url":"/rnx-kit/docs/tools/cli#rnx-cli-write-third-party-notices","content":" Generate a third-party notice, an aggregation of all the LICENSE files from your package's dependencies.  [!NOTE] A third-party notice is a legal document. You are solely responsble for its content, even if you use this command to assist you in generating it. You should consult with an attorney to ensure your notice meets all legal requirements.  yarn rnx-cli write-third-party-notices [options]   Option\tDescription--root-path &lt;path&gt;\tThe root of the repo to start resolving modules from --source-map-file &lt;path&gt;\tThe source map file to generate license contents for --json\tOutput license information as a JSON --output-file &lt;path&gt;\tThe output file to write the license file to --ignore-scopes &lt;string&gt;\tnpm scopes to ignore and not emit license information for --ignore-modules &lt;string&gt;\tModules (JS packages) to not emit license information for --preamble-text &lt;string&gt;\tA list of lines to prepend at the start of the generated license file --additional-text &lt;string&gt;\tA list of lines to append at the end of the generated license file --full-license-text\tInclude full license text in the JSON output  ","version":"Next","tagName":"h2"},{"title":"Other Commands​","type":1,"pageTitle":"cli","url":"/rnx-kit/docs/tools/cli#other-commands","content":" The following commands route to @react-native-community/cli:  rnx-cli build-android →react-native build-androidrnx-cli build-ios →react-native build-iosrnx-cli config →react-native configrnx-cli doctor →react-native doctorrnx-cli info →react-native infornx-cli log-android →react-native log-androidrnx-cli log-ios →react-native log-iosrnx-cli run-android →react-native run-androidrnx-cli run-ios →react-native run-ios ","version":"Next","tagName":"h2"},{"title":"jest-preset","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/jest-preset","content":"","keywords":"","version":"Next"},{"title":"Usage​","type":1,"pageTitle":"jest-preset","url":"/rnx-kit/docs/tools/jest-preset#usage","content":" ","version":"Next","tagName":"h2"},{"title":"In a TypeScript-only Package (Non-React Native)​","type":1,"pageTitle":"jest-preset","url":"/rnx-kit/docs/tools/jest-preset#in-a-typescript-only-package-non-react-native","content":" Add preset: &quot;@rnx-kit/jest-preset&quot; to your Jest config:   module.exports = { + preset: &quot;@rnx-kit/jest-preset&quot;, ... };   @rnx-kit/jest-preset will detect that you're not targeting React Native and exclude any React Native specific configurations.  ","version":"Next","tagName":"h3"},{"title":"In a React Native Package​","type":1,"pageTitle":"jest-preset","url":"/rnx-kit/docs/tools/jest-preset#in-a-react-native-package","content":" There are three ways to use this preset when targeting React Native, depending on your personal preference.  Single jest.config.js​  If you prefer to use a single Jest config, you can provide the target platform via an environment variable. First, add preset: &quot;@rnx-kit/jest-preset&quot; to your Jest config:   module.exports = { + preset: &quot;@rnx-kit/jest-preset&quot;, ... };   Then specify the target platform when running Jest:  RN_TARGET_PLATFORM=ios npm run jest   Multiple jest.config.js​  Alternatively, you can have a Jest config file for each platform, e.g.:  // jest.config.ios.js module.exports = require(&quot;@rnx-kit/jest-preset&quot;)(&quot;ios&quot;, { ... });   Then specify the config file to use when running Jest:  npm run jest --config jest.config.ios.js   Use @rnx-kit/cli​  You can specify the target platform using the rnx-test command provided by@rnx-kit/cli. First, add preset: &quot;@rnx-kit/jest-preset&quot; to your Jest config:   module.exports = { + preset: &quot;@rnx-kit/jest-preset&quot;, ... };   Then specify the target platform when running rnx-test:  npm run react-native rnx-test --platform ios   ","version":"Next","tagName":"h3"},{"title":"In an Out-of-Tree Platform Package​","type":1,"pageTitle":"jest-preset","url":"/rnx-kit/docs/tools/jest-preset#in-an-out-of-tree-platform-package","content":" Add preset: &quot;@rnx-kit/jest-preset&quot; to your Jest config:   module.exports = { + preset: &quot;@rnx-kit/jest-preset&quot;, ... };   The target platform will be deduced by reading react-native.config.js at the package root. ","version":"Next","tagName":"h3"},{"title":"eslint-plugin","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/eslint-plugin","content":"","keywords":"","version":"Next"},{"title":"Install​","type":1,"pageTitle":"eslint-plugin","url":"/rnx-kit/docs/tools/eslint-plugin#install","content":" yarn add @rnx-kit/eslint-plugin --dev   or if you're using npm:  npm add --save-dev @rnx-kit/eslint-plugin   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"eslint-plugin","url":"/rnx-kit/docs/tools/eslint-plugin#usage","content":" This ESLint plugin exports multiple configurations. For instance, to use therecommendedconfiguration, you can re-export it in yourflat configlike below:  module.exports = require(&quot;@rnx-kit/eslint-plugin/recommended&quot;);   Alternatively, if you want to add customizations:  const rnx = require(&quot;@rnx-kit/eslint-plugin&quot;); module.exports = [ ...rnx.configs.recommended, { rules: { &quot;@rnx-kit/no-const-enum&quot;: &quot;error&quot;, &quot;@rnx-kit/no-export-all&quot;: &quot;error&quot;, }, }, ];   If you're just interested in the rules, you can use it as a plugin and enable the rules you're interested in:  module.exports = [ { plugins: { &quot;@rnx-kit&quot;: require(&quot;@rnx-kit/eslint-plugin&quot;), }, rules: { &quot;@rnx-kit/no-const-enum&quot;: &quot;error&quot;, &quot;@rnx-kit/no-export-all&quot;: &quot;error&quot;, }, }, ];   ","version":"Next","tagName":"h2"},{"title":"Recommended Configurations​","type":1,"pageTitle":"eslint-plugin","url":"/rnx-kit/docs/tools/eslint-plugin#recommended-configurations","content":" @rnx-kit/eslint-plugin/recommendedextends: eslint:recommendedplugin:@typescript-eslint/recommendedplugin:react-hooks/recommendedplugin:react/recommendedIt also includes and enables the following rules: @react-native/platform-colors @rnx-kit/eslint-plugin/strictextends @rnx-kit/eslint-plugin/recommended with rules that enables better tree shaking: @rnx-kit/no-const-enum@rnx-kit/no-export-allno-restricted-exports  ","version":"Next","tagName":"h2"},{"title":"Supported Rules​","type":1,"pageTitle":"eslint-plugin","url":"/rnx-kit/docs/tools/eslint-plugin#supported-rules","content":" ✓: Enabled with @rnx-kit/eslint-plugin/recommended🔧: Fixable with --fix  ✓\t🔧\tRule\tDescription✓ @rnx-kit/no-const-enum\tdisallow const enum (why is it bad?) ✓\t🔧\t@rnx-kit/no-export-all\tdisallow export * (why is it bad?) ","version":"Next","tagName":"h2"},{"title":"metro-plugin-cyclic-dependencies-detector","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/metro-plugin-cyclic-dependencies-detector","content":"","keywords":"","version":"Next"},{"title":"Usage​","type":1,"pageTitle":"metro-plugin-cyclic-dependencies-detector","url":"/rnx-kit/docs/tools/metro-plugin-cyclic-dependencies-detector#usage","content":" Import and add the plugin to MetroSerializer in your metro.config.js, and optionally configure it to your liking:   const { makeMetroConfig } = require(&quot;@rnx-kit/metro-config&quot;); +const { + CyclicDependencies, +} = require(&quot;@rnx-kit/metro-plugin-cyclic-dependencies-detector&quot;); +const { MetroSerializer } = require(&quot;@rnx-kit/metro-serializer&quot;); module.exports = makeMetroConfig({ serializer: { + customSerializer: MetroSerializer([ + CyclicDependencies({ + includeNodeModules: false, + linesOfContext: 1, + throwOnError: true, + }), + ]), }, });   ","version":"Next","tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"metro-plugin-cyclic-dependencies-detector","url":"/rnx-kit/docs/tools/metro-plugin-cyclic-dependencies-detector#options","content":" Key\tType\tDefault\tDescriptionincludeNodeModules\tboolean\tfalse\tWhether to scan node_modules. linesOfContext\tnumber\t1\tNumber of extra modules to print for context. throwOnError\tboolean\ttrue\tWhether to throw when cycles are detected. ","version":"Next","tagName":"h2"},{"title":"metro-plugin-typescript","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/metro-plugin-typescript","content":"","keywords":"","version":"Next"},{"title":"Usage​","type":1,"pageTitle":"metro-plugin-typescript","url":"/rnx-kit/docs/tools/metro-plugin-typescript#usage","content":"  const { makeMetroConfig } = require(&quot;@rnx-kit/metro-config&quot;); +const { TypeScriptPlugin } = require(&quot;@rnx-kit/metro-plugin-typescript&quot;); module.exports = makeMetroConfig({ serializer: { + experimentalSerializerHook: TypeScriptPlugin(), }, });   ","version":"Next","tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"metro-plugin-typescript","url":"/rnx-kit/docs/tools/metro-plugin-typescript#options","content":" Key\tType\tDefault\tDescriptionthrowOnError\tboolean\tfalse\tWhether to throw when errors are found. ","version":"Next","tagName":"h2"},{"title":"metro-resolver-symlinks","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/metro-resolver-symlinks","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"metro-resolver-symlinks","url":"/rnx-kit/docs/tools/metro-resolver-symlinks#installation","content":" yarn add @rnx-kit/metro-resolver-symlinks --dev   or if you're using npm  npm add --save-dev @rnx-kit/metro-resolver-symlinks   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"metro-resolver-symlinks","url":"/rnx-kit/docs/tools/metro-resolver-symlinks#usage","content":" Import and assign the resolver to resolver.resolveRequest in yourmetro.config.js:   const { makeMetroConfig } = require(&quot;@rnx-kit/metro-config&quot;); +const MetroSymlinksResolver = require(&quot;@rnx-kit/metro-resolver-symlinks&quot;); module.exports = makeMetroConfig({ resolver: { + resolveRequest: MetroSymlinksResolver(), }, });   ","version":"Next","tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"metro-resolver-symlinks","url":"/rnx-kit/docs/tools/metro-resolver-symlinks#options","content":" Option\tType\tDescriptionremapModule\t(moduleId: string) =&gt; string\tA custom function for remapping additional modules. experimental_retryResolvingFromDisk\tboolean\t[Experimental] Whether to retry module resolution on disk if not found in Haste map. This option is useful for scenarios where you want to reduce the number of watched files (and thus the initial time spent on crawling). Note that enabling this will likely be slower than having a warm cache.  ","version":"Next","tagName":"h2"},{"title":"remapModule​","type":1,"pageTitle":"metro-resolver-symlinks","url":"/rnx-kit/docs/tools/metro-resolver-symlinks#remapmodule","content":" remapModule allows additional remapping of modules. For instance, there is aremapImportPath utility that remaps requests of lib/**/*.js tosrc/**/*.ts. This is useful for packages that don't correctly export everything in their main JS file.   const { makeMetroConfig } = require(&quot;@rnx-kit/metro-config&quot;); const MetroSymlinksResolver = require(&quot;@rnx-kit/metro-resolver-symlinks&quot;); module.exports = makeMetroConfig({ projectRoot: __dirname, resolver: { resolveRequest: MetroSymlinksResolver({ + remapModule: MetroSymlinksResolver.remapImportPath({ + test: (moduleId) =&gt; moduleId.startsWith(&quot;@rnx-kit/&quot;), + extensions: [&quot;.ts&quot;, &quot;.tsx&quot;], // optional + mainFields: [&quot;module&quot;, &quot;main&quot;], // optional + }), }), }, });   [!TIP] When Metro releases a version with the ability to set acustom resolver for Haste requests, this way of remapping modules is preferable over@rnx-kit/babel-plugin-import-path-remapper. The Babel plugin mutates the AST and requires a second pass. ","version":"Next","tagName":"h3"},{"title":"metro-serializer","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/metro-serializer","content":"","keywords":"","version":"Next"},{"title":"Usage​","type":1,"pageTitle":"metro-serializer","url":"/rnx-kit/docs/tools/metro-serializer#usage","content":" Import and set the serializer to serializer.customSerializer in yourmetro.config.js, then add your desired plugins. For instance, to addCyclicDependencies and DuplicateDependencies plugins:   const { makeMetroConfig } = require(&quot;@rnx-kit/metro-config&quot;); +const { + CyclicDependencies, +} = require(&quot;@rnx-kit/metro-plugin-cyclic-dependencies-detector&quot;); +const { + DuplicateDependencies, +} = require(&quot;@rnx-kit/metro-plugin-duplicates-checker&quot;); +const { MetroSerializer } = require(&quot;@rnx-kit/metro-serializer&quot;); module.exports = makeMetroConfig({ projectRoot: __dirname, serializer: { + customSerializer: MetroSerializer([ + CyclicDependencies(), + DuplicateDependencies(), + ]), }, });  ","version":"Next","tagName":"h2"},{"title":"metro-config","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/metro-config","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"metro-config","url":"/rnx-kit/docs/tools/metro-config#installation","content":" yarn add @rnx-kit/metro-config --dev   or if you're using npm  npm add --save-dev @rnx-kit/metro-config   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"metro-config","url":"/rnx-kit/docs/tools/metro-config#usage","content":" Import makeMetroConfig helper function from @rnx-kit/metro-config:  // metro.config.js const { makeMetroConfig } = require(&quot;@rnx-kit/metro-config&quot;); module.exports = makeMetroConfig({ transformer: { getTransformOptions: async () =&gt; ({ transform: { experimentalImportSupport: false, inlineRequires: false, }, }), }, });   makeMetroConfig takes a Metro config as parameter. The config is augmented with additional fields to make sure it works smoothly in a monorepo.  ","version":"Next","tagName":"h2"},{"title":"Expo​","type":1,"pageTitle":"metro-config","url":"/rnx-kit/docs/tools/metro-config#expo","content":" @rnx-kit/metro-config can be used with Expo. Pass its default config tomakeMetroConfig like below:  // metro.config.js const { getDefaultConfig } = require(&quot;@expo/metro-config&quot;); const { makeMetroConfig } = require(&quot;@rnx-kit/metro-config&quot;); const config = getDefaultConfig(__dirname); module.exports = makeMetroConfig(config);   ","version":"Next","tagName":"h3"},{"title":"Known Limitations​","type":1,"pageTitle":"metro-config","url":"/rnx-kit/docs/tools/metro-config#known-limitations","content":" While Metro is the de-facto standard, it lacks a few features that would make it optimal; here's our current wishlist, feel free to submit PRs if you want to help with them :)  ","version":"Next","tagName":"h2"},{"title":"Bundle size​","type":1,"pageTitle":"metro-config","url":"/rnx-kit/docs/tools/metro-config#bundle-size","content":" Metro currently does not implement tree shaking, i.e. it does not attempt to remove unused code from the JS bundle. For instance, given this code snippet:  import { partition } from &quot;lodash&quot;;   Metro will bundle all of lodash in your bundle even though you're only using a small part of it. In lodash's case, you can addbabel-plugin-lodash to your Babel config to help Metro strip away some modules, but not all libraries will come with such helpers.  If you're feeling adventurous, you can try an experimental Metro serializer we've built that adds support for tree shaking:@rnx-kit/metro-serializer-esbuild. Do note that you will need to be on React Native 0.64 or above, and use Metro 0.66.1.  ","version":"Next","tagName":"h3"},{"title":"Plugins​","type":1,"pageTitle":"metro-config","url":"/rnx-kit/docs/tools/metro-config#plugins","content":" Metro doesn't have a plugin system, but it does have hooks that allows you to implement something that functions similarly.@rnx-kit/metro-serializerimplements a serializer that allows you to pass plugins that are run just before the JS bundle is serialized and written to disk. Follow theinstructions for installing it, then try our plugins:  @rnx-kit/metro-plugin-cyclic-dependencies-detectoris a plugin that detects cyclic imports. These can cause bugs that can be really confusing to debug.@rnx-kit/metro-plugin-duplicates-checkerdetects whether you're bundling multiple copies of the same package in your JS bundle.@rnx-kit/metro-plugin-typescript-validationperforms type checking of the TypeScript files being bundled. The Babel plugin for TypeScript that comes with metro-react-native-babel-preset only strips the types. Normally, one would run tsc separately to ensure that the code is correct. This step can now be replaced with the plugin.  You can of course also provide your own plugins.  ","version":"Next","tagName":"h3"},{"title":"Ensuring a single instance of a package​","type":1,"pageTitle":"metro-config","url":"/rnx-kit/docs/tools/metro-config#ensuring-a-single-instance-of-a-package","content":" Normally, Metro resolves a module relative to the package it is currently residing in. For example, with a monorepo such as below, my-awesome-packagewould resolve react-native-msal@2.0.3 while another-awesome-package would resolve react-native-msal@3.1.0. This would lead to duplicate packages in your bundle and may cause issues.  workspace ├── node_modules │ └── react-native-msal@3.1.0 &lt;-- should be ignored └── packages ├── my-awesome-package │ └── node_modules │ └── react-native-msal@2.0.3 &lt;-- should take precedence └── another-awesome-package &lt;-- imported by my-awesome-package, but uses workspace's react-native-msal   If we simply exclude the workspace's copy, Metro will not be able to findreact-native-msal from another-awesome-package. It also won't exclude copies that are installed in other packages. To help Metro resolve to the correct copy, we need to exclude all other copies, and also add a corresponding entry inextraNodeModules. @rnx-kit/metro-config contains functions to help you set this up correctly. Given the example above, our metro.config.js should look like this:  const { exclusionList, makeMetroConfig, resolveUniqueModule, } = require(&quot;@rnx-kit/metro-config&quot;); const [msalPath, msalExcludePattern] = resolveUniqueModule(&quot;react-native-msal&quot;); const additionalExclusions = [msalExcludePattern]; const blockList = exclusionList(additionalExclusions); module.exports = makeMetroConfig({ resolver: { extraNodeModules: { &quot;react-native-msal&quot;: msalPath, }, blacklistRE: blockList, // For Metro &lt; 0.60 blockList, // For Metro &gt;= 0.60 }, });   ","version":"Next","tagName":"h3"},{"title":"Error: EMFILE: too many open files, watch​","type":1,"pageTitle":"metro-config","url":"/rnx-kit/docs/tools/metro-config#error-emfile-too-many-open-files-watch","content":" If you're getting an error like below, you need toinstall Watchman.  events.js:292 throw er; // Unhandled 'error' event ^ Error: EMFILE: too many open files, watch at FSEvent.FSWatcher._handle.onchange (internal/fs/watchers.js:178:28) Emitted 'error' event on NodeWatcher instance at: at NodeWatcher.checkedEmitError (/~/node_modules/sane/src/node_watcher.js:143:12) at FSWatcher.emit (events.js:315:20) at FSEvent.FSWatcher._handle.onchange (internal/fs/watchers.js:184:12) { errno: -24, syscall: 'watch', code: 'EMFILE', filename: null }   ","version":"Next","tagName":"h3"},{"title":"Error: jest-haste-map: Haste module naming collision​","type":1,"pageTitle":"metro-config","url":"/rnx-kit/docs/tools/metro-config#error-jest-haste-map-haste-module-naming-collision","content":" Metro will throw an exception if it finds duplicates:  Error: jest-haste-map: Haste module naming collision: Duplicate module name: react-animated Paths: /~/node_modules/example/node_modules/react-native/Libraries/Animated/release/package.json collides with /~/node_modules/react-native/Libraries/Animated/release/package.json This error is caused by `hasteImpl` returning the same name for different files. at setModule (/~/node_modules/jest-haste-map/build/index.js:569:17) at workerReply (/~/node_modules/jest-haste-map/build/index.js:641:9) at processTicksAndRejections (internal/process/task_queues.js:97:5) at async Promise.all (index 77)   To resolve this, you'll need to exclude one of the paths in yourmetro.config.js, e.g.:  const { exclusionList, makeMetroConfig } = require(&quot;@rnx-kit/metro-config&quot;); const blockList = exclusionList([ // Ignore nested copies of react-native /node_modules\\/.*\\/node_modules\\/react-native\\/.*/, ]); module.exports = makeMetroConfig({ resolver: { blacklistRE: blockList, // For Metro &lt; 0.60 blockList, // For Metro &gt;= 0.60 }, });   ","version":"Next","tagName":"h3"},{"title":"[Flipper] React DevTools is disabled​","type":1,"pageTitle":"metro-config","url":"/rnx-kit/docs/tools/metro-config#flipper-react-devtools-is-disabled","content":" Flipper only enables React Native plugins if it detects a Metro &quot;device&quot;. It detects one by opening localhost:8081 and checking for some keywords like &quot;React Native packager is running&quot;. However, if one of your packages have anindex.html in the package root, Metro will serve that file instead. Flipper will then think that it's not dealing with a React Native app and disable all related plugins.  The fix is to move index.html elsewhere, but if you cannot do that, you can work around this issue by filtering out the offending packages inmetro.config.js:  const { makeMetroConfig } = require(&quot;@rnx-kit/metro-config&quot;); const fs = require(&quot;fs&quot;); const path = require(&quot;path&quot;); const config = makeMetroConfig(); module.exports = { ...config, watchFolders: config.watchFolders.filter( (p) =&gt; !fs.existsSync(path.join(p, &quot;index.html&quot;)) ), };  ","version":"Next","tagName":"h3"},{"title":"metro-plugin-duplicates-checker","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/metro-plugin-duplicates-checker","content":"","keywords":"","version":"Next"},{"title":"Usage​","type":1,"pageTitle":"metro-plugin-duplicates-checker","url":"/rnx-kit/docs/tools/metro-plugin-duplicates-checker#usage","content":" There are several ways to use this package.  The recommended way is to add it as a plugin in your metro.config.js using@rnx-kit/metro-serializer:   const { makeMetroConfig } = require(&quot;@rnx-kit/metro-config&quot;); +const { + DuplicateDependencies, +} = require(&quot;@rnx-kit/metro-plugin-duplicates-checker&quot;); +const { MetroSerializer } = require(&quot;@rnx-kit/metro-serializer&quot;); module.exports = makeMetroConfig({ serializer: { + customSerializer: MetroSerializer([DuplicateDependencies()]), }, });   You can also check for duplicate packages after a bundle is created:  const { checkForDuplicatePackagesInFile, } = require(&quot;@rnx-kit/metro-plugin-duplicates-checker&quot;); checkForDuplicatePackagesInFile(pathToSourceMapFile, { ignoredModules: [], bannedModules: [], });   If you have a source map object, you can pass that directly tocheckForDuplicatePackages():  const { checkForDuplicatePackages, } = require(&quot;@rnx-kit/metro-plugin-duplicates-checker&quot;); checkForDuplicatePackages(mySourceMap, { ignoredModules: [], bannedModules: [], });   ","version":"Next","tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"metro-plugin-duplicates-checker","url":"/rnx-kit/docs/tools/metro-plugin-duplicates-checker#options","content":" Key\tType\tDefault\tDescriptionbannedModules\tstring[]\t[]\tList of modules that are banned. ignoredModules\tstring[]\t[]\tList of modules that can be ignored. throwOnError\tboolean\ttrue\tWhether to throw when duplicates are found.  ","version":"Next","tagName":"h2"},{"title":"Resolving Duplicates​","type":1,"pageTitle":"metro-plugin-duplicates-checker","url":"/rnx-kit/docs/tools/metro-plugin-duplicates-checker#resolving-duplicates","content":" So you have duplicates in your bundle, now what? Depending on your specific needs, we have several options.  Let's use a specific example:  error @fluentui-react-native/text (found 2 copies) warn 0.21.14 /~/node_modules/@fluentui-react-native/text warn 0.22.7 /~/node_modules/@fluentui-react-native/link/node_modules/@fluentui-react-native/text   This one occurs because @fluentui-react-native/link declares a dependency on@fluentui-react-native/text using a wide version range, &gt;=0.21.14 &lt;1.0.0.  Our project depends on @fluentui-react-native/text@^0.21.14, but package managers will typically still try to resolve &gt;=0.21.14 &lt;1.0.0 instead of using the existing resolution. This results in the duplicate error we see above.  From here, we have several options:  Manual DedupeUsing ToolsHelp Metro Resolve Correct VersionLast Resort: Force Resolution  ","version":"Next","tagName":"h2"},{"title":"Manual Dedupe​","type":1,"pageTitle":"metro-plugin-duplicates-checker","url":"/rnx-kit/docs/tools/metro-plugin-duplicates-checker#manual-dedupe","content":" This method is error-prone, especially if you have a lot of duplicates. It works if you have very few entries. It varies a lot depending on the package manager you're using.  The project in our example uses Yarn Classic: Open yarn.lock and look for@fluentui-react-native/text:  &quot;@fluentui-react-native/text@0.21.14&quot;, &quot;@fluentui-react-native/text@^0.21.14&quot;: version &quot;0.21.14&quot; resolved &quot;https://registry.yarnpkg.com/@fluentui-react-native/text/-/text-0.21.14.tgz#04918a9558770ec551cbdac87ca1534bfccaeffb&quot; integrity sha1-BJGKlVh3DsVRy9rIfKFTS/zK7/s= dependencies: &quot;@fluentui-react-native/adapters&quot; &quot;&gt;=0.11.3 &lt;1.0.0&quot; &quot;@fluentui-react-native/framework&quot; &quot;0.11.10&quot; &quot;@fluentui-react-native/interactive-hooks&quot; &quot;&gt;=0.24.12 &lt;1.0.0&quot; &quot;@fluentui-react-native/theme-tokens&quot; &quot;&gt;=0.25.4 &lt;1.0.0&quot; &quot;@fluentui-react-native/tokens&quot; &quot;&gt;=0.21.6 &lt;1.0.0&quot; &quot;@uifabricshared/foundation-compose&quot; &quot;^1.14.12&quot; tslib &quot;^2.3.1&quot; &quot;@fluentui-react-native/text@&gt;=0.21.14 &lt;1.0.0&quot;: version &quot;0.22.7&quot; resolved &quot;https://registry.yarnpkg.com/@fluentui-react-native/text/-/text-0.22.7.tgz#bd11768d3cd69337ad2ec4be76ee88d6749ca24f&quot; integrity sha1-vRF2jTzWkzetLsS+du6I1nScok8= dependencies: &quot;@fluentui-react-native/adapters&quot; &quot;&gt;=0.12.0 &lt;1.0.0&quot; &quot;@fluentui-react-native/framework&quot; &quot;0.13.6&quot; &quot;@fluentui-react-native/interactive-hooks&quot; &quot;&gt;=0.25.7 &lt;1.0.0&quot; &quot;@fluentui-react-native/theme-tokens&quot; &quot;&gt;=0.26.5 &lt;1.0.0&quot; &quot;@fluentui-react-native/tokens&quot; &quot;&gt;=0.22.5 &lt;1.0.0&quot; &quot;@uifabricshared/foundation-compose&quot; &quot;^1.14.20&quot; tslib &quot;^2.3.1&quot;   We can see there are two entries, one being resolved to 0.21.14 and the other to 0.22.7. In this case, since we want to keep 0.21.x and the version ranges just happens to be satisfied by this. We can merge the two entries like below:  &quot;@fluentui-react-native/text@0.21.14&quot;, &quot;@fluentui-react-native/text@&gt;=0.21.14 &lt;1.0.0&quot;, &quot;@fluentui-react-native/text@^0.21.14&quot;: version &quot;0.21.14&quot; resolved &quot;https://registry.yarnpkg.com/@fluentui-react-native/text/-/text-0.21.14.tgz#04918a9558770ec551cbdac87ca1534bfccaeffb&quot; integrity sha1-BJGKlVh3DsVRy9rIfKFTS/zK7/s= dependencies: &quot;@fluentui-react-native/adapters&quot; &quot;&gt;=0.11.3 &lt;1.0.0&quot; &quot;@fluentui-react-native/framework&quot; &quot;0.11.10&quot; &quot;@fluentui-react-native/interactive-hooks&quot; &quot;&gt;=0.24.12 &lt;1.0.0&quot; &quot;@fluentui-react-native/theme-tokens&quot; &quot;&gt;=0.25.4 &lt;1.0.0&quot; &quot;@fluentui-react-native/tokens&quot; &quot;&gt;=0.21.6 &lt;1.0.0&quot; &quot;@uifabricshared/foundation-compose&quot; &quot;^1.14.12&quot; tslib &quot;^2.3.1&quot;   Now we should only have one copy of @fluentui-react-native/text.  Our example is relatively simple. Sometimes you have to go further up the dependency chain and dedupe dependees.  Fortunately, we can use tools in most cases.  ","version":"Next","tagName":"h3"},{"title":"Using Tools​","type":1,"pageTitle":"metro-plugin-duplicates-checker","url":"/rnx-kit/docs/tools/metro-plugin-duplicates-checker#using-tools","content":" If you're using Yarn Classic, there is a tool, yarn-deduplicate, for deduplicating everything in yarn.lock. You can run it like so:  npx yarn-deduplicate   By default, it will try to dedupe to the highest version. In our example, however, we want to keep using 0.21.x. We should also limit the number of packages that get deduped to make it easier to review later. yarn-deduplicateprovides many options, but we'll be using the fewer strategy and the--scopes flag to only target @fluentui-react-native packages:  npx yarn-deduplicate --strategy fewer --scopes @fluentui-react-native   You can read more about yarn-deduplicate and available options here:https://github.com/scinos/yarn-deduplicate#readme  If you're using modern Yarn or other package managers, check out their built-in dedupe command:  Yarn: https://yarnpkg.com/cli/dedupenpm: https://docs.npmjs.com/cli/commands/npm-dedupepnpm: https://pnpm.io/cli/dedupe  ","version":"Next","tagName":"h3"},{"title":"Help Metro Resolve Correct Version​","type":1,"pageTitle":"metro-plugin-duplicates-checker","url":"/rnx-kit/docs/tools/metro-plugin-duplicates-checker#help-metro-resolve-correct-version","content":" If, for some reason, you cannot dedupe the package, you can instead configure Metro to resolve the correct version by telling it which version to use (withresolver.extraNodeModules) and blocking every other copy (withresolver.blockList):  module.exports = { resolver: { extraNodeModules: { &quot;@fluentui-react-native/text&quot;: &quot;/~/my-project/node_modules/@fluentui-react-native/text&quot;, }, blockList: [ /(?&lt;!\\/~\\/my-project)\\/node_modules\\/@fluentui-react-native\\/text\\/.*/, ], }, };   You don't have to write these entries manually. We have helper functions in@rnx-kit/metro-config for generating them dynamically.  ","version":"Next","tagName":"h3"},{"title":"Last Resort: Force Resolution​","type":1,"pageTitle":"metro-plugin-duplicates-checker","url":"/rnx-kit/docs/tools/metro-plugin-duplicates-checker#last-resort-force-resolution","content":" As a last resort, if everything else fails, you can manually override package resolutions. We don't recommend this solution because it forces a single version in all workspaces. For example, if you have two projects that have nothing to do with each other, they will both be forced to use the same version even though they could be using different versions. It also adds maintenance overhead because you will have to manually update the version as dependees update theirs.  If you've decided that you have no other options, you can find the appropriate documentation for your package manager below:  Yarn: https://yarnpkg.com/configuration/manifest#resolutionsnpm: https://docs.npmjs.com/cli/v10/configuring-npm/package-json#overridespnpm: https://pnpm.io/package_json#pnpmoverrides ","version":"Next","tagName":"h3"},{"title":"align-deps","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/align-deps","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#installation","content":" yarn add @rnx-kit/align-deps --dev   or if you're using npm  npm add --save-dev @rnx-kit/align-deps   You can also run this tool using npx  npx @rnx-kit/align-deps@latest [options] [packages...]   but note that profiles may change between each run. We therefore don't recommend that you use npx if you intend to run this tool on CI or as part of post-install. It should be fine if you run it manually.  ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#usage","content":" yarn rnx-align-deps [options] [packages...]   Listing paths to packages that should be checked is optional. If omitted,align-deps will look for the closest package.json using Node module resolution. If the target package is a root package defining workspaces, they will all be included.  Examples:  Ensure dependencies are compatible with react-native 0.70 without a config: yarn rnx-align-deps --requirements react-native@0.70 Initialize a config for your app (or library): yarn rnx-align-deps --init app # or specify `library` for a library Apply changes suggested by align-deps: yarn rnx-align-deps --write Interactively update supported react-native versions (or bump version used for development): yarn rnx-align-deps --set-version   ","version":"Next","tagName":"h2"},{"title":"--diff-mode​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#--diff-mode","content":" Sets the algorithm used to determine if versions differ.  Valid values:  strict — version strings must be equalallow-subset — allow ranges that are entirely contained by the target version range OK: 0.74.0 is a subset of ^0.74.0OK: ^0.74.0 is a subset of ^0.74.0OK: ^0.74.2 is a subset of ^0.74.0NOT OK: ^0.74.0 is not a subset of 0.74.0  [!WARNING] While algorithms other than strict allow you to use exact version or version range subsets, they will also increase the risk of introducing duplicate packages within your repository. You will have to be more vigilant and rely on tooling (such as yarn dedupe) to reduce the risk.  Default: strict  ","version":"Next","tagName":"h3"},{"title":"--exclude-packages​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#--exclude-packages","content":" Comma-separated list of package names to exclude from inspection.  [!NOTE] --exclude-packages will only exclude packages that do not have a configuration. Packages that have a configuration, will still be checked.  ","version":"Next","tagName":"h3"},{"title":"--init <app | library>​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#--init-app--library","content":" When integrating @rnx-kit/align-deps for the first time, it may be a cumbersome to manually add all capabilities yourself. You can run this tool with--init, and it will try to add a sensible configuration based on what is currently defined in the specified package.json.  ","version":"Next","tagName":"h3"},{"title":"--loose​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#--loose","content":" Determines how strict the React Native version requirement should be. Useful for apps that depend on a newer React Native version than their dependencies declare support for.  Default: false  ","version":"Next","tagName":"h3"},{"title":"--no-unmanaged​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#--no-unmanaged","content":" Whether unmanaged capabilities should be treated as errors.  Default: false  ","version":"Next","tagName":"h3"},{"title":"--presets​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#--presets","content":" Comma-separated list of presets. This can be names to built-in presets, or paths to external presets. Paths can point to a JSON file, a .js file, or a module name. The module must default export an object similar to the one below:  module.exports = { 0.69: { &quot;my-capability&quot;: { name: &quot;my-module&quot;, version: &quot;1.0.0&quot;, }, }, &quot;0.70&quot;: { &quot;my-capability&quot;: { name: &quot;my-module&quot;, version: &quot;1.1.0&quot;, }, }, };   For a more complete example, have a look at thedefault preset.  See Presets for more details.  [!NOTE] This flag is only be considered when a package is not configured. The presets specified in the configuration will always take precedence.  ","version":"Next","tagName":"h3"},{"title":"--requirements​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#--requirements","content":" Comma-separated list of requirements to apply if a package is not configured.  For example, --requirements react-native@0.70 will make sure your packages are compatible with react-native 0.70.  See Requirements for more details.  ","version":"Next","tagName":"h3"},{"title":"--set-version​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#--set-version","content":" Sets production and development react-native version requirements for any configured package. The value should be a comma-separated list of react-nativeversions to set. The first number specifies the development version. For example, --set-version 0.70,0.69 will set the following values:  { &quot;rnx-kit&quot;: { &quot;alignDeps&quot;: { &quot;requirements&quot;: { &quot;development&quot;: [&quot;react-native@0.70&quot;], &quot;production&quot;: [&quot;react-native@0.69 || 0.70&quot;] } } } }   If the version numbers are omitted, an interactive prompt will appear.  [!NOTE] A rnx-align-deps --write run will be invoked right after changes have been made. As such, this flag will fail if changes are needed before making any modifications.  ","version":"Next","tagName":"h3"},{"title":"--verbose​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#--verbose","content":" Specify to increase logging verbosity.  Default: false  ","version":"Next","tagName":"h3"},{"title":"--write​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#--write","content":" Writes all proposed changes to the specified package.json.  Default: false  ","version":"Next","tagName":"h3"},{"title":"Configure​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#configure","content":" While @rnx-kit/align-deps can ensure your dependencies are aligned without a configuration, you can only get the more advanced features, such as dependencies section re-ordering (dependencies vs peerDependencies) and transitive dependency detection (A -&gt; B -&gt; C), by adding a configuration. Your configuration must be in an &quot;rnx-kit&quot; section of your package.json, and have the following shapes depending on the package type:  export type AppConfig = { kitType: &quot;app&quot;; alignDeps: { /** * Presets to use for aligning dependencies. * @default [&quot;microsoft/react-native&quot;] */ presets?: string[]; /** * Requirements for this package, e.g. * `react-native@&gt;=0.70`. */ requirements: string[]; /** * Capabilities used by the kit. */ capabilities: Capability[]; }; }; export type LibraryConfig = { kitType: &quot;library&quot;; alignDeps: { /** * Presets to use for aligning dependencies. * @default [&quot;microsoft/react-native&quot;] */ presets?: string[]; /** * Requirements for this package, e.g. * `react-native@&gt;=0.70`. `development` is for * package authors, and `production` is for * consumers. */ requirements: { development: string[]; production: string[] }; /** * Capabilities used by the kit. */ capabilities: Capability[]; }; };   For example, this is a config for a library that supports react-native 0.69 and 0.70, and uses 0.70 internally:  { &quot;name&quot;: &quot;useful-library&quot;, &quot;version&quot;: &quot;1.0&quot;, ... &quot;rnx-kit&quot;: { &quot;kitType&quot;: &quot;library&quot;, &quot;alignDeps&quot;: { &quot;requirements&quot;: { &quot;development&quot;: [&quot;react-native@0.70&quot;], &quot;production&quot;: [&quot;react-native@0.69 || 0.70&quot;] } &quot;capabilities&quot;: [ &quot;core-android&quot;, &quot;core-ios&quot; ] } } }   ","version":"Next","tagName":"h2"},{"title":"Capabilities​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#capabilities","content":" The following table contains the currently supported capabilities and what they resolve to:  Capabilities Table Capability\t0.79\t0.78\t0.77\t0.76\t0.75\t0.74\t0.73\t0.72\t0.71\t0.70\t0.69\t0.68\t0.67\t0.66\t0.65\t0.64\t0.63\t0.62\t0.61core\treact-native@^0.79.0\treact-native@^0.78.0\treact-native@^0.77.0\treact-native@^0.76.0\treact-native@^0.75.0\treact-native@^0.74.0\treact-native@^0.73.0\treact-native@^0.72.0\treact-native@^0.71.0\treact-native@^0.70.0\treact-native@^0.69.0\treact-native@^0.68.0\treact-native@^0.67.0\treact-native@^0.66.0\treact-native@^0.65.0\treact-native@^0.64.2\treact-native@^0.63.2\treact-native@^0.62.3\treact-native@^0.61.5 core-android\treact-native@^0.79.0\treact-native@^0.78.0\treact-native@^0.77.0\treact-native@^0.76.0\treact-native@^0.75.0\treact-native@^0.74.0\treact-native@^0.73.0\treact-native@^0.72.0\treact-native@^0.71.0\treact-native@^0.70.0\treact-native@^0.69.0\treact-native@^0.68.0\treact-native@^0.67.0\treact-native@^0.66.0\treact-native@^0.65.0\treact-native@^0.64.2\treact-native@^0.63.2\treact-native@^0.62.3\treact-native@^0.61.5 core-ios\treact-native@^0.79.0\treact-native@^0.78.0\treact-native@^0.77.0\treact-native@^0.76.0\treact-native@^0.75.0\treact-native@^0.74.0\treact-native@^0.73.0\treact-native@^0.72.0\treact-native@^0.71.0\treact-native@^0.70.0\treact-native@^0.69.0\treact-native@^0.68.0\treact-native@^0.67.0\treact-native@^0.66.0\treact-native@^0.65.0\treact-native@^0.64.2\treact-native@^0.63.2\treact-native@^0.62.3\treact-native@^0.61.5 core-macos\treact-native-macos@^0.79.0\treact-native-macos@^0.78.0\treact-native-macos@^0.77.0\treact-native-macos@^0.76.0\treact-native-macos@^0.75.0\treact-native-macos@^0.74.0\treact-native-macos@^0.73.0\treact-native-macos@^0.72.0\treact-native-macos@^0.71.0\treact-native-macos@^0.70.0\treact-native-macos@^0.69.0\treact-native-macos@^0.68.0\treact-native-macos@^0.67.0\treact-native-macos@^0.66.0\treact-native-macos@^0.65.0\treact-native-macos@^0.64.0\treact-native-macos@^0.63.0\treact-native-macos@^0.62.0\treact-native-macos@^0.61.0 core-visionos\t@callstack/react-native-visionos@^0.79.0\t@callstack/react-native-visionos@^0.78.0\t@callstack/react-native-visionos@^0.77.0\t@callstack/react-native-visionos@^0.76.0\t@callstack/react-native-visionos@^0.75.0\t@callstack/react-native-visionos@^0.74.0\t@callstack/react-native-visionos@^0.73.0\tMeta package for installing react\tMeta package for installing react\tMeta package for installing react\tMeta package for installing react\tMeta package for installing react\tMeta package for installing react\tMeta package for installing react\tMeta package for installing react\tMeta package for installing react\tMeta package for installing react\tMeta package for installing react\tMeta package for installing react core-windows\treact-native-windows@^0.79.0\treact-native-windows@^0.78.0\treact-native-windows@^0.77.0\treact-native-windows@^0.76.0\treact-native-windows@^0.75.0\treact-native-windows@^0.74.0\treact-native-windows@^0.73.0\treact-native-windows@^0.72.0\treact-native-windows@^0.71.0\treact-native-windows@^0.70.0\treact-native-windows@^0.69.0\treact-native-windows@^0.68.0\treact-native-windows@^0.67.0\treact-native-windows@^0.66.0\treact-native-windows@^0.65.0\treact-native-windows@^0.64.0\treact-native-windows@^0.63.0\treact-native-windows@^0.62.0\treact-native-windows@^0.61.0 animation\treact-native-reanimated@^3.17.0\treact-native-reanimated@^3.17.0\treact-native-reanimated@^3.16.7\treact-native-reanimated@^3.16.1\treact-native-reanimated@^3.15.0\treact-native-reanimated@^3.9.0\treact-native-reanimated@^3.6.0\treact-native-reanimated@^3.3.0\treact-native-reanimated@^2.14.1\treact-native-reanimated@^2.10.0\treact-native-reanimated@^2.9.0\treact-native-reanimated@^2.5.0\treact-native-reanimated@^2.2.4\treact-native-reanimated@^2.2.3\treact-native-reanimated@^2.2.1\treact-native-reanimated@^2.1.0\treact-native-reanimated@^1.13.3\treact-native-reanimated@^1.13.3\treact-native-reanimated@^1.13.3 babel-preset-react-native\t@react-native/babel-preset@^0.79.0\t@react-native/babel-preset@^0.78.0\t@react-native/babel-preset@^0.77.0\t@react-native/babel-preset@^0.76.0\t@react-native/babel-preset@^0.75.0\t@react-native/babel-preset@^0.74.0\t@react-native/babel-preset@^0.73.0\tmetro-react-native-babel-preset@^0.76.5\tmetro-react-native-babel-preset@^0.73.7\tmetro-react-native-babel-preset@^0.72.1\tmetro-react-native-babel-preset@^0.70.3\tmetro-react-native-babel-preset@^0.67.0\tmetro-react-native-babel-preset@^0.66.2\tmetro-react-native-babel-preset@^0.66.2\tmetro-react-native-babel-preset@^0.66.0\tmetro-react-native-babel-preset@^0.64.0\tmetro-react-native-babel-preset@^0.59.0\tmetro-react-native-babel-preset@^0.58.0\tmetro-react-native-babel-preset@^0.56.0 base64\treact-native-base64@^0.2.1\treact-native-base64@^0.2.1\treact-native-base64@^0.2.1\treact-native-base64@^0.2.1\treact-native-base64@^0.2.1\treact-native-base64@^0.2.1\treact-native-base64@^0.2.1\treact-native-base64@^0.2.1\treact-native-base64@^0.2.1\treact-native-base64@^0.2.1\treact-native-base64@^0.2.1\treact-native-base64@^0.2.1\treact-native-base64@^0.2.1\treact-native-base64@^0.2.1\treact-native-base64@^0.2.1\treact-native-base64@^0.2.1\treact-native-base64@^0.2.1\treact-native-base64@^0.2.1\treact-native-base64@^0.2.1 checkbox\t@react-native-community/checkbox@^0.5.15\t@react-native-community/checkbox@^0.5.15\t@react-native-community/checkbox@^0.5.15\t@react-native-community/checkbox@^0.5.15\t@react-native-community/checkbox@^0.5.15\t@react-native-community/checkbox@^0.5.15\t@react-native-community/checkbox@^0.5.15\t@react-native-community/checkbox@^0.5.15\t@react-native-community/checkbox@^0.5.15\t@react-native-community/checkbox@^0.5.8\t@react-native-community/checkbox@^0.5.8\t@react-native-community/checkbox@^0.5.8\t@react-native-community/checkbox@^0.5.8\t@react-native-community/checkbox@^0.5.8\t@react-native-community/checkbox@^0.5.8\t@react-native-community/checkbox@^0.5.8\t@react-native-community/checkbox@^0.5.7\t@react-native-community/checkbox@^0.5.7\t@react-native-community/checkbox@^0.5.7 clipboard\t@react-native-clipboard/clipboard@^1.16.0\t@react-native-clipboard/clipboard@^1.16.0\t@react-native-clipboard/clipboard@^1.16.0\t@react-native-clipboard/clipboard@^1.14.0\t@react-native-clipboard/clipboard@^1.14.0\t@react-native-clipboard/clipboard@^1.14.0\t@react-native-clipboard/clipboard@^1.14.0\t@react-native-clipboard/clipboard@^1.10.0\t@react-native-clipboard/clipboard@^1.10.0\t@react-native-clipboard/clipboard@^1.10.0\t@react-native-clipboard/clipboard@^1.10.0\t@react-native-clipboard/clipboard@^1.10.0\t@react-native-clipboard/clipboard@^1.9.0\t@react-native-clipboard/clipboard@^1.9.0\t@react-native-clipboard/clipboard@^1.9.0\t@react-native-clipboard/clipboard@^1.8.3\t@react-native-community/clipboard@^1.5.1\t@react-native-community/clipboard@^1.5.1\t@react-native-community/clipboard@^1.5.1 community/cli\t@react-native-community/cli@^18.0.0\t@react-native-community/cli@^15.0.1\t@react-native-community/cli@^15.0.1\t@react-native-community/cli@^15.0.1\t@react-native-community/cli@^14.0.0\t@react-native-community/cli@^13.6.4\t@react-native-community/cli@^12.1.1\t@react-native-community/cli@^11.3.2\t@react-native-community/cli@^10.0.0\t@react-native-community/cli@^9.0.0\t@react-native-community/cli@^8.0.4\t@react-native-community/cli@^7.0.3\t@react-native-community/cli@^6.0.0\t@react-native-community/cli@^6.0.0\t@react-native-community/cli@^6.0.0\t@react-native-community/cli@^5.0.1\t@react-native-community/cli@^4.10.0\t@react-native-community/cli@^4.5.1\t@react-native-community/cli@^3.0.0 community/cli-android\t@react-native-community/cli-platform-android@^18.0.0\t@react-native-community/cli-platform-android@^15.0.1\t@react-native-community/cli-platform-android@^15.0.1\t@react-native-community/cli-platform-android@^15.0.1\t@react-native-community/cli-platform-android@^14.0.0\t@react-native-community/cli-platform-android@^13.6.4\t@react-native-community/cli-platform-android@^12.1.1\t@react-native-community/cli-platform-android@^11.3.2\t@react-native-community/cli-platform-android@^10.0.0\t@react-native-community/cli-platform-android@^9.0.0\t@react-native-community/cli-platform-android@^8.0.4\t@react-native-community/cli-platform-android@^7.0.1\t@react-native-community/cli-platform-android@^6.0.0\t@react-native-community/cli-platform-android@^6.0.0\t@react-native-community/cli-platform-android@^6.0.0\t@react-native-community/cli-platform-android@^5.0.1\t@react-native-community/cli-platform-android@^4.10.0\t@react-native-community/cli-platform-android@^4.5.1\t@react-native-community/cli-platform-android@^3.0.0 community/cli-ios\t@react-native-community/cli-platform-ios@^18.0.0\t@react-native-community/cli-platform-ios@^15.0.1\t@react-native-community/cli-platform-ios@^15.0.1\t@react-native-community/cli-platform-ios@^15.0.1\t@react-native-community/cli-platform-ios@^14.0.0\t@react-native-community/cli-platform-ios@^13.6.4\t@react-native-community/cli-platform-ios@^12.1.1\t@react-native-community/cli-platform-ios@^11.3.2\t@react-native-community/cli-platform-ios@^10.0.0\t@react-native-community/cli-platform-ios@^9.0.0\t@react-native-community/cli-platform-ios@^8.0.4\t@react-native-community/cli-platform-ios@^7.0.1\t@react-native-community/cli-platform-ios@^6.0.0\t@react-native-community/cli-platform-ios@^6.0.0\t@react-native-community/cli-platform-ios@^6.0.0\t@react-native-community/cli-platform-ios@^5.0.1\t@react-native-community/cli-platform-ios@^4.10.0\t@react-native-community/cli-platform-ios@^4.5.0\t@react-native-community/cli-platform-ios@^3.0.0 core/metro-config\t@react-native/metro-config@^0.79.0\t@react-native/metro-config@^0.78.0\t@react-native/metro-config@^0.77.0\t@react-native/metro-config@^0.76.0\t@react-native/metro-config@^0.75.0\t@react-native/metro-config@^0.74.0\t@react-native/metro-config@^0.73.0\t@react-native/metro-config@^0.72.0\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t- core/testing\tMeta package for installing core, jest, react-test-renderer\tMeta package for installing core, jest, react-test-renderer\tMeta package for installing core, jest, react-test-renderer\tMeta package for installing core, jest, react-test-renderer\tMeta package for installing core, jest, react-test-renderer\tMeta package for installing core, jest, react-test-renderer\tMeta package for installing core, jest, react-test-renderer\tMeta package for installing core, jest, react-test-renderer\tMeta package for installing core, jest, react-test-renderer\tMeta package for installing core, jest, react-test-renderer\tMeta package for installing core, jest, react-test-renderer\tMeta package for installing core, jest, react-test-renderer\tMeta package for installing core, jest, react-test-renderer\tMeta package for installing core, jest, react-test-renderer\tMeta package for installing core, jest, react-test-renderer\tMeta package for installing core, jest, react-test-renderer\tMeta package for installing core, jest, react-test-renderer\tMeta package for installing core, jest, react-test-renderer\tMeta package for installing core, jest, react-test-renderer datetime-picker\t@react-native-community/datetimepicker@^8.0.0\t@react-native-community/datetimepicker@^8.0.0\t@react-native-community/datetimepicker@^8.0.0\t@react-native-community/datetimepicker@^8.0.0\t@react-native-community/datetimepicker@^8.0.0\t@react-native-community/datetimepicker@^8.0.0\t@react-native-community/datetimepicker@^8.0.0\t@react-native-community/datetimepicker@^7.6.2\t@react-native-community/datetimepicker@^6.4.2\t@react-native-community/datetimepicker@^6.3.3\t@react-native-community/datetimepicker@^6.0.2\t@react-native-community/datetimepicker@^6.0.2\t@react-native-community/datetimepicker@^3.5.2\t@react-native-community/datetimepicker@^3.5.2\t@react-native-community/datetimepicker@^3.5.2\t@react-native-community/datetimepicker@^3.4.6\t@react-native-community/datetimepicker@^3.0.9\t@react-native-community/datetimepicker@^3.0.9\t@react-native-community/datetimepicker@^3.0.9 filesystem\treact-native-fs@^2.18.0\treact-native-fs@^2.18.0\treact-native-fs@^2.18.0\treact-native-fs@^2.18.0\treact-native-fs@^2.18.0\treact-native-fs@^2.18.0\treact-native-fs@^2.18.0\treact-native-fs@^2.18.0\treact-native-fs@^2.18.0\treact-native-fs@^2.18.0\treact-native-fs@^2.18.0\treact-native-fs@^2.18.0\treact-native-fs@^2.18.0\treact-native-fs@^2.18.0\treact-native-fs@^2.18.0\treact-native-fs@^2.17.0\treact-native-fs@^2.16.6\treact-native-fs@^2.16.6\treact-native-fs@^2.16.6 floating-action\treact-native-floating-action@^1.22.0\treact-native-floating-action@^1.22.0\treact-native-floating-action@^1.22.0\treact-native-floating-action@^1.22.0\treact-native-floating-action@^1.22.0\treact-native-floating-action@^1.22.0\treact-native-floating-action@^1.22.0\treact-native-floating-action@^1.22.0\treact-native-floating-action@^1.22.0\treact-native-floating-action@^1.22.0\treact-native-floating-action@^1.22.0\treact-native-floating-action@^1.22.0\treact-native-floating-action@^1.22.0\treact-native-floating-action@^1.22.0\treact-native-floating-action@^1.22.0\treact-native-floating-action@^1.21.0\treact-native-floating-action@^1.21.0\treact-native-floating-action@^1.18.0\treact-native-floating-action@^1.18.0 gestures\treact-native-gesture-handler@^2.24.0\treact-native-gesture-handler@^2.24.0\treact-native-gesture-handler@^2.22.0\treact-native-gesture-handler@^2.20.0\treact-native-gesture-handler@^2.18.1\treact-native-gesture-handler@^2.18.1\treact-native-gesture-handler@^2.14.0\treact-native-gesture-handler@^2.12.0\treact-native-gesture-handler@^2.9.0\treact-native-gesture-handler@^2.6.0\treact-native-gesture-handler@^2.5.0\treact-native-gesture-handler@^2.3.2\treact-native-gesture-handler@^1.10.3\treact-native-gesture-handler@^1.10.3\treact-native-gesture-handler@^1.10.3\treact-native-gesture-handler@^1.10.3\treact-native-gesture-handler@^1.10.3\treact-native-gesture-handler@^1.9.0\treact-native-gesture-handler@^1.9.0 hermes\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\thermes-engine@~0.11.0\thermes-engine@~0.11.0\thermes-engine@~0.9.0\thermes-engine@~0.9.0\thermes-engine@~0.8.1\thermes-engine@~0.7.0\thermes-engine@~0.5.0\thermes-engine@~0.4.0\thermes-engine@^0.2.1 hooks\t@react-native-community/hooks@^100.1.0\t@react-native-community/hooks@^100.1.0\t@react-native-community/hooks@^100.1.0\t@react-native-community/hooks@^2.8.0\t@react-native-community/hooks@^2.8.0\t@react-native-community/hooks@^2.8.0\t@react-native-community/hooks@^2.8.0\t@react-native-community/hooks@^2.8.0\t@react-native-community/hooks@^2.8.0\t@react-native-community/hooks@^2.8.0\t@react-native-community/hooks@^2.8.0\t@react-native-community/hooks@^2.8.0\t@react-native-community/hooks@^2.8.0\t@react-native-community/hooks@^2.8.0\t@react-native-community/hooks@^2.8.0\t@react-native-community/hooks@^2.6.0\t@react-native-community/hooks@^2.6.0\t@react-native-community/hooks@^2.6.0\t@react-native-community/hooks@^2.6.0 html\treact-native-render-html@^6.1.0\treact-native-render-html@^6.1.0\treact-native-render-html@^6.1.0\treact-native-render-html@^6.1.0\treact-native-render-html@^6.1.0\treact-native-render-html@^6.1.0\treact-native-render-html@^6.1.0\treact-native-render-html@^6.1.0\treact-native-render-html@^6.1.0\treact-native-render-html@^6.1.0\treact-native-render-html@^6.1.0\treact-native-render-html@^6.1.0\treact-native-render-html@^6.1.0\treact-native-render-html@^6.1.0\treact-native-render-html@^5.1.1\treact-native-render-html@^5.1.1\treact-native-render-html@^5.1.0\treact-native-render-html@^5.1.0\treact-native-render-html@^5.1.0 jest\tjest@^29.2.1\tjest@^29.2.1\tjest@^29.2.1\tjest@^29.2.1\tjest@^29.2.1\tjest@^29.2.1\tjest@^29.2.1\tjest@^29.2.1\tjest@^29.2.1\tjest@^26.6.3\tjest@^26.6.3\tjest@^26.6.3\tjest@^26.6.3\tjest@^26.6.3\tjest@^26.6.3\tjest@^26.5.2\tjest@^24.9.0\tjest@^24.8.0\tjest@^24.8.0 lazy-index\t@rnx-kit/react-native-lazy-index@^2.1.7\t@rnx-kit/react-native-lazy-index@^2.1.7\t@rnx-kit/react-native-lazy-index@^2.1.7\t@rnx-kit/react-native-lazy-index@^2.1.7\t@rnx-kit/react-native-lazy-index@^2.1.7\t@rnx-kit/react-native-lazy-index@^2.1.7\t@rnx-kit/react-native-lazy-index@^2.1.7\t@rnx-kit/react-native-lazy-index@^2.1.7\t@rnx-kit/react-native-lazy-index@^2.1.7\t@rnx-kit/react-native-lazy-index@^2.1.7\t@rnx-kit/react-native-lazy-index@^2.1.7\t@rnx-kit/react-native-lazy-index@^2.1.7\t@rnx-kit/react-native-lazy-index@^2.1.7\t@rnx-kit/react-native-lazy-index@^2.1.7\treact-native-lazy-index@^2.1.1\treact-native-lazy-index@^2.1.1\treact-native-lazy-index@^2.1.1\treact-native-lazy-index@^2.1.1\treact-native-lazy-index@^2.1.1 masked-view\t@react-native-masked-view/masked-view@^0.3.0\t@react-native-masked-view/masked-view@^0.3.0\t@react-native-masked-view/masked-view@^0.3.0\t@react-native-masked-view/masked-view@^0.3.0\t@react-native-masked-view/masked-view@^0.3.0\t@react-native-masked-view/masked-view@^0.3.0\t@react-native-masked-view/masked-view@^0.3.0\t@react-native-masked-view/masked-view@^0.2.9\t@react-native-masked-view/masked-view@^0.2.9\t@react-native-masked-view/masked-view@^0.2.7\t@react-native-masked-view/masked-view@^0.2.7\t@react-native-masked-view/masked-view@^0.2.6\t@react-native-masked-view/masked-view@^0.2.6\t@react-native-masked-view/masked-view@^0.2.6\t@react-native-masked-view/masked-view@^0.2.6\t@react-native-masked-view/masked-view@^0.2.4\t@react-native-masked-view/masked-view@^0.2.4\t@react-native-masked-view/masked-view@^0.2.4\t@react-native-masked-view/masked-view@^0.2.4 metro\tmetro@^0.82.0\tmetro@^0.81.3\tmetro@^0.81.3\tmetro@^0.81.0\tmetro@^0.80.3\tmetro@^0.80.3\tmetro@^0.80.0\tmetro@^0.76.5\tmetro@^0.73.7\tmetro@^0.72.1\tmetro@^0.70.1\tmetro@^0.67.0\tmetro@^0.66.2\tmetro@^0.66.2\tmetro@^0.66.0\tmetro@^0.64.0\tmetro@^0.59.0\tmetro@^0.58.0\tmetro@^0.56.0 metro-config\tmetro-config@^0.82.0\tmetro-config@^0.81.3\tmetro-config@^0.81.3\tmetro-config@^0.81.0\tmetro-config@^0.80.3\tmetro-config@^0.80.3\tmetro-config@^0.80.0\tmetro-config@^0.76.5\tmetro-config@^0.73.7\tmetro-config@^0.72.1\tmetro-config@^0.70.1\tmetro-config@^0.67.0\tmetro-config@^0.66.2\tmetro-config@^0.66.2\tmetro-config@^0.66.0\tmetro-config@^0.64.0\tmetro-config@^0.59.0\tmetro-config@^0.58.0\tmetro-config@^0.56.0 metro-core\tmetro-core@^0.82.0\tmetro-core@^0.81.3\tmetro-core@^0.81.3\tmetro-core@^0.81.0\tmetro-core@^0.80.3\tmetro-core@^0.80.3\tmetro-core@^0.80.0\tmetro-core@^0.76.5\tmetro-core@^0.73.7\tmetro-core@^0.72.1\tmetro-core@^0.70.1\tmetro-core@^0.67.0\tmetro-core@^0.66.2\tmetro-core@^0.66.2\tmetro-core@^0.66.0\tmetro-core@^0.64.0\tmetro-core@^0.59.0\tmetro-core@^0.58.0\tmetro-core@^0.56.0 metro-react-native-babel-transformer\t@react-native/metro-babel-transformer@^0.79.0\t@react-native/metro-babel-transformer@^0.78.0\t@react-native/metro-babel-transformer@^0.77.0\t@react-native/metro-babel-transformer@^0.76.0\t@react-native/metro-babel-transformer@^0.75.0\t@react-native/metro-babel-transformer@^0.74.0\t@react-native/metro-babel-transformer@^0.73.0\tmetro-react-native-babel-transformer@^0.76.5\tmetro-react-native-babel-transformer@^0.73.7\tmetro-react-native-babel-transformer@^0.72.1\tmetro-react-native-babel-transformer@^0.70.1\tmetro-react-native-babel-transformer@^0.67.0\tmetro-react-native-babel-transformer@^0.66.2\tmetro-react-native-babel-transformer@^0.66.2\tmetro-react-native-babel-transformer@^0.66.0\tmetro-react-native-babel-transformer@^0.64.0\tmetro-react-native-babel-transformer@^0.59.0\tmetro-react-native-babel-transformer@^0.58.0\tmetro-react-native-babel-transformer@^0.56.0 metro-resolver\tmetro-resolver@^0.82.0\tmetro-resolver@^0.81.3\tmetro-resolver@^0.81.3\tmetro-resolver@^0.81.0\tmetro-resolver@^0.80.3\tmetro-resolver@^0.80.3\tmetro-resolver@^0.80.0\tmetro-resolver@^0.76.5\tmetro-resolver@^0.73.7\tmetro-resolver@^0.72.1\tmetro-resolver@^0.70.1\tmetro-resolver@^0.67.0\tmetro-resolver@^0.66.2\tmetro-resolver@^0.66.2\tmetro-resolver@^0.66.0\tmetro-resolver@^0.64.0\tmetro-resolver@^0.59.0\tmetro-resolver@^0.58.0\tmetro-resolver@^0.56.0 metro-runtime\tmetro-runtime@^0.82.0\tmetro-runtime@^0.81.3\tmetro-runtime@^0.81.3\tmetro-runtime@^0.81.0\tmetro-runtime@^0.80.3\tmetro-runtime@^0.80.3\tmetro-runtime@^0.80.0\tmetro-runtime@^0.76.5\tmetro-runtime@^0.73.7\tmetro-runtime@^0.72.1\tmetro-runtime@^0.70.1\tmetro-runtime@^0.67.0\tmetro-runtime@^0.66.2\tmetro-runtime@^0.66.2\tmetro-runtime@^0.66.0\tmetro-runtime@^0.64.0\tmetro-runtime@^0.59.0\tmetro-runtime@^0.58.0\tmetro-runtime@^0.56.0 modal\treact-native-modal@^13.0.0\treact-native-modal@^13.0.0\treact-native-modal@^13.0.0\treact-native-modal@^13.0.0\treact-native-modal@^13.0.0\treact-native-modal@^13.0.0\treact-native-modal@^13.0.0\treact-native-modal@^13.0.0\treact-native-modal@^13.0.0\treact-native-modal@^13.0.0\treact-native-modal@^13.0.0\treact-native-modal@^13.0.0\treact-native-modal@^13.0.0\treact-native-modal@^13.0.0\treact-native-modal@^13.0.0\treact-native-modal@^11.10.0\treact-native-modal@^11.5.6\treact-native-modal@^11.5.6\treact-native-modal@^11.5.6 navigation/native\t@react-navigation/native@^6.0.8\t@react-navigation/native@^6.0.8\t@react-navigation/native@^6.0.8\t@react-navigation/native@^6.0.8\t@react-navigation/native@^6.0.8\t@react-navigation/native@^6.0.8\t@react-navigation/native@^6.0.8\t@react-navigation/native@^6.0.8\t@react-navigation/native@^6.0.8\t@react-navigation/native@^6.0.8\t@react-navigation/native@^6.0.8\t@react-navigation/native@^6.0.8\t@react-navigation/native@^6.0.8\t@react-navigation/native@^6.0.8\t@react-navigation/native@^5.9.8\t@react-navigation/native@^5.9.8\t@react-navigation/native@^5.9.4\t@react-navigation/native@^5.7.6\t@react-navigation/native@^5.7.6 navigation/stack\t@react-navigation/stack@^6.3.21\t@react-navigation/stack@^6.3.21\t@react-navigation/stack@^6.3.21\t@react-navigation/stack@^6.3.21\t@react-navigation/stack@^6.3.21\t@react-navigation/stack@^6.3.21\t@react-navigation/stack@^6.3.21\t@react-navigation/stack@^6.2.0\t@react-navigation/stack@^6.2.0\t@react-navigation/stack@^6.2.0\t@react-navigation/stack@^6.2.0\t@react-navigation/stack@^6.2.0\t@react-navigation/stack@^6.2.0\t@react-navigation/stack@^6.2.0\t@react-navigation/stack@^5.14.9\t@react-navigation/stack@^5.14.9\t@react-navigation/stack@^5.14.4\t@react-navigation/stack@^5.9.3\t@react-navigation/stack@^5.9.3 netinfo\t@react-native-community/netinfo@^11.3.3\t@react-native-community/netinfo@^11.3.3\t@react-native-community/netinfo@^11.3.3\t@react-native-community/netinfo@^11.3.3\t@react-native-community/netinfo@^11.3.3\t@react-native-community/netinfo@^11.3.3\t@react-native-community/netinfo@^11.3.0\t@react-native-community/netinfo@^9.0.0\t@react-native-community/netinfo@^9.0.0\t@react-native-community/netinfo@^9.0.0\t@react-native-community/netinfo@^8.0.0\t@react-native-community/netinfo@^7.0.0\t@react-native-community/netinfo@^7.0.0\t@react-native-community/netinfo@^7.0.0\t@react-native-community/netinfo@^7.0.0\t@react-native-community/netinfo@^6.0.2\t@react-native-community/netinfo@^5.9.10\t@react-native-community/netinfo@^5.9.10\t@react-native-community/netinfo@^5.7.1 popover\treact-native-popover-view@^6.0.1\treact-native-popover-view@^6.0.1\treact-native-popover-view@^6.0.1\treact-native-popover-view@^5.1.8\treact-native-popover-view@^5.1.8\treact-native-popover-view@^5.1.8\treact-native-popover-view@^5.1.8\treact-native-popover-view@^5.1.8\treact-native-popover-view@^5.0.0\treact-native-popover-view@^5.0.0\treact-native-popover-view@^5.0.0\treact-native-popover-view@^4.0.3\treact-native-popover-view@^4.0.3\treact-native-popover-view@^4.0.3\treact-native-popover-view@^4.0.3\treact-native-popover-view@^4.0.3\treact-native-popover-view@^3.1.1\treact-native-popover-view@^3.1.1\treact-native-popover-view@^3.1.1 react\treact@19.0.0\treact@19.0.0\treact@18.3.1\treact@18.3.1\treact@^18.2.0\treact@18.2.0\treact@18.2.0\treact@18.2.0\treact@18.2.0\treact@18.1.0\treact@18.0.0\treact@17.0.2\treact@17.0.2\treact@17.0.2\treact@17.0.2\treact@17.0.1\treact@16.13.1\treact@16.11.0\treact@16.9.0 react-dom\treact-dom@^19.0.0\treact-dom@^19.0.0\treact-dom@^18.3.1\treact-dom@^18.3.1\treact-dom@^18.2.0\treact-dom@^18.2.0\treact-dom@^18.2.0\treact-dom@^18.2.0\treact-dom@^18.2.0\treact-dom@^18.1.0\treact-dom@^18.0.0\treact-dom@17.0.2\treact-dom@17.0.2\treact-dom@17.0.2\treact-dom@17.0.2\treact-dom@17.0.1\treact-dom@16.13.1\treact-dom@16.11.0\treact-dom@16.9.0 react-test-renderer\treact-test-renderer@19.0.0\treact-test-renderer@19.0.0\treact-test-renderer@18.3.1\treact-test-renderer@18.3.1\treact-test-renderer@^18.2.0\treact-test-renderer@18.2.0\treact-test-renderer@18.2.0\treact-test-renderer@18.2.0\treact-test-renderer@18.2.0\treact-test-renderer@18.1.0\treact-test-renderer@18.0.0\treact-test-renderer@17.0.2\treact-test-renderer@17.0.2\treact-test-renderer@17.0.2\treact-test-renderer@17.0.2\treact-test-renderer@17.0.1\treact-test-renderer@16.13.1\treact-test-renderer@16.11.0\treact-test-renderer@16.9.0 safe-area\treact-native-safe-area-context@^5.1.0\treact-native-safe-area-context@^5.1.0\treact-native-safe-area-context@^5.1.0\treact-native-safe-area-context@^4.12.0\treact-native-safe-area-context@^4.10.5\treact-native-safe-area-context@^4.10.5\treact-native-safe-area-context@^4.8.2\treact-native-safe-area-context@&gt;=4.5.3 &lt;4.8\treact-native-safe-area-context@^4.5.1\treact-native-safe-area-context@^4.4.1\treact-native-safe-area-context@^4.3.1\treact-native-safe-area-context@^3.2.0\treact-native-safe-area-context@^3.2.0\treact-native-safe-area-context@^3.2.0\treact-native-safe-area-context@^3.2.0\treact-native-safe-area-context@^3.2.0\treact-native-safe-area-context@^3.2.0\treact-native-safe-area-context@^3.1.9\treact-native-safe-area-context@^3.1.9 screens\treact-native-screens@^4.9.1\treact-native-screens@^4.9.1\treact-native-screens@^4.5.0\treact-native-screens@^3.34.0\treact-native-screens@^3.34.0\treact-native-screens@^3.31.0\treact-native-screens@^3.28.0\treact-native-screens@&gt;=3.21.0 &lt;3.28.0\treact-native-screens@^3.19.0\treact-native-screens@^3.18.2\treact-native-screens@^3.14.1\treact-native-screens@^3.13.1\treact-native-screens@^3.9.0\treact-native-screens@^3.9.0\treact-native-screens@^3.7.0\treact-native-screens@^3.1.1\treact-native-screens@^2.18.1\treact-native-screens@^2.10.1\treact-native-screens@^2.10.1 shimmer\treact-native-shimmer@^0.6.0\treact-native-shimmer@^0.6.0\treact-native-shimmer@^0.6.0\treact-native-shimmer@^0.6.0\treact-native-shimmer@^0.6.0\treact-native-shimmer@^0.6.0\treact-native-shimmer@^0.6.0\treact-native-shimmer@^0.6.0\treact-native-shimmer@^0.6.0\treact-native-shimmer@^0.5.0\treact-native-shimmer@^0.5.0\treact-native-shimmer@^0.5.0\treact-native-shimmer@^0.5.0\treact-native-shimmer@^0.5.0\treact-native-shimmer@^0.5.0\treact-native-shimmer@^0.5.0\treact-native-shimmer@^0.5.0\treact-native-shimmer@^0.5.0\treact-native-shimmer@^0.5.0 sqlite\treact-native-sqlite-storage@^6.0.1\treact-native-sqlite-storage@^6.0.1\treact-native-sqlite-storage@^6.0.1\treact-native-sqlite-storage@^6.0.1\treact-native-sqlite-storage@^6.0.1\treact-native-sqlite-storage@^6.0.1\treact-native-sqlite-storage@^6.0.1\treact-native-sqlite-storage@^6.0.1\treact-native-sqlite-storage@^6.0.1\treact-native-sqlite-storage@^6.0.1\treact-native-sqlite-storage@^6.0.1\treact-native-sqlite-storage@^5.0.0\treact-native-sqlite-storage@^5.0.0\treact-native-sqlite-storage@^5.0.0\treact-native-sqlite-storage@^5.0.0\treact-native-sqlite-storage@^5.0.0\treact-native-sqlite-storage@^3.3.11\treact-native-sqlite-storage@^3.3.11\treact-native-sqlite-storage@^3.3.11 storage\t@react-native-async-storage/async-storage@^2.0.0\t@react-native-async-storage/async-storage@^2.0.0\t@react-native-async-storage/async-storage@^2.0.0\t@react-native-async-storage/async-storage@^2.0.0\t@react-native-async-storage/async-storage@^2.0.0\t@react-native-async-storage/async-storage@^2.0.0\t@react-native-async-storage/async-storage@^1.22.0\t@react-native-async-storage/async-storage@^1.18.2\t@react-native-async-storage/async-storage@^1.17.11\t@react-native-async-storage/async-storage@^1.17.10\t@react-native-async-storage/async-storage@^1.17.7\t@react-native-async-storage/async-storage@^1.17.3\t@react-native-async-storage/async-storage@^1.15.16\t@react-native-async-storage/async-storage@^1.15.9\t@react-native-async-storage/async-storage@^1.15.8\t@react-native-async-storage/async-storage@^1.15.8\t@react-native-community/async-storage@^1.12.1\t@react-native-community/async-storage@^1.12.1\t@react-native-community/async-storage@^1.12.1 svg\treact-native-svg@^15.11.2\treact-native-svg@^15.11.2\treact-native-svg@^15.11.1\treact-native-svg@^15.8.0\treact-native-svg@^15.6.0\treact-native-svg@^15.4.0\treact-native-svg@^15.0.0\treact-native-svg@^13.14.0\treact-native-svg@^13.14.0\treact-native-svg@^12.3.0\treact-native-svg@^12.3.0\treact-native-svg@^12.3.0\treact-native-svg@^12.1.1\treact-native-svg@^12.1.1\treact-native-svg@^12.1.1\treact-native-svg@^12.1.1\treact-native-svg@^12.1.1\treact-native-svg@^12.1.1\treact-native-svg@^12.1.1 test-app\treact-native-test-app@^4.3.1\treact-native-test-app@^4.1.4\treact-native-test-app@^4.0.9\treact-native-test-app@^3.10.18\treact-native-test-app@^3.9.2\treact-native-test-app@^3.9.2\treact-native-test-app@^2.5.34\treact-native-test-app@^2.5.5\treact-native-test-app@^2.2.1\treact-native-test-app@^1.6.9\treact-native-test-app@^1.3.10\treact-native-test-app@^1.3.5\treact-native-test-app@^1.1.7\treact-native-test-app@^1.0.6\treact-native-test-app@^0.11.4\treact-native-test-app@^0.11.4\treact-native-test-app@^0.11.4\treact-native-test-app@^0.11.4\treact-native-test-app@^0.11.4 webview\treact-native-webview@^13.13.1\treact-native-webview@^13.13.1\treact-native-webview@^13.13.1\treact-native-webview@^13.12.2\treact-native-webview@^13.12.2\treact-native-webview@^13.12.2\treact-native-webview@^13.10.0\treact-native-webview@^13.2.2\treact-native-webview@^12.0.2\treact-native-webview@^11.23.0\treact-native-webview@^11.23.0\treact-native-webview@^11.22.6\treact-native-webview@^11.13.0\treact-native-webview@^11.13.0\treact-native-webview@^11.13.0\treact-native-webview@^11.4.2\treact-native-webview@^11.4.2\treact-native-webview@^11.0.3\treact-native-webview@^11.0.3  To add new capabilities, first add it topackages/config/src/kitConfig.ts, then update thepreset. For an example, have a look at how thehermes capability was added.  If you're looking to update capabilities to a more recent version, runyarn update-profile to help determine whether we need to bump any packages.  ","version":"Next","tagName":"h2"},{"title":"Presets​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#presets","content":" A profile is a list of capabilities that map to specific versions of packages. A preset is a collection of such profiles. It can be a JSON file, or a JS file that default exports it. Presets are consumed via the presets key in yourconfiguration, or the --presets flag.  ","version":"Next","tagName":"h2"},{"title":"Extending Built-in Presets​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#extending-built-in-presets","content":" The built-in preset, microsoft/react-native, contains a profile for every supported version of react-native. The profiles are named after every minor release, e.g. 0.69 or 0.70.  To add a new capability, e.g. my-capability, to the built-in profiles 0.69and 0.70, create a custom preset like below:  // my-preset/index.js module.exports = { 0.69: { &quot;my-capability&quot;: { name: &quot;my-module&quot;, version: &quot;1.0.0&quot;, }, }, &quot;0.70&quot;: { &quot;my-capability&quot;: { name: &quot;my-module&quot;, version: &quot;1.1.0&quot;, }, }, };   Then add it to your configuration:   { &quot;name&quot;: &quot;my-package&quot;, ... &quot;rnx-kit&quot;: { &quot;alignDeps&quot;: { &quot;presets&quot;: [ &quot;microsoft/react-native&quot;, + &quot;my-preset&quot; ], &quot;requirements&quot;: [&quot;react-native@0.70&quot;], &quot;capabilities&quot;: [ ... ] } } }   Or if you need to align unconfigured packages, specify--presets microsoft/react-native,my-preset.  Make sure that microsoft/react-native is declared before your custom preset. This will tell align-deps to append capabilities when the profile names match.  You can also use this feature to override capabilities. For instance:  // my-preset/index.js module.exports = { &quot;0.70&quot;: { core: { name: &quot;react-native&quot;, version: &quot;^0.70.3-myCustomFork.1&quot;, }, }, };   With this preset, core will be resolved to your custom fork of react-nativeinstead of the official version.  Note that profile names are only needed when you want to extend or override presets. Otherwise, you can name your profiles whatever you want.  For a complete example of a preset, have a look atmicrosoft/react-native.  ","version":"Next","tagName":"h3"},{"title":"Custom Capabilities​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#custom-capabilities","content":" Normally, a capability resolves to a version of a package. For instance, coreis a capability that resolves to react-native:  { &quot;core&quot;: { name: &quot;react-native&quot;, version: &quot;0.0.0&quot;, }, }   A capability can depend on other capabilities. For example, we can ensure thatreact-native gets installed along with react-native-windows by declaring that core-windows depends on core:  { &quot;core-windows&quot;: { name: &quot;react-native-windows&quot;, version: &quot;0.0.0&quot;, capabilities: [&quot;core&quot;], }, }   You can also create capabilities that don't resolve to a package, but to a list of capabilities instead:  { &quot;core/all&quot;: { name: &quot;#meta&quot;, capabilities: [ &quot;core-android&quot;, &quot;core-ios&quot;, &quot;core-macos&quot;, &quot;core-windows&quot;, ], }, }   We call these meta capabilities. To make it easier to identify them (both for humans and machines), the name field must be set to #meta, and thecapabilities field must be a non-empty array of other capabilities. Theversion field is no longer used and can be dropped. To use a meta capability in your rnx-kit configuration, there's nothing specific to be done — for instance:   { &quot;name&quot;: &quot;my-package&quot;, ... &quot;rnx-kit&quot;: { &quot;alignDeps&quot;: { &quot;presets&quot;: [&quot;microsoft/react-native&quot;, &quot;my-preset&quot;], &quot;requirements&quot;: [&quot;react-native@0.70&quot;], &quot;capabilities&quot;: [ + &quot;core/all&quot; ] } } }   ","version":"Next","tagName":"h3"},{"title":"Requirements​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#requirements","content":" Requirements are what determines which profiles should be used. This is how it roughly works:  The list of presets are loaded and merged into a giant presetFor each profile in the merged preset, check whether they fulfill the requirements Profiles that do not fulfill the requirements are discarded Use the remaining profiles to align the target package  For example, given the following configuration:  { &quot;name&quot;: &quot;useful-library&quot;, &quot;version&quot;: &quot;1.0&quot;, ... &quot;rnx-kit&quot;: { &quot;kitType&quot;: &quot;library&quot;, &quot;alignDeps&quot;: { &quot;requirements&quot;: { &quot;development&quot;: [&quot;react-native@0.70&quot;], &quot;production&quot;: [&quot;react-native@0.69 || 0.70&quot;] } &quot;capabilities&quot;: [ &quot;core-android&quot;, // `core-android` resolves to `react-native` &quot;core-ios&quot; // `core-ios` also resolves to `react-native` ] } } }   microsoft/react-native/0.70 will be used for development since it is the only profile that fulfills the requirement, react-native@0.70. align-deps ensures that react-native is correctly declared under devDependencies.   { &quot;name&quot;: &quot;useful-library&quot;, &quot;version&quot;: &quot;1.0&quot;, + &quot;devDependencies&quot; { + &quot;react-native&quot;: &quot;^0.70.0&quot; + } ... }   For production, there are two profiles that fulfill the requirements,microsoft/react-native/0.69 and microsoft/react-native/0.70. Since this package is a library, align-deps ensures that react-native is correctly declared under peerDependencies:   { &quot;name&quot;: &quot;useful-library&quot;, &quot;version&quot;: &quot;1.0&quot;, + &quot;peerDependencies&quot;: { + &quot;react-native&quot;: &quot;^0.69.0 || ^0.70.0&quot; + }, &quot;devDependencies&quot; { &quot;react-native&quot;: &quot;^0.70.0&quot; } ... }   If the package was an app, align-deps would've ensured that react-native is only declared under dependencies.  You can read more about the usage of the different dependencies sections inDependency Management.  One important thing to note here is that if there are multiple capabilities resolving to the same package, only the first occurrence of the package is checked. To illustrate this scenario, consider the following:  const builtInPreset = { &quot;0.69&quot;: { core: { name: &quot;react-native&quot;, version: &quot;^0.69.0&quot;, }, }, &quot;0.70&quot;: { core: { name: &quot;react-native&quot;, version: &quot;^0.70.0&quot;, }, }, }; const customPreset = { &quot;0.69&quot;: { &quot;custom-capability&quot;: { name: &quot;react-native&quot;, version: &quot;^0.70.0-fork.1&quot;, }, }, }; const megaPreset = mergePresets([builtInPreset, customPreset]); /* { &quot;0.69&quot;: { core: { name: &quot;react-native&quot;, version: &quot;^0.69.0&quot;, }, &quot;custom-capability&quot;: { name: &quot;react-native&quot;, version: &quot;^0.70.0-fork.1&quot;, }, }, &quot;0.70&quot;: { core: { name: &quot;react-native&quot;, version: &quot;^0.70.0&quot;, }, }, } */ const filteredPreset = filterPreset(megaPreset, [&quot;react-native@0.70&quot;]); /* ??? */   If filterPreset checked all capabilities in the profiles, it would return both0.69 and 0.70 here because custom-capability would satisfyreact-native@0.70. This is unexpected behaviour. Instead, align-deps looks for the first package matching the name and then checks whether it fulfills the requirement. With this algorithm, only 0.70 is returned.  ","version":"Next","tagName":"h2"},{"title":"Migrating From dep-check​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#migrating-from-dep-check","content":" Changes from dep-check to align-deps mostly surrounds the configuration schema, and renaming of a couple of flags:  In most cases, your old configuration will still work as before. align-depswill tell you how to convert the old config, but you can also specify--migrate-config to let align-deps do it for you. The following flags were renamed: Old\tNew--custom-profiles\t--presets --exclude-packages\tno change --init\tno change --vigilant\t--requirements --set-version\tno change --write\tno change Because the new config schema no longer relies on profile names to determine a profile, we had to drop support for declaring capabilities at the root level because we cannot reliably detect whether an entry is a package or a profile. You will have to add those capabilities to all the profiles you want them added to.  ","version":"Next","tagName":"h2"},{"title":"Terminology​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#terminology","content":" Terminology\tDefinition (as used in align-deps's context)capability\tA capability is in essence a feature that the kit uses. A capability is usually mapped to an npm package. Which versions of the package is determined by a profile (see below). package manifest\tThis normally refers to a package's package.json. preset\tA collection of profiles. profile\tA profile is a mapping of capabilities to npm packages at a specific version or version range.  ","version":"Next","tagName":"h2"},{"title":"Contribution​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#contribution","content":" ","version":"Next","tagName":"h2"},{"title":"Updating an Existing Profile​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#updating-an-existing-profile","content":" Updating an existing profile is unfortunately a manual process.  We have a script that fetches the latest version of all capabilities and presents them in a table together with the current versions.  yarn update-profile   Outputs something like:  | Capability | Name | Version | Latest | Homepage | | ------------ | ------------- | --------- | ------ | ----------------------------------------------- | | core | react-native | ^0.68.0-0 | 0.68.2 | https://github.com/facebook/react-native#readme | | core-android | react-native | ^0.68.0-0 | 0.68.2 | https://github.com/facebook/react-native#readme | | core-ios | react-native | ^0.68.0-0 | 0.68.2 | https://github.com/facebook/react-native#readme | | hermes | hermes-engine | ~0.11.0 | = | | | react | react | 17.0.2 | 18.1.0 | https://reactjs.org/ | | ... |   With this information, we can see which packages have been updated since the last profile, and scan their change logs for interesting changes that may affect compatibility.  ","version":"Next","tagName":"h3"},{"title":"Adding a Profile for a New Version of react-native​","type":1,"pageTitle":"align-deps","url":"/rnx-kit/docs/tools/align-deps#adding-a-profile-for-a-new-version-of-react-native","content":" The update-profile script can also be used to add a profile. For instance, to add a profile for react-native 0.69, run:  yarn update-profile 0.69   The script will try to figure out what version of react, metro, etc. should be set to, and write to src/presets/microsoft/react-native/profile-0.69.ts. Please verify that this profile looks correct before checking it in. ","version":"Next","tagName":"h3"},{"title":"metro-serializer-esbuild","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/metro-serializer-esbuild","content":"","keywords":"","version":"Next"},{"title":"Motivation​","type":1,"pageTitle":"metro-serializer-esbuild","url":"/rnx-kit/docs/tools/metro-serializer-esbuild#motivation","content":" Metro currently does not implement tree shaking, i.e. it does not attempt to remove unused code from the JS bundle. For instance, given this code snippet:  import { partition } from &quot;lodash&quot;;   Metro will bundle all of lodash in your bundle even though you're only using a small part of it. In lodash's case, you can addbabel-plugin-lodash to your Babel config to help Metro strip away some modules, but not all libraries will come with such helpers. For more details, see issues#227 and#632.  metro-serializer-esbuild addresses this by letting esbuild take over bundling.  ","version":"Next","tagName":"h2"},{"title":"Requirements​","type":1,"pageTitle":"metro-serializer-esbuild","url":"/rnx-kit/docs/tools/metro-serializer-esbuild#requirements","content":" This plugin currently depends on some unstable features introduced in Metro0.66.1. Breaking changes were introduced in Metro 0.60, so this plugin will not work with React Native below 0.64.  ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"metro-serializer-esbuild","url":"/rnx-kit/docs/tools/metro-serializer-esbuild#usage","content":" esbuild works best when we pass it ES6 modules. The first thing we must do is to disable import/export transformation by enabling disableImportExportTransformin babel.config.js:  +const env = process.env.BABEL_ENV || process.env.NODE_ENV; module.exports = { presets: [ [ &quot;module:metro-react-native-babel-preset&quot;, + { + disableImportExportTransform: + env === &quot;production&quot; &amp;&amp; process.env[&quot;RNX_METRO_SERIALIZER_ESBUILD&quot;], + }, ], ], };   To avoid issues with dev server, we only want to enabledisableImportExportTransform when bundling for production.  If you're using @rnx-kit/babel-preset-metro-react-native, you don't need to make any changes.  Note that Hermes currently does not fully implement theES6 spec. esbuild, on the other hand, does not fully supportlowering to ES5. This essentially means that you may have to add additional plugins if you're seeing esbuild outputting &quot;target environment is not supported yet&quot; errors during bundle. For an example, see the error and its solution in#1743.  Next, configure Metro to use the esbuild serializer by making the following changes to metro.config.js:   const { makeMetroConfig } = require(&quot;@rnx-kit/metro-config&quot;); +const { + MetroSerializer, + esbuildTransformerConfig, +} = require(&quot;@rnx-kit/metro-serializer-esbuild&quot;); module.exports = makeMetroConfig({ serializer: { + customSerializer: MetroSerializer(), }, + transformer: esbuildTransformerConfig, });   Note that esbuildTransformerConfig is incompatible with dev server and debug builds. It should only be set when bundling for production.  We can now create a bundle as usual, e.g.:  react-native bundle --entry-file index.js --platform ios --dev false ...   ","version":"Next","tagName":"h2"},{"title":"Options​","type":1,"pageTitle":"metro-serializer-esbuild","url":"/rnx-kit/docs/tools/metro-serializer-esbuild#options","content":" Similar tometro-serializer,metro-serializer-esbuild also supports plugins. Additionally, you can configure the output of the plugin by passing an options object as the second parameter. For instance, to output ES6 compliant code, set the target option:   const myPlugins = [...]; module.exports = makeMetroConfig({ serializer: { customSerializer: MetroSerializer(myPlugins, { + target: &quot;es6&quot; }), }, transformer: esbuildTransformerConfig, });   Below are all the currently supported options.  ","version":"Next","tagName":"h2"},{"title":"target​","type":1,"pageTitle":"metro-serializer-esbuild","url":"/rnx-kit/docs/tools/metro-serializer-esbuild#target","content":" Sets the target environment for the transpiled JavaScript code.  See the full documentation at https://esbuild.github.io/api/#target.  Values: Any JS language version string such as es6 or esnext. You can also use environment names. See the full documentation for a list of supported names.  Defaults to hermes0.7.0.  ","version":"Next","tagName":"h3"},{"title":"fabric​","type":1,"pageTitle":"metro-serializer-esbuild","url":"/rnx-kit/docs/tools/metro-serializer-esbuild#fabric","content":" When enabled, includes Fabric-enabled version of React. You can save some bytes by disabling this if you haven't migrated to Fabric yet.  Defaults to true.  ","version":"Next","tagName":"h3"},{"title":"drop​","type":1,"pageTitle":"metro-serializer-esbuild","url":"/rnx-kit/docs/tools/metro-serializer-esbuild#drop","content":" Tells esbuild to edit your source code before building to drop certain constructs. There are currently two possible things that can be dropped:debugger and console.  See the full documentation at https://esbuild.github.io/api/#drop.  By default, this option is not set.  ","version":"Next","tagName":"h3"},{"title":"minify​","type":1,"pageTitle":"metro-serializer-esbuild","url":"/rnx-kit/docs/tools/metro-serializer-esbuild#minify","content":" When enabled, the generated code will be minified instead of pretty-printed.  See the full documentation at https://esbuild.github.io/api/#minify.  Defaults to true in production environment; false otherwise.  ","version":"Next","tagName":"h3"},{"title":"minifyWhitespace​","type":1,"pageTitle":"metro-serializer-esbuild","url":"/rnx-kit/docs/tools/metro-serializer-esbuild#minifywhitespace","content":" Same as minify but only removes whitespace.  See the full documentation at https://esbuild.github.io/api/#minify.  By default, this option is not set.  ","version":"Next","tagName":"h3"},{"title":"minifyIdentifiers​","type":1,"pageTitle":"metro-serializer-esbuild","url":"/rnx-kit/docs/tools/metro-serializer-esbuild#minifyidentifiers","content":" Same as minify but only renames local variables to be shorter.  See the full documentation at https://esbuild.github.io/api/#minify.  By default, this option is not set.  ","version":"Next","tagName":"h3"},{"title":"minifySyntax​","type":1,"pageTitle":"metro-serializer-esbuild","url":"/rnx-kit/docs/tools/metro-serializer-esbuild#minifysyntax","content":" Same as minify but only rewrites syntax to be more compact.  See the full documentation at https://esbuild.github.io/api/#minify.  By default, this option is not set.  ","version":"Next","tagName":"h3"},{"title":"pure​","type":1,"pageTitle":"metro-serializer-esbuild","url":"/rnx-kit/docs/tools/metro-serializer-esbuild#pure","content":" Add /* @__PURE__ */ annotation to the specified new or call expressions. This tells esbuild they can be removed if the resulting value is unused.  See the full documentation at https://esbuild.github.io/api/#pure.  By default, this option is not set.  ","version":"Next","tagName":"h3"},{"title":"sourceMapPaths​","type":1,"pageTitle":"metro-serializer-esbuild","url":"/rnx-kit/docs/tools/metro-serializer-esbuild#sourcemappaths","content":" Determines whether paths in the output source map are absolute or relative to the directory containing the source map.  Values: absolute | relative  Defaults to relative.  ","version":"Next","tagName":"h3"},{"title":"strictMode​","type":1,"pageTitle":"metro-serializer-esbuild","url":"/rnx-kit/docs/tools/metro-serializer-esbuild#strictmode","content":" By default, the &quot;use strict&quot;; directive is added by Babel and esbuild when lowering to ES5. You can save some bytes by telling this serializer to strip them from the bundle.  Note that disabling strictMode here will definitely break source maps. It is recommended to try disabling strict mode in Babel or TypeScript first before considering this option. If you can target ES6, that is a better alternative.  This flag only affects production environment.  Defaults to true.  ","version":"Next","tagName":"h3"},{"title":"analyze​","type":1,"pageTitle":"metro-serializer-esbuild","url":"/rnx-kit/docs/tools/metro-serializer-esbuild#analyze","content":" Sets whether esbuild should output a report at the end of bundling.  See the full documentation at https://esbuild.github.io/api/#analyze.  Values: false | true | verbose  Defaults to false.  ","version":"Next","tagName":"h3"},{"title":"logLevel​","type":1,"pageTitle":"metro-serializer-esbuild","url":"/rnx-kit/docs/tools/metro-serializer-esbuild#loglevel","content":" The log level passed to esbuild.  See the full documentation at https://esbuild.github.io/api/#log-level  Values: verbose | debug | info | warning | error | silent  Defaults to warning.  ","version":"Next","tagName":"h3"},{"title":"metafile​","type":1,"pageTitle":"metro-serializer-esbuild","url":"/rnx-kit/docs/tools/metro-serializer-esbuild#metafile","content":" The path to write metadata to, relative to the package root.  Determines whether esbuild should produce some metadata about the build in JSON format.  See the full documentation at https://esbuild.github.io/api/#metafile.  ","version":"Next","tagName":"h3"},{"title":"Metro + ESM Support​","type":1,"pageTitle":"metro-serializer-esbuild","url":"/rnx-kit/docs/tools/metro-serializer-esbuild#metro--esm-support","content":" Metro currently does not support ESM. However, if you're looking to save even more bytes, and are comfortable with solving CJS vs ESM resolution issues, you can try adding module toresolver.resolverMainFieldsin metro.config.js. This will tell Metro to always pick ESM over CJS when possible. Note that this can lead to unexpected errors since you cannot import ESM from CJS. Until https://github.com/facebook/metro/issues/670 lands, you are basically on your own to fix any issues that might come up.  ","version":"Next","tagName":"h2"},{"title":"Known Limitations​","type":1,"pageTitle":"metro-serializer-esbuild","url":"/rnx-kit/docs/tools/metro-serializer-esbuild#known-limitations","content":" Dev server does not play well with esbuildTransformerConfig. To work around this limitation, you can save the esbuild specific Metro config to a separate file and only specify it when needed, e.g.: react-native bundle ... --config metro+esbuild.config.js esbuild does not properly tree-shake export *. This is a known limitation (see https://github.com/evanw/esbuild/issues/1420). It is also not recommended to use export * in your code as they may lead to duplicate exports. For more details, read https://hackmd.io/Z021hgSGStKlYLwsqNMOcg. This can be mitigated with an ESLint rule, such as no-export-all from@rnx-kit/eslint-plugin.esbuild is incompatible withRAM bundle. If you require RAM bundles, you cannot use this serializer. In fact, Metro will simply ignore it. ","version":"Next","tagName":"h2"},{"title":"Tools Overview","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/overview","content":"Tools Overview This area documents each tool in detail. You'll get a description of each tool and its purpose. You'll see example code and configuration. And you'll see API documentation, useful for integrating the tool into your own repo. Each tool is designed to be used on its own or in concert with others. How you use the tools depends on your needs. The CLI, for example, brings many tools together to perform common React Native developer tasks like bundling or managing dependencies. Individual tools help you solve specific problem, likemaking Metro work with symlinks. If you get stuck or notice that something is missing, take a look at theCommunity area. You'll find talks, podcasts, recorded streaming sessions, and other materials that may help you out. You'll also find links to the developer community where you can ask questions and get help.","keywords":"","version":"Next"},{"title":"react-native-auth","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/react-native-auth","content":"","keywords":"","version":"Next"},{"title":"Install​","type":1,"pageTitle":"react-native-auth","url":"/rnx-kit/docs/tools/react-native-auth#install","content":" Add the dependency to your project:  npm add @rnx-kit/react-native-auth   If you're using a different manager, swap out npm with your package manager of choice.  ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"react-native-auth","url":"/rnx-kit/docs/tools/react-native-auth#usage","content":" import { acquireTokenWithScopes, isAvailable, } from &quot;@rnx-kit/react-native-auth&quot;; const scopes = [&quot;user.read&quot;]; const userPrincipalName = &quot;arnold@contoso.com&quot;; if (isAvailable()) { const result = await acquireTokenWithScopes( scopes, userPrincipalName, &quot;MicrosoftAccount&quot; ); } else { // Use an alternate authentication method }   Category\tType Name\tDescriptiontypes\tAccountType\tAccount types. Current valid types are Microsoft accounts (or MSA) and organizational (M365), but can be extended to support other types, e.g. Apple, Google, etc. types\tAuthErrorAndroid\tThe authentication error object contains a stack trace on Android. types\tAuthErrorIOS\tThe authentication error object contains a stack trace on iOS. types\tAuthErrorNative\tThe authentication error object. May contain a native stack trace. types\tAuthErrorType\tThe type of error that occurred during authentication. types\tAuthErrorUserInfo\tAuthentication error details provided by the underlying implementation. This object can be used to provide the inner exception, or a more user friendly error message. types\tAuthResult\tAuthentication result returned on success.  Category\tFunction\tDescription-\tacquireTokenWithResource(resource, userPrincipalName, accountType)\tAcquires a token for a resource. -\tacquireTokenWithScopes(scopes, userPrincipalName, accountType)\tAcquires a token with specified scopes. -\tisAvailable()\tReturns whether this module is available.  ","version":"Next","tagName":"h2"},{"title":"Motivation​","type":1,"pageTitle":"react-native-auth","url":"/rnx-kit/docs/tools/react-native-auth#motivation","content":" Many features we build require authentication. The tricky thing about authentication in brownfield apps (i.e. a native app hosting a React Native instance) is that we want to reuse the auth code that the hosting app already has to access the keychain and enable single sign-on. This excludes the use of most React Native auth libraries out there since they are more geared towards standalone use. Additionally, all apps implement this in different ways, so most feature teams implement their own solution for providing access tokens to their features during the development loop, or they rely on their hosting app to provide such a solution. Solutions are often custom-made for the current app and cannot be shared with others without significant effort. They will also have to duplicate this effort when integrating into other apps.  This module aims to define a standard way to acquire access tokens so that React Native feature authors no longer have to care about the underlying implementations. The idea is that by abstracting away the implementation details, React Native features can more easily be integrated into any app that provides an implementation of this module, without having to duplicate the effort of others. ","version":"Next","tagName":"h2"},{"title":"tools-android","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/tools-android","content":"tools-android @rnx-kit/tools-android is a collection of functions for deploying apps on Android. Usage: import * as tools from &quot;@rnx-kit/tools-android&quot;; Category\tFunction\tDescriptionapk\tgetPackageName(apk)\tReturns the package name and the first launchable activity of the specified APK. apk\tinstall(device, apk, packageName)\tInstalls the specified APK on specified emulator or physical device. apk\tstart(options, packageName, activityName)\tStarts the specified activity on specified emulator or physical device. device\tgetDevices()\tReturns a list of attached physical Android devices. device\tgetEmulators()\tReturns a list of available Android virtual devices. device\tlaunchEmulator(emulatorName)\tLaunches the emulator with the specified name. device\tselectDevice(emulatorName, logger)\tReturns the emulator or physical device with the specified name. gradle\tassemble(projectDir, buildParams)\tInvokes Gradle build. gradle\tfindOutputFile(projectDir, buildConfiguration)\tTries to find Gradle build output file. sdk\tgetBuildToolsPath()\tReturns the path to Android SDK Build-Tools.","keywords":"","version":"Next"},{"title":"tools-apple","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/tools-apple","content":"tools-apple @rnx-kit/tools-apple is a collection of functions for deploying apps on iOS or macOS. Usage: import * as tools from &quot;@rnx-kit/tools-apple&quot;; Category\tFunction\tDescriptioncocoapods\tcheckPodsManifestLock(xcworkspace)\tReturns whether the CocoaPods sandbox is in sync with its Podfile.lock. ios\tbootSimulator(simulator)\tBoots the simulator with the specified UDID. ios\tgetAvailableSimulators(search)\tReturns a list of available iOS simulators. ios\tgetDevices()\tReturns a list of available iOS simulators and physical devices. ios\tinstall(device, app)\tInstalls the specified app bundle on specified simulator or physical device. ios\tlaunch(device, app)\tLaunches the specified app bundle on specified simulator or physical device. ios\tselectDevice(deviceNameOrPlatformIdentifier, deviceType, logger)\tReturns the simulator or physical device with the specified name. xcode\tgetBuildSettings(xcworkspace, params)\tReturns build settings for specified Xcode workspace and the parameters used to build it. xcode\tgetDeveloperDirectory()\tReturns the path to the active developer directory. xcode\tgetDevicePlatformIdentifier(buildParams)\tReturns device platform identifier for specified platform and destination. xcode\tparsePlist(app)\tParses and returns the information property list of specified bundle. xcode\txcodebuild(xcworkspace, params, log)\tBuilds the specified .xcworkspace.","keywords":"","version":"Next"},{"title":"tools-language","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/tools-language","content":"tools-language @rnx-kit/tools-language is a collection of supplemental JavaScript functions and types. You can import the entire package, or, to save space, import individual categories: import * as tools from &quot;@rnx-kit/tools-language&quot;; Category\tFunction\tDescriptionproperties\thasProperty(obj, property)\tReturns whether property exists in obj. properties\tkeysOf(obj)\tReturns the names of the enumerable string properties of an object. Equivalent to calling Object.keys(), but type safe. properties\tpickValues(obj, keys, names)\tPick the value for each key property from obj and return each one in a new object. If names are given, use them in the new object, instead of keys.","keywords":"","version":"Next"},{"title":"third-party-notices","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/third-party-notices","content":"","keywords":"","version":"Next"},{"title":"Usage​","type":1,"pageTitle":"third-party-notices","url":"/rnx-kit/docs/tools/third-party-notices#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Commandline​","type":1,"pageTitle":"third-party-notices","url":"/rnx-kit/docs/tools/third-party-notices#commandline","content":" npx @rnx-kit/third-party-notices \\ --rootPath &lt;myPackage&gt; \\ --sourceMapFile &lt;myPackage/dist/myPackage.js.map&gt;   Options: --help Show help [boolean] --version Show version number [boolean] --rootPath The root of the repo where to start resolving modules from. [string] [required] --sourceMapFile The sourceMap file to generate license contents for. [string] [required] --json Output license information as a JSON [boolean] [default: false] --outputFile The output file to write the license file to. [string] --ignoreScopes Npm scopes to ignore and not emit license information for [array] --ignoreModules Modules (js packages) to not emit license information for [array] --preambleText A list of lines to prepend at the start of the generated license file. [array] --additionalText A list of lines to append at the end of the generated license file. [array] --fullLicenseText Include full license text in the JSON output [boolean] [default: false]   ","version":"Next","tagName":"h3"},{"title":"As a library​","type":1,"pageTitle":"third-party-notices","url":"/rnx-kit/docs/tools/third-party-notices#as-a-library","content":" import { writeThirdPartyNotices } from &quot;@rnx-kit/third-party-notices&quot;; writeThirdPartyNotices({ rootPath: &quot;.&quot;, sourceMapFile: &quot;./dist/myPackage.js.map&quot;, });   ","version":"Next","tagName":"h3"},{"title":"As a plugin​","type":1,"pageTitle":"third-party-notices","url":"/rnx-kit/docs/tools/third-party-notices#as-a-plugin","content":" Import and add the plugin to ThirdPartyNotices in your metro.config.js, and optionally configure it to your liking:   const { makeMetroConfig } = require(&quot;@rnx-kit/metro-config&quot;); +const { ThirdPartyNotices } = require(&quot;@rnx-kit/third-party-notices&quot;); +const { MetroSerializer } = require(&quot;@rnx-kit/metro-serializer&quot;); module.exports = makeMetroConfig({ serializer: { + customSerializer: MetroSerializer([ + ThirdPartyNotices(), + ]), }, });  ","version":"Next","tagName":"h3"},{"title":"tools-node","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/tools-node","content":"tools-node @rnx-kit/tools-node is a collection of supplemental NodeJS functions and types. You can import the entire package, or, to save space, import individual categories: import * as tools from &quot;@rnx-kit/tools-node&quot;; // Alternatively... import * as moduleTools from &quot;@rnx-kit/tools-node/module&quot;; import * as packageTools from &quot;@rnx-kit/tools-node/package&quot;; import * as pathTools from &quot;@rnx-kit/tools-node/path&quot;; Category\tType Name\tDescriptionmodule\tFileModuleRef\tModule reference rooted to a file system location, either relative to a directory, or as an absolute path. For example, ./index or /repos/rnx-kit/packages/tools/src/index. module\tPackageModuleRef\tModule reference relative to a package, such as react-native or @rnx-kit/tools/node/index. package\tDestructuredModuleRef\tModule reference with the package name and optional sub-module path included as path package\tFindPackageDependencyOptions\tOptions which control how package dependecies are located. package\tPackageManifest\tSchema for the contents of a package.json manifest file. package\tPackagePerson\tSchema for a reference to a person in package.json. package\tPackageRef\tComponents of a package reference.Category\tFunction\tDescriptionmodule\tgetPackageModuleRefFromModulePath(modulePath)\tConvert a module path to a package module reference. module\tisFileModuleRef(r)\tIs the module reference relative to a file location? module\tisPackageModuleRef(r)\tIs the module reference a package module reference? module\tparseModuleRef(r)\tParse a module reference into either a package module reference or a file module reference. If there are any sub-paths, they are returned in paths. package\tdestructureModuleRef(r)\tDestructure a module reference into its component par package\tfindPackage(startDir)\tFind the nearest package.json manifest file. Search upward through all parent directories. package\tfindPackageDependencyDir(ref, options)\tFind the package dependency's directory, starting from the given directory and moving outward, through all parent directories. package\tfindPackageDir(startDir)\tFind the parent directory of the nearest package.json manifest file. Search upward through all parent directories. package\tparsePackageRef(r)\tParse a package reference string. An example reference is the name property found in package.json. package\treadPackage(pkgPath)\tRead a package.json manifest from a file. package\tresolveDependencyChain(chain, startDir)\tResolve the path to a dependency given a chain of dependencies leading up to it. package\twritePackage(pkgPath, manifest, space)\tWrite a package.json manifest to a file. path\tfindUp(names, options)\tFinds the specified file(s) or directory(s) by walking up parent directories. path\tnormalizePath(p)\tNormalize the separators in a path, converting each backslash ('\\') to a foreward slash ('/').","keywords":"","version":"Next"},{"title":"tools-packages","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/tools-packages","content":"","keywords":"","version":"Next"},{"title":"Motivation​","type":1,"pageTitle":"tools-packages","url":"/rnx-kit/docs/tools/tools-packages#motivation","content":" While loading package.json is pretty quick, this can quickly end up being a redundant operation as there different packages in rnx-kit all need different information from the file. This adds a simple caching layer for retrieving packages so work is not done multiple times.  The packages can also have custom accessors defined that allow storing of additional data in the PackageInfo and because of that, associated with that package in the cache. This might be loading the KitConfig parsing and validating a tsconfig.json file. This package doesn't need to care what is being stored, other packages can add their custom accessors as needed.  ","version":"Next","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"tools-packages","url":"/rnx-kit/docs/tools/tools-packages#installation","content":" yarn add @rnx-kit/tools-packages --dev   or if you're using npm  npm add --save-dev @rnx-kit/tools-packages   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"tools-packages","url":"/rnx-kit/docs/tools/tools-packages#usage","content":" There are two main parts of this package, helpers for retrieving package info and helpers for accessors.  ","version":"Next","tagName":"h2"},{"title":"Types​","type":1,"pageTitle":"tools-packages","url":"/rnx-kit/docs/tools/tools-packages#types","content":" Type Name\tDescriptionPlatformInfo\tMain returned type for the module. This contains information about the package name, root package path, the loaded package.json in Manifest form, whether or not the package is a workspace, as well as a symbol based index signature for attaching additional information to the type. GetPackageValue&lt;T&gt;\tFormat for a value accessor, used when creating accessors that only need to be loaded once. PackageValueAccessors&lt;T&gt;\tTyped has/get/set methods to access values attached to the PackageInfo when they may be updated.  ","version":"Next","tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"tools-packages","url":"/rnx-kit/docs/tools/tools-packages#functions","content":" Function\tDescriptiongetPackageInfoFromPath\tGiven a path to either the root folder of a package, or the package.json for that package, return a loaded PackageInfo for that package. This will attempt to look up the package in the cache, loading it if not found. It will throw an exception on an invalid path. getPackageInfoFromWorkspaces\tTry to retrieve a PackageInfo by name. This only works for in-workspace packages as module resolution outside of that scope is more complicated. Note that by default this only finds packages previously cached. If the optional boolean parameter is set to true, in the case that the package is not found, all workspaces will be loaded into the cache. This can be expensive though it is a one time cost. getRootPackageInfo\tGet the package info for the root of the workspaces createPackageValueLoader&lt;T&gt;\tCreate a function which retrieves a cached value from PackageInfo calling the initializer function if it hasn't been loaded yet. This creates an internal symbol for to make the access unique with the supplied friendly name to make debugging easier. createPackageValueAccessors\tCreate three typed functions matching the has/get/set signature associated with a new and contained symbol. This is for accessors that may need to change over time. ","version":"Next","tagName":"h3"},{"title":"tools-react-native","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/tools-react-native","content":"tools-react-native @rnx-kit/tools-react-native is a collection of supplemental react-native functions and types. You can import the entire package, or, to save space, import individual categories: import * as tools from &quot;@rnx-kit/tools-react-native&quot;; // Alternatively... import * as metroTools from &quot;@rnx-kit/tools-react-native/metro&quot;; import * as platformTools from &quot;@rnx-kit/tools-react-native/platform&quot;; Category\tType Name\tDescriptionplatform\tAllPlatforms\tList of supported react-native platforms.Category\tFunction\tDescriptioncontext\tloadContext(projectRoot)\tEquivalent to calling loadConfig() from @react-native-community/cli, but the result is cached for faster subsequent accesses. context\tloadContextAsync(projectRoot)\tEquivalent to calling loadConfigAsync() (with fallback to loadConfig()) from @react-native-community/cli, but the result is cached for faster subsequent accesses. context\tresolveCommunityCLI(root, reactNativePath)\tFinds path to @react-native-community/cli. metro\tfindMetroPath(projectRoot)\tFinds the installation path of Metro. metro\tgetMetroVersion(projectRoot)\tReturns Metro version number. metro\trequireModuleFromMetro(moduleName, fromDir)\tImports specified module starting from the installation directory of the currently used metro version. platform\texpandPlatformExtensions(platform, extensions)\tReturns a list of extensions that should be tried for the target platform in prioritized order. platform\tgetAvailablePlatforms(startDir)\tReturns a map of available React Native platforms. The result is cached. platform\tgetAvailablePlatformsUncached(startDir, platformMap)\tReturns a map of available React Native platforms. The result is NOT cached. platform\tgetModuleSuffixes(platform, appendEmpty)\tGet the module suffixes array for a given platform, suitable for use with TypeScript's moduleSuffixes setting in the form of ['.ios', '.native', ''] or ['.windows', '.win', '.native', ''] or similar platform\tparsePlatform(val)\tParse a string to ensure it maps to a valid react-native platform. platform\tplatformExtensions(platform)\tReturns file extensions that can be mapped to the target platform. platform\tplatformValues() platform\ttryParsePlatform(val)\t","keywords":"","version":"Next"},{"title":"tools-windows","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/tools-windows","content":"tools-windows @rnx-kit/tools-windows is a collection of functions for deploying apps on Windows. Usage: import * as tools from &quot;@rnx-kit/tools-windows&quot;; Category\tFunction\tDescription-\tgetPackageInfo(app)\tReturns information about the app package at specified path. -\tinstall(app, tryUninstall)\tInstalls the app package at specified path, and returns its identifier. -\tstart(packageId)\tStarts the app with specified identifier.","keywords":"","version":"Next"},{"title":"react-native-host","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/react-native-host","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"react-native-host","url":"/rnx-kit/docs/tools/react-native-host#installation","content":" yarn add @rnx-kit/react-native-host --dev   or if you're using npm  npm add --save-dev @rnx-kit/react-native-host   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"react-native-host","url":"/rnx-kit/docs/tools/react-native-host#usage","content":" ","version":"Next","tagName":"h2"},{"title":"iOS/macOS​","type":1,"pageTitle":"react-native-host","url":"/rnx-kit/docs/tools/react-native-host#iosmacos","content":" [!NOTE] For a working example how to use this library for iOS/macOS, seereact-native-test-app.  To avoid accidental autolinking, @rnx-kit/react-native-host must be manually linked. In your Podfile, add the following line:  pod 'ReactNativeHost', :path =&gt; '../node_modules/@rnx-kit/react-native-host'   Adjust the path accordingly to your project setup. If you prefer a more dynamic approach, you can also try using this script:  proj_dir = Pathname.new(__dir__) proj_dir = proj_dir.parent until File.exist?(&quot;#{proj_dir}/node_modules/@rnx-kit/react-native-host/ReactNativeHost.podspec&quot;) || proj_dir.expand_path.to_s == '/' pod 'ReactNativeHost', :path =&gt; &quot;#{proj_dir}/node_modules/@rnx-kit/react-native-host&quot;   Run pod install at least once to make sure it gets added to your project. Then make the following changes:  Replace instances of RCTBridgeDelegate with RNXHostConfig. The latter is a superset and is backwards compatible.Replace instantiation of RCTBridge with ReactNativeHost. ReactNativeHostwill instantiate the appropriate modules required for your setup. It will also handle New Architecture configuration as necessary.Instead of instantiating RCTRootView directly, use-[ReactNativeHost viewWithModuleName:initialProperties:] to create your root views.  For example, if you previously had something like this:  // AppDelegate.h @import React; @import UIKit; @interface AppDelegate : UIResponder &lt;UIApplicationDelegate, RCTBridgeDelegate&gt; @end // AppDelegate.m @implementation AppDelegate { RCTBridge *_bridge; } - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { ... _bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions]; RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:_bridge moduleName:moduleName initialProperties:initialProperties]; ... } @end   You should instead have:  // AppDelegate.h @import ReactNativeHost; @import UIKit; @interface AppDelegate : UIResponder &lt;UIApplicationDelegate, RNXHostConfig&gt; @end // AppDelegate.m @implementation AppDelegate { ReactNativeHost *_host; } - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { ... _host = [[ReactNativeHost alloc] initWithConfig:self]; UIView *rootView = [_host viewWithModuleName:moduleName initialProperties:initialProperties]; ... } @end   ","version":"Next","tagName":"h3"},{"title":"API​","type":1,"pageTitle":"react-native-host","url":"/rnx-kit/docs/tools/react-native-host#api","content":" ","version":"Next","tagName":"h2"},{"title":"ReactNativeHost​","type":1,"pageTitle":"react-native-host","url":"/rnx-kit/docs/tools/react-native-host#reactnativehost","content":" Instantiates the appropriate modules required for the setup. It handles New Architecture if necessary.  initWithConfig:​  Swift name: init(_:)  Creates an instance of ReactNativeHost using the designated initializer.  Objective-C:  ReactNativeHost *host = [[ReactNativeHost alloc] initWithConfig:self];   Swift:  let host = ReactNativeHost(config: self)   shutdown​  Shuts down the React Native instance  usingModule:block:​  Swift name: using(module:block:)  Retrieves or initializes a desired native module. Parameters:  moduleClass - class of the native module to initialize or retrieveblock - block that gets called when the native module is retrieved  Objective-C:  [host usingModule:[MyNativeModuleClass class] block:^(id&lt;RCTBridgeModule&gt; module) { if (![module isKindOfClass:[MyNativeModuleClass class]]) { return; } MyNativeModuleClass *myNativeModule = (MyNativeModuleClass *)module; // Use the native module here }];   Swift:  host.using(module: MyNativeModuleClass.self) { guard let myNativeModule = module as? MyNativeModuleClass else { return } // Use the native module here }   hostFromRootView:​  Swift name: host(from:)  Retrieves the ReactNativeHost instance that view belongs to.  viewWithModuleName:initialProperties:​  Swift name: view(moduleName:initialProperties:)  Creates a React root view with the specified module and initial properties. Parameters:  moduleName - name of the module to create root view ofinitialProperties - properties passed to the module  Objective-C:  ReactNativeHost *host = [[ReactNativeHost alloc] initWithConfig:self]; UIView *rootView = [host viewWithModuleName:moduleName initialProperties:initialProperties];   Swift:  let view = host.view( moduleName: moduleName, initialProperties: initialProperties )   ","version":"Next","tagName":"h3"},{"title":"RNXConfig​","type":1,"pageTitle":"react-native-host","url":"/rnx-kit/docs/tools/react-native-host#rnxconfig","content":" RNXHostConfig is a superset of RCTBridgeDelegate and it's backwards compatible.  isDevLoadingViewEnabled​  Returns whether the loading view should be visible while loading JavaScript  shouldReleaseBridgeWhenBackgrounded​  Returns whether the bridge should be released when the app is in the background  onFatalError​  Handles a fatal error ","version":"Next","tagName":"h3"},{"title":"react-native-lazy-index","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/react-native-lazy-index","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"react-native-lazy-index","url":"/rnx-kit/docs/tools/react-native-lazy-index#installation","content":" npm install --save @rnx-kit/react-native-lazy-index   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"react-native-lazy-index","url":"/rnx-kit/docs/tools/react-native-lazy-index#usage","content":" react-native-lazy-index usesbabel-plugin-codegen, so you'll need to configure Babel to include it. The recommended way is to add it to your .babelrc:   { &quot;presets&quot;: [&quot;module:metro-react-native-babel-preset&quot;], &quot;plugins&quot;: [ + &quot;codegen&quot; ] }   In your index.js, import @rnx-kit/react-native-lazy-index and pass to it the features that should be lazy loaded. In the example below, we register four entry points:  // @codegen module.exports = require(&quot;@rnx-kit/react-native-lazy-index&quot;)({ SomeFeature: &quot;@awesome-app/some-feature&quot;, &quot;callable:AnotherFeature&quot;: &quot;@awesome-app/another-feature&quot;, YetAnotherFeature: &quot;@awesome-app/yet-another-feature&quot;, FinalFeature: &quot;@awesome-app/final-feature&quot;, });   By default, a call to AppRegistry is generated using the key as the app key, and the value is the name of the module containing the app. If the key is prefixed with callable:, a call to BatchedBridge will be generated.  That's it!  ","version":"Next","tagName":"h2"},{"title":"Why​","type":1,"pageTitle":"react-native-lazy-index","url":"/rnx-kit/docs/tools/react-native-lazy-index#why","content":" With a naive index.js, all features will be loaded when your app starts and React Native is initialized for the first time.  import &quot;@awesome-app/some-feature&quot;; import &quot;@awesome-app/another-feature&quot;; import &quot;@awesome-app/yet-another-feature&quot;; import &quot;@awesome-app/final-feature&quot;;   By loading features on demand, we can improve app startup time.  With react-native-lazy-index, we no longer load all features up front. Instead, index.js wraps calls to AppRegistry.registerComponent andBatchedBridge.registerCallableModule, deferring the import of a feature until it is used. Features that are never used, are never loaded.  When you import react-native-lazy-index, something similar to below is generated:  const { AppRegistry } = require(&quot;react-native&quot;); const BatchedBridge = require(&quot;react-native/Libraries/BatchedBridge/BatchedBridge&quot;); AppRegistry.registerComponent(&quot;SomeFeature&quot;, () =&gt; { // We'll import the module the first time &quot;SomeFeature&quot; is accessed. require(&quot;@awesome-app/some-feature&quot;); // &quot;SomeFeature&quot; is now overwritten and we can return the real component. // Subsequent calls to &quot;SomeFeature&quot; will no longer go through this wrapper. return AppRegistry.getRunnable(&quot;SomeFeature&quot;).componentProvider(); }); BatchedBridge.registerLazyCallableModule(&quot;AnotherFeature&quot;, () =&gt; { // We'll import the module the first time &quot;AnotherFeature&quot; is accessed. require(&quot;@awesome-app/another-feature&quot;); // &quot;AnotherFeature&quot; is now overwritten and we can return the real component. // Subsequent calls to &quot;AnotherFeature&quot; will no longer go through this // wrapper. return BatchedBridge.getCallableModule(&quot;AnotherFeature&quot;); }); AppRegistry.registerComponent(&quot;YetAnotherFeature&quot;, () =&gt; { // We'll import the module the first time &quot;YetAnotherFeature&quot; is accessed. require(&quot;@awesome-app/yet-another-feature&quot;); // &quot;YetAnotherFeature&quot; is now overwritten and we can return the real // component. Subsequent calls to &quot;YetAnotherFeature&quot; will no longer go // through this wrapper. return AppRegistry.getRunnable(&quot;YetAnotherFeature&quot;).componentProvider(); }); AppRegistry.registerComponent(&quot;FinalFeature&quot;, () =&gt; { // We'll import the module the first time &quot;FinalFeature&quot; is accessed. require(&quot;@awesome-app/final-feature&quot;); // &quot;FinalFeature&quot; is now overwritten and we can return the real component. // Subsequent calls to &quot;FinalFeature&quot; will no longer go through this wrapper. return AppRegistry.getRunnable(&quot;FinalFeature&quot;).componentProvider(); });   ","version":"Next","tagName":"h2"},{"title":"Contributing​","type":1,"pageTitle":"react-native-lazy-index","url":"/rnx-kit/docs/tools/react-native-lazy-index#contributing","content":" This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.  When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.  This project has adopted theMicrosoft Open Source Code of Conduct. For more information see theCode of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. ","version":"Next","tagName":"h2"},{"title":"tools-workspaces","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/tools-workspaces","content":"tools-workspaces @rnx-kit/tools-workspaces is a collection of tools for working with workspaces. It currently supports: BunLernanpmpnpmRushYarn Category\tType Name\tDescriptiontypes\tWorkspacesInfo\tHelper interface that caches results in-between calls and can test if a package is in the workspace without having to load all the packages (in most cases)Category\tFunction\tDescription-\tfindWorkspacePackages()\tReturns a list of all packages declared under workspaces. -\tfindWorkspacePackagesSync()\tReturns a list of all packages declared under workspaces synchronously. -\tfindWorkspaceRoot()\tReturns the root of the workspace; undefined if not a workspace. -\tfindWorkspaceRootSync()\tReturns the root of the workspace synchronously; undefined if not a workspace.","keywords":"","version":"Next"},{"title":"tools-shell","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/tools-shell","content":"tools-shell @rnx-kit/tools-shell is a collection of functions for writing shell scripts. You can import the entire package, or, to save space, import individual categories: import * as tools from &quot;@rnx-kit/tools-shell&quot;; // Alternatively... import * as asyncTools from &quot;@rnx-kit/tools-shell/async&quot;; import * as commandTools from &quot;@rnx-kit/tools-shell/command&quot;; Category\tFunction\tDescriptionasync\tidle(ms)\tSleep for a specified numer of milliseconds. async\tonce(func)\tWraps the function, making sure it only gets called once. async\tretry(func, retries, counter)\tCalls the specified function, retrying up to specified number of times as long as the result is null. async\twithRetry(func, retries, counter)\tCalls the specified function, retrying up to specified number of times as long as the function throws. command\tensure(result, message)\tThrows if the result of the process is non-zero. command\tensureInstalled(check, message)\tThrows if the provided command fails. command\tmakeCommand(command, userOptions)\tCreates an async function for calling the specified command. command\tmakeCommandSync(command)\tCreates a synchronous function for calling the specified command. untar\tuntar(archive)\tInvokes tar xf.","keywords":"","version":"Next"},{"title":"Type Safety","type":0,"sectionRef":"#","url":"/rnx-kit/docs/type-safety","content":"","keywords":"","version":"Next"},{"title":"A Tale of Two Type Systems​","type":1,"pageTitle":"Type Safety","url":"/rnx-kit/docs/type-safety#a-tale-of-two-type-systems","content":" React Native is built on JavaScript, which does not have a type system. This is a problem, because React Native is a large, complex platform. Without a type system, developers can't easily reason about the source code or use static analysis tools to find bugs.  When developers at Meta created React Native, they chose their own type system named Flow. Many open-source projects at Meta use Flow. It is part of their engineering system and culture. Flow is not used much outside of Meta.  The JavaScript community has largely embraced TypeScript. This includes the React Native developer community as well. React Native applications are written in TypeScript. Integrations with React Native -- plugins, presets, templates, etc -- are also written in TypeScript.  The tools in this project are written in TypeScript, too. Further, tools in this project which perform type-checking do so using the TypeScript language.  ","version":"Next","tagName":"h2"},{"title":"Platform-Specific Code​","type":1,"pageTitle":"Type Safety","url":"/rnx-kit/docs/type-safety#platform-specific-code","content":" React Native introduces the concept ofplatform-specific extensionsso that developers can write per-platform code in their applications. Platform-specific extensions require a specialized module resolver, capable of matching a module import to a file such as &lt;module&gt;.ios.js or&lt;module&gt;.native.js. Metro, the React Native bundler, has a resolver which supports this.  TypeScript version 4.7 also supports style of module resolution via the compiler option moduleSuffixes. See theannouncementfor details.  ","version":"Next","tagName":"h2"},{"title":"Module Substitution​","type":1,"pageTitle":"Type Safety","url":"/rnx-kit/docs/type-safety#module-substitution","content":" React Native is implemented on many platforms which span several NPM packages.ios and android implementations are in the react-native NPM package, which is maintained by Meta. windows is under react-native-windows and macos is under react-native-macos, both of which are maintained by Microsoft. win32is an Office-specific platform under @office-iss/react-native-win32.  windows, macos, and win32 are all considered to beout-of-tree platformsbecause they aren't part of the core react-native distribution. Each platform package is a complete implementation of React Native, and has (or should have) associated TypeScript types.  To avoid having &quot;forked&quot; references to the various NPM package names in code, developers are encouraged to always use import 'react-native'. Metro, the React Native bundler, substitutes 'react-native' with the target platform's out-of-tree NPM package. For macOS, import 'react-native' becomesimport 'react-native-macos'.  We are working with the TypeScript team to support a similar &quot;module substitution&quot; mechanism for type-checking and IntelliSense.  TypeScript support is most beneficial when integrated with an editor like VSCode. Seeing platform-specific type-safety errors, during development, helps keep bugs out of the shared source tree.  This featurecontinues to be a work in progress.  ","version":"Next","tagName":"h2"},{"title":"Type-Safe Bundling​","type":1,"pageTitle":"Type Safety","url":"/rnx-kit/docs/type-safety#type-safe-bundling","content":" Metro, the React Native bundler, supports TypeScript source files, but it only transpiles them to JavaScript. Metro does not do any type-checking.  Our CLI combines Metro and TypeScript to solve this problem. Through configuration, you can enable type-checking while running the rnx-bundle andrnx-start commands. Warnings and errors from TypeScript appear on the console:  Unused function with missing type information function foo(x) { return x + 2; }     The Bundling guide shows you how to enable type-safe bundling. ","version":"Next","tagName":"h2"},{"title":"tsconfig","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/tsconfig","content":"","keywords":"","version":"Next"},{"title":"Install​","type":1,"pageTitle":"tsconfig","url":"/rnx-kit/docs/tools/tsconfig#install","content":" yarn add @rnx-kit/tsconfig --dev   or if you're using npm:  npm add --save-dev @rnx-kit/tsconfig   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"tsconfig","url":"/rnx-kit/docs/tools/tsconfig#usage","content":" Add the following to your tsconfig.json:  &quot;extends&quot;: &quot;@rnx-kit/tsconfig/tsconfig.json&quot;   Or if you're targeting ESM:  &quot;extends&quot;: &quot;@rnx-kit/tsconfig/tsconfig.esm.json&quot;  ","version":"Next","tagName":"h2"},{"title":"typescript-service","type":0,"sectionRef":"#","url":"/rnx-kit/docs/tools/typescript-service","content":"","keywords":"","version":"Next"},{"title":"Configuration​","type":1,"pageTitle":"typescript-service","url":"/rnx-kit/docs/tools/typescript-service#configuration","content":" The starting point for working with TypeScript is reading configuration from the command line, or from aconfiguration filelike tsconfig.json.  Both methods yeild a ParedCommandLine object, offering the same level of control over how TypeScript behaves.  import ts from &quot;typescript&quot;; // Read configuration from a NodeJS command-line const cmdLine = ts.parseCommandLine(process.argv.slice(2)); // Read configuration from a project file (parsed into a TypeScript command-line object) const configFileName = findConfigFile(searchPath); if (!configFileName) { throw new Error(`Failed to find config file under ${searchPath}`); } const cmdLine = readConfigFile(configFileName); if (!cmdLine) { throw new Error(`Failed to read config file ${configFileName}`); } // For either method, handle errors if (cmdLine.errors.length &gt; 0) { ... }   ","version":"Next","tagName":"h2"},{"title":"Language Services​","type":1,"pageTitle":"typescript-service","url":"/rnx-kit/docs/tools/typescript-service#language-services","content":" TypeScript's language service allows you to work with source code continuously, unlike the TypeScript compiler, which makes a single pass through the code. The language service tends to load only what is needed to fulfill the current request, such as getting diagnostics for a particular source file, or re-loading a changed file being watched. This saves time and memory, when full source validation isn't needed.  The language service is accessible through the Service and Project classes.Service manages shared state across all projects, and is meant to be a singleton. Project contains a TypeScript configuration, which includes a list of source files. TypeScript configuration comes from either the command line or a file like tsconfig.json.  You can use a Project to validate code, and emit transpiled JavaScript:  const service = new Service(); const project = service.openProject(cmdLine); // validate const fileHasErrors = project.validateFile(fileName); const projectHasErrors = project.validate(); // emit const fileEmitted = project.emitFile(fileName); const projectEmitted = project.emit();   You can also change which files are in a project. This is typically done in response to an external event, like a callback notifying you that a file has been added, updated or removed:  import ts from &quot;typescript&quot;; function onFileEvent(eventType: string, fileName: string, payload?: string) { if (eventType === &quot;add&quot;) { project.addFile(fileName); } else if (eventType === &quot;modify&quot;) { project.updateFile( fileName, payload &amp;&amp; ts.ScriptSnapshot.fromString(payload) ); } else if (eventType === &quot;delete&quot;) { project.deleteFile(fileName); } }   When you're finished working with a Project, you must dispose of it to properly release all internal resources:  project.dispose();   ","version":"Next","tagName":"h2"},{"title":"Customizing the Language Service​","type":1,"pageTitle":"typescript-service","url":"/rnx-kit/docs/tools/typescript-service#customizing-the-language-service","content":" The language service is initialized using a host interface. You can customize the host interface to change the way TypeScript works:  const enhanceLanguageServiceHost = (host: ts.LanguageServiceHost): void =&gt; { // change host functions in here }; const service = new Service(); const project = service.openProject(cmdLine, enhanceLanguageServiceHost);   For example, you can replace the functions which control how modules and type references are resolved to files:  function resolveModuleNames( moduleNames: string[], containingFile: string, reusedNames: string[] | undefined, redirectedReference: ResolvedProjectReference | undefined, options: CompilerOptions ): (ResolvedModule | undefined)[] { /* ... */ } function resolveTypeReferenceDirectives( typeDirectiveNames: string[], containingFile: string, redirectedReference: ResolvedProjectReference | undefined, options: CompilerOptions ): (ResolvedTypeReferenceDirective | undefined)[] { /* ... */ } const enhanceLanguageServiceHost = (host: ts.LanguageServiceHost): void =&gt; { host.resolveModuleNames = resolveModuleNames; host.resolveTypeReferenceDirectives = resolveTypeReferenceDirectives; };  ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}