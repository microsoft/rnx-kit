/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@rnx-kit/yarn-plugin-install-to",
factory: function (require) {
"use strict";var plugin=(()=>{var u=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var I=Object.getOwnPropertyNames;var x=Object.prototype.hasOwnProperty;var w=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(s,o)=>(typeof require<"u"?require:s)[o]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')});var b=(e,s)=>{for(var o in s)u(e,o,{get:s[o],enumerable:!0})},P=(e,s,o,a)=>{if(s&&typeof s=="object"||typeof s=="function")for(let t of I(s))!x.call(e,t)&&t!==o&&u(e,t,{get:()=>s[t],enumerable:!(a=y(s,t))||a.enumerable});return e};var S=e=>P(u({},"__esModule",{value:!0}),e);var E={};b(E,{default:()=>C});var h=w("@yarnpkg/cli"),r=w("@yarnpkg/core"),c=w("clipanion"),m=class extends h.BaseCommand{constructor(){super(...arguments);this.verbose=c.Option.Boolean("--verbose",!1,{description:"Report out verbose logs of the install process"});this.workspaceNames=c.Option.Rest({required:1})}static{this.paths=[["install-to"]]}static{this.usage=c.Command.Usage({description:"Download and install only the packages required for the given workspace or workspaces",details:`
      Given the name of one or more project workspaces, this command will install only the packages required for those workspaces.
      This is primarily useful for a focused CI build that builds a subset of a large monorepo.

      Note that this will use the lockfile as is, running the resolution step such that the data in the lockfile is trusted as-is. The command
      is optimized for speed of install, assuming that previous standard install commands will have been run to ensure the lockfile is up to date and correct.
    `,examples:[["Install a single package and its dependencies","$0 install-to workspace-package-name"],["Install multiple packages and their dependencies","$0 install-to @my-scope/workspace-package-1 @my-scope/workspace-package-2"]]})}async execute(){let{stdout:o}=this.context,a=await r.Configuration.find(this.context.cwd,this.context.plugins),{project:t,workspace:n}=await r.Project.find(a,this.context.cwd),l=await r.Cache.find(a),i=L(this.workspaceNames,t);if(i.size===0)throw new c.UsageError("No valid workspaces specified. Please provide one or more workspace names");if(!n)throw new h.WorkspaceRequiredError(t.cwd,this.context.cwd);return await t.restoreInstallState({restoreResolutions:!1}),(await r.StreamReport.start({configuration:a,stdout:o,includeLogs:this.verbose,includeVersion:!0},async d=>{if(this.verbose)for(let f of i){let v=r.structUtils.prettyWorkspace(a,f);d.reportInfo(0,`Installing workspace ${v} (${f.cwd})`)}await R(t,a,i,{cache:l,report:d,immutable:!0})})).exitCode()}};function L(e,s){let o=new Set;for(let a of e){let t=s.getWorkspaceByIdent(r.structUtils.parseIdent(a));o.add(t);let n=t.getRecursiveWorkspaceDependencies();for(let l of n)o.add(l)}return o.add(s.topLevelWorkspace),o}function k(e,s,o){let a=e.storedResolutions.get(o.descriptorHash);if(a&&!s.has(a)){let t=e.storedPackages.get(a);if(t){s.add(t.locatorHash);for(let[,n]of t.dependencies)k(e,s,n)}}}function g(e,s){let o=new Set;for(let a of s){let t=a.manifest;for(let[,n]of t.dependencies)k(e,o,n);for(let[,n]of t.devDependencies)k(e,o,n)}return o}async function R(e,s,o,a){let{report:t}=a,n=await s.getPackageExtensions();for(let p of n.values())for(let[,d]of p)for(let f of d)f.status=r.PackageExtensionStatus.Inactive;let l=g(e,o);await t.startTimerPromise("Resolution step",async()=>{await e.resolveEverything(a)});let i=g(e,o);for(let p of e.accessibleLocators)i.has(p)||e.disabledLocators.add(p);t.reportInfo(0,`Trimming from ${e.accessibleLocators.size} to ${i.size} locators`),t.reportInfo(0,`Found ${i.size-l.size} new locators post resolve`),await t.startTimerPromise("Fetch step",async()=>{await e.fetchEverything(a)}),await t.startTimerPromise("Link step",async()=>{await e.linkEverything(a)}),await e.persistInstallStateFile()}var W={commands:[m]},C=W;return S(E);})();
return plugin;
}
};
//# sourceMappingURL=yarn-plugin-install-to.cjs.map
