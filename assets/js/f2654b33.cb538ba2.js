"use strict";(self.webpackChunk_rnx_kit_docsite=self.webpackChunk_rnx_kit_docsite||[]).push([[2872],{8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(6540);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}},8613:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"type-safety","title":"Type Safety","description":"A Tale of Two Type Systems","source":"@site/docs/type-safety.mdx","sourceDirName":".","slug":"/type-safety","permalink":"/rnx-kit/docs/type-safety","draft":false,"unlisted":false,"editUrl":"https://github.com/microsoft/rnx-kit/tree/main/docsite/docs/type-safety.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Dependencies","permalink":"/rnx-kit/docs/dependencies"},"next":{"title":"Getting Started","permalink":"/rnx-kit/docs/guides/getting-started"}}');var s=n(4848),o=n(8453),r=n(6025);const a={},c="Type Safety",d={},l=[{value:"A Tale of Two Type Systems",id:"a-tale-of-two-type-systems",level:2},{value:"Platform-Specific Code",id:"platform-specific-code",level:2},{value:"Module Substitution",id:"module-substitution",level:2},{value:"Type-Safe Bundling",id:"type-safe-bundling",level:2}];function p(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"type-safety",children:"Type Safety"})}),"\n",(0,s.jsx)(t.h2,{id:"a-tale-of-two-type-systems",children:"A Tale of Two Type Systems"}),"\n",(0,s.jsx)(t.p,{children:"React Native is built on JavaScript, which does not have a type system. This is\na problem, because React Native is a large, complex platform. Without a type\nsystem, developers can't easily reason about the source code or use static\nanalysis tools to find bugs."}),"\n",(0,s.jsx)(t.p,{children:"When developers at Meta created React Native, they chose their own type system\nnamed Flow. Many open-source projects at Meta use Flow. It is part of their\nengineering system and culture. Flow is not used much outside of Meta."}),"\n",(0,s.jsx)(t.p,{children:"The JavaScript community has largely embraced TypeScript. This includes the\nReact Native developer community as well. React Native applications are written\nin TypeScript. Integrations with React Native -- plugins, presets, templates,\netc -- are also written in TypeScript."}),"\n",(0,s.jsx)(t.p,{children:"The tools in this project are written in TypeScript, too. Further, tools in this\nproject which perform type-checking do so using the TypeScript language."}),"\n",(0,s.jsx)(t.h2,{id:"platform-specific-code",children:"Platform-Specific Code"}),"\n",(0,s.jsxs)(t.p,{children:["React Native introduces the concept of\n",(0,s.jsx)(t.a,{href:"https://reactnative.dev/docs/platform-specific-code#platform-specific-extensions",children:"platform-specific extensions"}),"\nso that developers can write per-platform code in their applications.\nPlatform-specific extensions require a specialized module resolver, capable of\nmatching a module import to a file such as ",(0,s.jsx)(t.code,{children:"<module>.ios.js"})," or\n",(0,s.jsx)(t.code,{children:"<module>.native.js"}),". Metro, the React Native bundler, has a resolver which\nsupports this."]}),"\n",(0,s.jsxs)(t.p,{children:["TypeScript version 4.7 also supports style of module resolution via the compiler\noption ",(0,s.jsx)(t.code,{children:"moduleSuffixes"}),". See the\n",(0,s.jsx)(t.a,{href:"https://devblogs.microsoft.com/typescript/announcing-typescript-4-7-beta/#resolution-customization-with-modulesuffixes",children:"announcement"}),"\nfor details."]}),"\n",(0,s.jsx)(t.h2,{id:"module-substitution",children:"Module Substitution"}),"\n",(0,s.jsxs)(t.p,{children:["React Native is implemented on many platforms which span several NPM packages.\n",(0,s.jsx)(t.code,{children:"ios"})," and ",(0,s.jsx)(t.code,{children:"android"})," implementations are in the ",(0,s.jsx)(t.code,{children:"react-native"})," NPM package, which\nis maintained by Meta. ",(0,s.jsx)(t.code,{children:"windows"})," is under ",(0,s.jsx)(t.code,{children:"react-native-windows"})," and ",(0,s.jsx)(t.code,{children:"macos"})," is\nunder ",(0,s.jsx)(t.code,{children:"react-native-macos"}),", both of which are maintained by Microsoft. ",(0,s.jsx)(t.code,{children:"win32"}),"\nis an Office-specific platform under ",(0,s.jsx)(t.code,{children:"@office-iss/react-native-win32"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"windows"}),", ",(0,s.jsx)(t.code,{children:"macos"}),", and ",(0,s.jsx)(t.code,{children:"win32"})," are all considered to be\n",(0,s.jsx)(t.a,{href:"https://microsoft.github.io/react-native-windows/docs/metro-config-out-tree-platforms",children:"out-of-tree platforms"}),"\nbecause they aren't part of the core ",(0,s.jsx)(t.code,{children:"react-native"})," distribution. Each platform\npackage is a complete implementation of React Native, and has (or should have)\nassociated TypeScript types."]}),"\n",(0,s.jsxs)(t.p,{children:['To avoid having "forked" references to the various NPM package names in code,\ndevelopers are encouraged to always use ',(0,s.jsx)(t.code,{children:"import 'react-native'"}),". Metro, the\nReact Native bundler, substitutes 'react-native' with the target platform's\nout-of-tree NPM package. For macOS, ",(0,s.jsx)(t.code,{children:"import 'react-native'"})," becomes\n",(0,s.jsx)(t.code,{children:"import 'react-native-macos'"}),"."]}),"\n",(0,s.jsx)(t.p,{children:'We are working with the TypeScript team to support a similar "module\nsubstitution" mechanism for type-checking and IntelliSense.'}),"\n",(0,s.jsx)(t.p,{children:"TypeScript support is most beneficial when integrated with an editor like\nVSCode. Seeing platform-specific type-safety errors, during development, helps\nkeep bugs out of the shared source tree."}),"\n",(0,s.jsxs)(t.p,{children:["This feature\n",(0,s.jsx)(t.a,{href:"https://github.com/microsoft/rnx-kit/issues/1273",children:"continues to be a work in progress"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"type-safe-bundling",children:"Type-Safe Bundling"}),"\n",(0,s.jsx)(t.p,{children:"Metro, the React Native bundler, supports TypeScript source files, but it only\ntranspiles them to JavaScript. Metro does not do any type-checking."}),"\n",(0,s.jsxs)(t.p,{children:["Our CLI combines Metro and TypeScript to solve this problem. Through\nconfiguration, you can enable type-checking while running the ",(0,s.jsx)(t.code,{children:"rnx-bundle"})," and\n",(0,s.jsx)(t.code,{children:"rnx-start"})," commands. Warnings and errors from TypeScript appear on the console:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="Unused function with missing type information"',children:"function foo(x) {\n  return x + 2;\n}\n"})}),"\n",(0,s.jsx)("img",{src:(0,r.Ay)("/img/type-safe-bundling-output.png"),alt:"Image showing TypeScript errors. Foo is declared but never used. Parameter x implicitly has an 'any' type.",width:"700"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.a,{href:"/docs/guides/bundling",children:"Bundling guide"})," shows you how to enable type-safe\nbundling."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);