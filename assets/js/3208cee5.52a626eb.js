"use strict";(self.webpackChunk_rnx_kit_docsite=self.webpackChunk_rnx_kit_docsite||[]).push([[3646],{6589:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"tools/metro-config","title":"metro-config","description":"Build","source":"@site/docs/tools/metro-config.md","sourceDirName":"tools","slug":"/tools/metro-config","permalink":"/rnx-kit/docs/tools/metro-config","draft":false,"unlisted":false,"editUrl":"https://github.com/microsoft/rnx-kit/tree/main/docsite/docs/tools/metro-config.md","tags":[],"version":"current","frontMatter":{},"sidebar":"toolsSidebar","previous":{"title":"jest-preset","permalink":"/rnx-kit/docs/tools/jest-preset"},"next":{"title":"metro-plugin-cyclic-dependencies-detector","permalink":"/rnx-kit/docs/tools/metro-plugin-cyclic-dependencies-detector"}}');var i=t(4848),s=t(8453);const r={},a="metro-config",l={},c=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Expo",id:"expo",level:3},{value:"Known Limitations",id:"known-limitations",level:2},{value:"Bundle size",id:"bundle-size",level:3},{value:"Plugins",id:"plugins",level:3},{value:"Ensuring a single instance of a package",id:"ensuring-a-single-instance-of-a-package",level:3},{value:"Error: EMFILE: too many open files, watch",id:"error-emfile-too-many-open-files-watch",level:3},{value:"Error: jest-haste-map: Haste module naming collision",id:"error-jest-haste-map-haste-module-naming-collision",level:3},{value:"[Flipper] React DevTools is disabled",id:"flipper-react-devtools-is-disabled",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"metro-config",children:"metro-config"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/microsoft/rnx-kit/actions/workflows/build.yml",children:(0,i.jsx)(n.img,{src:"https://github.com/microsoft/rnx-kit/actions/workflows/build.yml/badge.svg",alt:"Build"})}),"\n",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/@rnx-kit/metro-config",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/npm/v/@rnx-kit/metro-config",alt:"npm version"})})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"@rnx-kit/metro-config"})," provides helper functions for creating a Metro config\nthat works in a monorepo."]}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"yarn add @rnx-kit/metro-config --dev\n"})}),"\n",(0,i.jsx)(n.p,{children:"or if you're using npm"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"npm add --save-dev @rnx-kit/metro-config\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(n.p,{children:["Import ",(0,i.jsx)(n.code,{children:"makeMetroConfig"})," helper function from ",(0,i.jsx)(n.code,{children:"@rnx-kit/metro-config"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// metro.config.js\nconst { makeMetroConfig } = require("@rnx-kit/metro-config");\n\nmodule.exports = makeMetroConfig({\n  transformer: {\n    getTransformOptions: async () => ({\n      transform: {\n        experimentalImportSupport: false,\n        inlineRequires: false,\n      },\n    }),\n  },\n});\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"makeMetroConfig"})," takes a Metro config as parameter. The config is augmented\nwith additional fields to make sure it works smoothly in a monorepo."]}),"\n",(0,i.jsx)(n.h3,{id:"expo",children:"Expo"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"@rnx-kit/metro-config"})," can be used with Expo. Pass its default config to\n",(0,i.jsx)(n.code,{children:"makeMetroConfig"})," like below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// metro.config.js\nconst { getDefaultConfig } = require("@expo/metro-config");\nconst { makeMetroConfig } = require("@rnx-kit/metro-config");\n\nconst config = getDefaultConfig(__dirname);\nmodule.exports = makeMetroConfig(config);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"known-limitations",children:"Known Limitations"}),"\n",(0,i.jsx)(n.p,{children:"While Metro is the de-facto standard, it lacks a few features that would make it\noptimal; here's our current wishlist, feel free to submit PRs if you want to\nhelp with them :)"}),"\n",(0,i.jsx)(n.h3,{id:"bundle-size",children:"Bundle size"}),"\n",(0,i.jsx)(n.p,{children:"Metro currently does not implement tree shaking, i.e. it does not attempt to\nremove unused code from the JS bundle. For instance, given this code snippet:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { partition } from "lodash";\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Metro will bundle all of ",(0,i.jsx)(n.code,{children:"lodash"})," in your bundle even though you're only using a\nsmall part of it. In ",(0,i.jsx)(n.code,{children:"lodash"}),"'s case, you can add\n",(0,i.jsx)(n.a,{href:"https://github.com/lodash/babel-plugin-lodash#readme",children:(0,i.jsx)(n.code,{children:"babel-plugin-lodash"})})," to\nyour Babel config to help Metro strip away some modules, but not all libraries\nwill come with such helpers."]}),"\n",(0,i.jsxs)(n.p,{children:["If you're feeling adventurous, you can try an experimental Metro serializer\nwe've built that adds support for tree shaking:\n",(0,i.jsx)(n.a,{href:"https://github.com/microsoft/rnx-kit/tree/main/packages/metro-serializer-esbuild#readme",children:"@rnx-kit/metro-serializer-esbuild"}),".\nDo note that you will need to be on React Native 0.64 or above, and use Metro\n0.66.1."]}),"\n",(0,i.jsx)(n.h3,{id:"plugins",children:"Plugins"}),"\n",(0,i.jsxs)(n.p,{children:["Metro doesn't have a plugin system, but it does have hooks that allows you to\nimplement something that functions similarly.\n",(0,i.jsx)(n.a,{href:"https://github.com/microsoft/rnx-kit/tree/main/packages/metro-serializer#readme",children:"@rnx-kit/metro-serializer"}),"\nimplements a serializer that allows you to pass plugins that are run just before\nthe JS bundle is serialized and written to disk. Follow the\n",(0,i.jsx)(n.a,{href:"https://github.com/microsoft/rnx-kit/tree/main/packages/metro-serializer#usage",children:"instructions for installing it"}),",\nthen try our plugins:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/microsoft/rnx-kit/tree/main/packages/metro-plugin-cyclic-dependencies-detector",children:"@rnx-kit/metro-plugin-cyclic-dependencies-detector"}),"\nis a plugin that detects cyclic imports. These can cause bugs that can be\nreally confusing to debug."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/microsoft/rnx-kit/tree/main/packages/metro-plugin-duplicates-checker",children:"@rnx-kit/metro-plugin-duplicates-checker"}),"\ndetects whether you're bundling multiple copies of the same package in your JS\nbundle."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/microsoft/rnx-kit/tree/main/packages/metro-plugin-typescript-validation",children:"@rnx-kit/metro-plugin-typescript-validation"}),"\nperforms type checking of the TypeScript files being bundled. The Babel plugin\nfor TypeScript that comes with ",(0,i.jsx)(n.code,{children:"@react-native/babel-preset"})," only strips the\ntypes. Normally, one would run ",(0,i.jsx)(n.code,{children:"tsc"})," separately to ensure that the code is\ncorrect. This step can now be replaced with the plugin."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"You can of course also provide your own plugins."}),"\n",(0,i.jsx)(n.h3,{id:"ensuring-a-single-instance-of-a-package",children:"Ensuring a single instance of a package"}),"\n",(0,i.jsxs)(n.p,{children:["Normally, Metro resolves a module relative to the package it is currently\nresiding in. For example, with a monorepo such as below, ",(0,i.jsx)(n.code,{children:"my-awesome-package"}),"\nwould resolve ",(0,i.jsx)(n.code,{children:"react-native-msal@2.0.3"})," while ",(0,i.jsx)(n.code,{children:"another-awesome-package"})," would\nresolve ",(0,i.jsx)(n.code,{children:"react-native-msal@3.1.0"}),". This would lead to duplicate packages in your\nbundle and may cause issues."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"workspace\n\u251c\u2500\u2500 node_modules\n\u2502   \u2514\u2500\u2500 react-native-msal@3.1.0  <-- should be ignored\n\u2514\u2500\u2500 packages\n    \u251c\u2500\u2500 my-awesome-package\n    \u2502   \u2514\u2500\u2500 node_modules\n    \u2502       \u2514\u2500\u2500 react-native-msal@2.0.3  <-- should take precedence\n    \u2514\u2500\u2500 another-awesome-package  <-- imported by my-awesome-package,\n                                     but uses workspace's react-native-msal\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If we simply exclude the workspace's copy, Metro will not be able to find\n",(0,i.jsx)(n.code,{children:"react-native-msal"})," from ",(0,i.jsx)(n.code,{children:"another-awesome-package"}),". It also won't exclude copies\nthat are installed in other packages. To help Metro resolve to the correct copy,\nwe need to exclude all other copies, and also add a corresponding entry in\n",(0,i.jsx)(n.code,{children:"extraNodeModules"}),". ",(0,i.jsx)(n.code,{children:"@rnx-kit/metro-config"})," contains functions to help you set\nthis up correctly. Given the example above, our ",(0,i.jsx)(n.code,{children:"metro.config.js"})," should look\nlike this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const {\n  exclusionList,\n  makeMetroConfig,\n  resolveUniqueModule,\n} = require("@rnx-kit/metro-config");\n\nconst [msalPath, msalExcludePattern] = resolveUniqueModule("react-native-msal");\nconst additionalExclusions = [msalExcludePattern];\nconst blockList = exclusionList(additionalExclusions);\n\nmodule.exports = makeMetroConfig({\n  resolver: {\n    extraNodeModules: {\n      "react-native-msal": msalPath,\n    },\n    blacklistRE: blockList, // For Metro < 0.60\n    blockList, // For Metro >= 0.60\n  },\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"error-emfile-too-many-open-files-watch",children:"Error: EMFILE: too many open files, watch"}),"\n",(0,i.jsxs)(n.p,{children:["If you're getting an error like below, you need to\n",(0,i.jsx)(n.a,{href:"https://facebook.github.io/watchman/docs/install.html",children:"install Watchman"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"events.js:292\n      throw er; // Unhandled 'error' event\n      ^\n\nError: EMFILE: too many open files, watch\n    at FSEvent.FSWatcher._handle.onchange (internal/fs/watchers.js:178:28)\nEmitted 'error' event on NodeWatcher instance at:\n    at NodeWatcher.checkedEmitError (/~/node_modules/sane/src/node_watcher.js:143:12)\n    at FSWatcher.emit (events.js:315:20)\n    at FSEvent.FSWatcher._handle.onchange (internal/fs/watchers.js:184:12) {\n  errno: -24,\n  syscall: 'watch',\n  code: 'EMFILE',\n  filename: null\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"error-jest-haste-map-haste-module-naming-collision",children:"Error: jest-haste-map: Haste module naming collision"}),"\n",(0,i.jsx)(n.p,{children:"Metro will throw an exception if it finds duplicates:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Error: jest-haste-map: Haste module naming collision:\n  Duplicate module name: react-animated\n  Paths: /~/node_modules/example/node_modules/react-native/Libraries/Animated/release/package.json collides with /~/node_modules/react-native/Libraries/Animated/release/package.json\n\nThis error is caused by `hasteImpl` returning the same name for different files.\n    at setModule (/~/node_modules/jest-haste-map/build/index.js:569:17)\n    at workerReply (/~/node_modules/jest-haste-map/build/index.js:641:9)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)\n    at async Promise.all (index 77)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To resolve this, you'll need to exclude one of the paths in your\n",(0,i.jsx)(n.code,{children:"metro.config.js"}),", e.g.:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const { exclusionList, makeMetroConfig } = require("@rnx-kit/metro-config");\n\nconst blockList = exclusionList([\n  // Ignore nested copies of react-native\n  /node_modules\\/.*\\/node_modules\\/react-native\\/.*/,\n]);\n\nmodule.exports = makeMetroConfig({\n  resolver: {\n    blacklistRE: blockList, // For Metro < 0.60\n    blockList, // For Metro >= 0.60\n  },\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"flipper-react-devtools-is-disabled",children:"[Flipper] React DevTools is disabled"}),"\n",(0,i.jsxs)(n.p,{children:['Flipper only enables React Native plugins if it detects a Metro "device". It\ndetects one by opening ',(0,i.jsx)(n.code,{children:"localhost:8081"}),' and checking for some keywords like\n"React Native packager is running". However, if one of your packages have an\n',(0,i.jsx)(n.code,{children:"index.html"})," in the package root, Metro will serve that file instead. Flipper\nwill then think that it's not dealing with a React Native app and disable all\nrelated plugins."]}),"\n",(0,i.jsxs)(n.p,{children:["The fix is to move ",(0,i.jsx)(n.code,{children:"index.html"})," elsewhere, but if you cannot do that, you can\nwork around this issue by filtering out the offending packages in\n",(0,i.jsx)(n.code,{children:"metro.config.js"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const { makeMetroConfig } = require("@rnx-kit/metro-config");\nconst fs = require("fs");\nconst path = require("path");\n\nconst config = makeMetroConfig();\n\nmodule.exports = {\n  ...config,\n  watchFolders: config.watchFolders.filter(\n    (p) => !fs.existsSync(path.join(p, "index.html"))\n  ),\n};\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(6540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);