"use strict";(self.webpackChunk_rnx_kit_docsite=self.webpackChunk_rnx_kit_docsite||[]).push([[8972],{1783:(t,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>c,metadata:()=>n,toc:()=>m});const n=JSON.parse('{"id":"tools/commitlint-lite","title":"commitlint-lite","description":"Build","source":"@site/docs/tools/commitlint-lite.md","sourceDirName":"tools","slug":"/tools/commitlint-lite","permalink":"/rnx-kit/docs/tools/commitlint-lite","draft":false,"unlisted":false,"editUrl":"https://github.com/microsoft/rnx-kit/tree/main/docsite/docs/tools/commitlint-lite.md","tags":[],"version":"current","frontMatter":{},"sidebar":"toolsSidebar","previous":{"title":"cli","permalink":"/rnx-kit/docs/tools/cli"},"next":{"title":"config","permalink":"/rnx-kit/docs/tools/config"}}');var o=i(4848),s=i(8453);const c={},r="commitlint-lite",l={},m=[{value:"Usage",id:"usage",level:2}];function a(t){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"commitlint-lite",children:"commitlint-lite"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.a,{href:"https://github.com/microsoft/rnx-kit/actions/workflows/build.yml",children:(0,o.jsx)(e.img,{src:"https://github.com/microsoft/rnx-kit/actions/workflows/build.yml/badge.svg",alt:"Build"})}),"\n",(0,o.jsx)(e.a,{href:"https://www.npmjs.com/package/@rnx-kit/commitlint-lite",children:(0,o.jsx)(e.img,{src:"https://img.shields.io/npm/v/@rnx-kit/commitlint-lite",alt:"npm version"})})]}),"\n",(0,o.jsxs)(e.p,{children:["Lint commit message according to\n",(0,o.jsx)(e.a,{href:"https://www.conventionalcommits.org/en/v1.0.0/",children:"Conventional Commits"}),"."]}),"\n",(0,o.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(e.p,{children:["Pipe the commit message to ",(0,o.jsx)(e.code,{children:"@rnx-kit/commitlint-lite"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-sh",children:"echo 'ci: lint commit messages' | npx @rnx-kit/commitlint-lite\n"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Example:"})," In a PR, only the first commit's message needs to conform if you\nalways squash before merging:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-sh",children:"git log --format='%s' origin/trunk..HEAD | tail -1 | npx @rnx-kit/commitlint-lite\n"})})]})}function d(t={}){const{wrapper:e}={...(0,s.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(a,{...t})}):a(t)}},8453:(t,e,i)=>{i.d(e,{R:()=>c,x:()=>r});var n=i(6540);const o={},s=n.createContext(o);function c(t){const e=n.useContext(s);return n.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function r(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:c(t.components),n.createElement(s.Provider,{value:e},t.children)}}}]);