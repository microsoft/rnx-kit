name: rnx-build
on:
  workflow_dispatch:
    inputs:
      architecture:
        description: "Supported architectures are `arm64`, `x64`"
        required: true
        default: "x64"
      deviceType:
        description: "Supported device types are `device`, `emulator`, `simulator`"
        required: true
        default: "simulator"
      packageManager:
        description: "Supported package managers are `npm`, `yarn`, `pnpm` (v6.10+)"
        required: true
        default: "yarn"
      platform:
        description: "Supported platforms are `android`, `ios`, `macos`, `windows`"
        required: true
      projectRoot:
        description: "Root of the project"
        required: true
jobs:
  build-android:
    name: "Build Android"
    if: ${{ github.event.inputs.platform == 'android' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3.4.0
        with:
          distribution: temurin
          java-version: 11
      - name: Set up Node 16
        uses: actions/setup-node@v3.3.0
        with:
          node-version: 16
          cache: ${{ github.event.inputs.packageManager }}
      - name: Install npm dependencies
        run: ${{ github.event.inputs.packageManager }} install
      - name: Build Android app
        uses: gradle/gradle-build-action@v2.2.1
        with:
          gradle-version: wrapper
          arguments: --no-daemon clean assembleDebug
          build-root-directory: ${{ github.event.inputs.projectRoot }}/android
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: android-artifact
          path: ${{ github.event.inputs.projectRoot }}/android/app/build/outputs/apk/debug/app-debug.apk
  build-ios:
    name: "Build iOS"
    if: ${{ github.event.inputs.platform == 'ios' }}
    runs-on: macos-12
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node 16
        uses: actions/setup-node@v3.3.0
        with:
          node-version: 16
          cache: ${{ github.event.inputs.packageManager }}
      - name: Install npm dependencies
        run: ${{ github.event.inputs.packageManager }} install
      - name: Install Pods
        run: |
          pod install --project-directory=ios
        working-directory: ${{ github.event.inputs.projectRoot }}
      - name: Disable Clang sanitizers
        run: |
          # We need to disable Clang sanitizers otherwise the app will crash on
          # startup trying to load Clang sanitizer libraries that would only
          # exist if Xcode was attached.
          xcconfig=node_modules/.generated/ios/ReactTestApp/ReactTestApp.debug.xcconfig
          sed -i '' 's/CLANG_ADDRESS_SANITIZER = YES/CLANG_ADDRESS_SANITIZER = NO/g' ${xcconfig}
          sed -i '' 's/CLANG_UNDEFINED_BEHAVIOR_SANITIZER = YES/CLANG_UNDEFINED_BEHAVIOR_SANITIZER = NO/g' ${xcconfig}
          sed -i '' 's/-fsanitize=bounds//g' ${xcconfig}
        working-directory: ${{ github.event.inputs.projectRoot }}
      - name: Build iOS app
        run: |
          if [[ ${{ github.event.inputs.deviceType }} == 'device' ]]; then
            destination='generic/platform=iOS'
          else
            destination='generic/platform=iOS Simulator'
          fi
          xcworkspace=$(find . -maxdepth 1 -name '*.xcworkspace' -type d | head -1)
          xcodebuild -workspace ${xcworkspace} -scheme ReactTestApp -destination "${destination}" -configuration Debug -derivedDataPath DerivedData CODE_SIGNING_ALLOWED=NO COMPILER_INDEX_STORE_ENABLE=NO build
        working-directory: ${{ github.event.inputs.projectRoot }}/ios
      - name: Prepare build artifact
        run: |
          output_path=DerivedData/Build/Products
          app=$(find ${output_path} -maxdepth 2 -name '*.app' -type d | head -1)
          # bsdtar corrupts files when archiving due to APFS sparse files. A
          # workaround is to use GNU Tar instead. See also:
          #   - https://github.com/actions/cache/issues/403
          #   - https://github.com/actions/virtual-environments/issues/2619
          gtar -cvf ios-artifact.tar -C "$(dirname ${app})" "$(basename ${app})"
          shasum --algorithm 256 ios-artifact.tar
        working-directory: ${{ github.event.inputs.projectRoot }}/ios
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ios-artifact
          path: ${{ github.event.inputs.projectRoot }}/ios/ios-artifact.tar
  build-macos:
    name: "Build macOS"
    if: ${{ github.event.inputs.platform == 'macos' }}
    runs-on: macos-12
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node 16
        uses: actions/setup-node@v3.3.0
        with:
          node-version: 16
          cache: ${{ github.event.inputs.packageManager }}
      - name: Install npm dependencies
        run: ${{ github.event.inputs.packageManager }} install
      - name: Install Pods
        run: pod install --project-directory=macos
        working-directory: ${{ github.event.inputs.projectRoot }}
      - name: Build macOS app
        run: |
          xcworkspace=$(find . -maxdepth 1 -name '*.xcworkspace' -type d | head -1)
          xcodebuild -workspace ${xcworkspace} -scheme ReactTestApp -configuration Debug -derivedDataPath DerivedData CODE_SIGNING_ALLOWED=NO COMPILER_INDEX_STORE_ENABLE=NO build
        working-directory: ${{ github.event.inputs.projectRoot }}/macos
      - name: Prepare build artifact
        run: |
          output_path=DerivedData/Build/Products
          app=$(find ${output_path} -maxdepth 2 -name '*.app' -type d | head -1)
          # bsdtar corrupts files when archiving due to APFS sparse files. A
          # workaround is to use GNU Tar instead. See also:
          #   - https://github.com/actions/cache/issues/403
          #   - https://github.com/actions/virtual-environments/issues/2619
          gtar -cvf macos-artifact.tar -C "$(dirname ${app})" "$(basename ${app})"
          shasum --algorithm 256 macos-artifact.tar
        working-directory: ${{ github.event.inputs.projectRoot }}/macos
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos-artifact
          path: ${{ github.event.inputs.projectRoot }}/macos/macos-artifact.tar
  build-windows:
    name: "Build Windows"
    if: ${{ github.event.inputs.platform == 'windows' }}
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v1.1
      - name: Set up Node 16
        uses: actions/setup-node@v3.3.0
        with:
          node-version: 16
          cache: ${{ github.event.inputs.packageManager }}
      - name: Install npm dependencies
        run: ${{ github.event.inputs.packageManager }} install
      - name: Install Windows test app
        run: |
          npx --package react-native-test-app -- install-windows-test-app --use-nuget
        working-directory: ${{ github.event.inputs.projectRoot }}
      - name: Set OID for unsigned packages
        run: |
          # https://docs.microsoft.com/en-us/windows/msix/package/unsigned-package
          (Get-Content node_modules\.generated\windows\ReactTestApp\Package.appxmanifest) -replace '"CN=ReactTestApp"', '"CN=ReactTestApp, OID.2.25.311729368913984317654407730594956997722=1"' | Out-File -Encoding utf8 node_modules\.generated\windows\ReactTestApp\Package.appxmanifest
        working-directory: ${{ github.event.inputs.projectRoot }}
      - name: Install NuGet packages
        run: |
          nuget restore
        working-directory: ${{ github.event.inputs.projectRoot }}/windows
      - name: Build Windows app
        run: |
          MSBuild -maxCpuCount -property:Configuration=Debug -property:Platform=${{ github.event.inputs.architecture }} -property:AppxBundlePlatforms=${{ github.event.inputs.architecture }} -property:AppxBundle=Always -property:UapAppxPackageBuildMode=SideloadOnly -property:UseBundle=false -target:Build
        working-directory: ${{ github.event.inputs.projectRoot }}/windows
      - name: Prepare build artifact
        run: |
          cp ${{ github.event.inputs.architecture }}/Debug/ReactTestApp/AppxManifest.xml AppPackages/ReactTestApp/*
        shell: bash
        working-directory: ${{ github.event.inputs.projectRoot }}/windows
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-artifact
          path: ${{ github.event.inputs.projectRoot }}/windows/AppPackages/ReactTestApp
