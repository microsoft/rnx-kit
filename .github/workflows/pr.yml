name: CI
on: pull_request
jobs:
  review:
    name: "Review"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Node 16
        uses: actions/setup-node@v3.0.0
        with:
          node-version: 16
          cache: npm
      - name: Ensure rnx-kit packages come from our repository
        run: node scripts/validate-package-lock.mjs
      - name: Deduplicate packages
        run: npm find-dupes --no-audit --no-fund
      - name: Install npm dependencies
        run: npm ci
      - name: Check for change files
        run: npm run change:check -- --since origin/${{ github.base_ref }}
      - name: Format
        run: npm run format
      - name: Report formatting changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git diff | npx suggestion-bot -m 'Code formatting differences were found – did you forget to run `npm run format`?'
          git checkout .
      - name: Align dependencies
        run: npm run rnx-dep-check -- --write
      - name: Report dep-check changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git diff | npx suggestion-bot -m 'Dependencies are potentially misaligned – run `npm run rnx-dep-check` locally for more details'
          git checkout .
  build:
    name: "Build"
    strategy:
      matrix:
        node-version: [14, 16]
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Go ^1.14.0
        uses: actions/setup-go@v2
        with:
          go-version: "^1.14.0"
      - name: Set up Node ${{ matrix.node-version }}
        uses: actions/setup-node@v3.0.0
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
      - name: Install npm 8
        if: ${{ matrix.node-version == 14 }}
        run: |
          # Lock version to workaround EPERM on Windows. For more details, see
          # https://github.com/actions/setup-node/issues/411
          npm i -g npm@8.3.1
        shell: bash
      - name: Install npm dependencies
        run: |
          npm ci
          # `npm ci` does not install optional dependencies. We have to manually
          # invoke postinstall scripts to make that happen.
          node -e 'require("esbuild/install")'
        shell: bash
      - name: Build and test packages
        run: npm run build:ci
      - name: Ensure READMEs are up-to-date
        if: ${{ matrix.node-version == 16 && matrix.os == 'ubuntu-latest' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run update-readme
          git diff | npx suggestion-bot -m 'Changes were found in READMEs – did you forget to run `npm run update-readme`?'
      - name: Bundle packages
        run: npm run bundle:ci
      - name: Bundle test app with esbuild
        run: |
          npm run bundle+esbuild
        shell: bash
        working-directory: packages/test-app
  build-android:
    name: "Build Android"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v3.0.0
        with:
          distribution: temurin
          java-version: 11
      - name: Set up Node 16
        uses: actions/setup-node@v3.0.0
        with:
          node-version: 16
          cache: npm
      - name: Install npm dependencies
        run: npm ci
      - name: Build Android app
        run: |
          ./gradlew clean build
        working-directory: packages/test-app/android
  build-ios:
    name: "Build iOS"
    runs-on: macos-11
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Node 16
        uses: actions/setup-node@v3.0.0
        with:
          node-version: 16
          cache: npm
      - name: Install npm dependencies
        run: npm ci
      - name: Install Pods
        run: pod install --project-directory=ios
        working-directory: packages/test-app
      - name: Build iOS app
        run: |
          device_name='iPhone 12'
          device=$(xcrun simctl list devices "${device_name}" available | grep "${device_name} (")
          re='\(([-0-9A-Fa-f]+)\)'
          [[ $device =~ $re ]] || exit 1
          xcodebuild -workspace SampleCrossApp.xcworkspace -scheme ReactTestApp -destination "platform=iOS Simulator,id=${BASH_REMATCH[1]}" CODE_SIGNING_ALLOWED=NO COMPILER_INDEX_STORE_ENABLE=NO build | xcpretty
        working-directory: packages/test-app/ios
  label:
    name: "Label"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/labeler@v4
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          sync-labels: true
        continue-on-error: true
